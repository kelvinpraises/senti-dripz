{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_allo",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_sndrCore",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ALLOCATION_ACTIVE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ALLOCATION_NOT_ACTIVE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ALLOCATION_NOT_ENDED",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ALREADY_INITIALIZED",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AMOUNT_MISMATCH",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ANCHOR_ERROR",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ARRAY_MISMATCH",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "INVALID",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "INVALID_ADDRESS",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "INVALID_FEE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "INVALID_METADATA",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "INVALID_REGISTRATION",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "IS_APPROVED_STRATEGY",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MISMATCH",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NONCE_NOT_AVAILABLE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NON_ZERO_VALUE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NOT_APPROVED_STRATEGY",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NOT_ENOUGH_FUNDS",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NOT_IMPLEMENTED",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NOT_INITIALIZED",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NOT_PENDING_OWNER",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "POOL_ACTIVE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "POOL_INACTIVE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "RECIPIENT_ALREADY_ACCEPTED",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipientId",
						"type": "address"
					}
				],
				"name": "RECIPIENT_ERROR",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "RECIPIENT_NOT_ACCEPTED",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "REGISTRATION_ACTIVE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "REGISTRATION_NOT_ACTIVE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UNAUTHORIZED",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZERO_ADDRESS",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipientId",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "Allocated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newAllocation",
						"type": "uint256"
					}
				],
				"name": "AllocationUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allocationsCount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalAllocated",
						"type": "uint256"
					}
				],
				"name": "BatchAllocationCompleted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipientId",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "Distributed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "recipientIds",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalAllocation",
						"type": "uint256"
					}
				],
				"name": "DistributionExecuted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					}
				],
				"name": "PoolActive",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "initialAllocation",
						"type": "uint256"
					}
				],
				"name": "RecipientRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum IStrategy.Status",
						"name": "status",
						"type": "uint8"
					}
				],
				"name": "RecipientStatusUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipientId",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "Registered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "registrationStartTime",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "registrationEndTime",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "allocationStartTime",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "allocationEndTime",
						"type": "uint64"
					}
				],
				"name": "TimestampsUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "newWhitelistedCollectors",
						"type": "address[]"
					}
				],
				"name": "WhitelistedCollectorsUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "NATIVE",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "allocate",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "allocationEndTime",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "allocationStartTime",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_recipientIds",
						"type": "address[]"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "distribute",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllo",
				"outputs": [
					{
						"internalType": "contract IAllo",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_recipientIds",
						"type": "address[]"
					},
					{
						"internalType": "bytes[]",
						"name": "_data",
						"type": "bytes[]"
					}
				],
				"name": "getPayouts",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "recipientAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}
						],
						"internalType": "struct IStrategy.PayoutSummary[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPoolAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPoolId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipientAddress",
						"type": "address"
					}
				],
				"name": "getRecipientDetails",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "recipientAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "totalAllocation",
								"type": "uint256"
							},
							{
								"internalType": "enum IStrategy.Status",
								"name": "status",
								"type": "uint8"
							}
						],
						"internalType": "struct SNDRStrategy.Recipient",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipientId",
						"type": "address"
					}
				],
				"name": "getRecipientStatus",
				"outputs": [
					{
						"internalType": "enum IStrategy.Status",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getStrategyId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalRecipients",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "increasePoolAmount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isPoolActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_allocator",
						"type": "address"
					}
				],
				"name": "isValidAllocator",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "recipientList",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "recipients",
				"outputs": [
					{
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "totalAllocation",
						"type": "uint256"
					},
					{
						"internalType": "enum IStrategy.Status",
						"name": "status",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "registerRecipient",
				"outputs": [
					{
						"internalType": "address",
						"name": "recipientId",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "registrationEndTime",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "registrationStartTime",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sndrCore",
				"outputs": [
					{
						"internalType": "contract ISNDRCore",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_registrationStartTime",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "_registrationEndTime",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "_allocationStartTime",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "_allocationEndTime",
						"type": "uint64"
					}
				],
				"name": "updatePoolTimestamps",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipientAddress",
						"type": "address"
					},
					{
						"internalType": "enum IStrategy.Status",
						"name": "_newStatus",
						"type": "uint8"
					}
				],
				"name": "updateRecipientStatus",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_newWhitelistedCollectors",
						"type": "address[]"
					}
				],
				"name": "updateWhitelistedCollectors",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "whitelistedCollectors",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawRemainingTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Inherits from BaseStrategy, Ownable, and ReentrancyGuard",
			"errors": {
				"ANCHOR_ERROR()": [
					{
						"details": "Thrown if the anchor creation fails"
					}
				],
				"NONCE_NOT_AVAILABLE()": [
					{
						"details": "Thrown when the nonce passed has been used or not available"
					}
				],
				"NOT_PENDING_OWNER()": [
					{
						"details": "Thrown when the 'msg.sender' is not the pending owner on ownership transfer"
					}
				]
			},
			"events": {
				"Allocated(address,uint256,address,address)": {
					"params": {
						"amount": "The amount allocated",
						"recipientId": "The ID of the recipient",
						"token": "The token allocated"
					}
				},
				"Distributed(address,address,uint256,address)": {
					"params": {
						"amount": "The amount distributed",
						"recipientAddress": "The recipient",
						"recipientId": "The ID of the recipient",
						"sender": "The sender"
					}
				},
				"Initialized(uint256,bytes)": {
					"params": {
						"data": "The data passed to the 'initialize' function",
						"poolId": "The ID of the pool"
					}
				},
				"PoolActive(bool)": {
					"params": {
						"active": "The status of the pool"
					}
				},
				"Registered(address,bytes,address)": {
					"params": {
						"data": "The data passed to the 'registerRecipient' function",
						"recipientId": "The ID of the recipient",
						"sender": "The sender"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"allocate(bytes,address)": {
					"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
					"params": {
						"_data": "The data to use to allocate to the recipient",
						"_sender": "The address of the sender"
					}
				},
				"constructor": {
					"params": {
						"_allo": "Address of the Allo contract",
						"_sndrCore": "Address of the SNDR core contract",
						"_token": "Address of the ERC20 token used for distributions"
					}
				},
				"distribute(address[],bytes,address)": {
					"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
					"params": {
						"_data": "The data to use to distribute to the recipients",
						"_recipientIds": "The IDs of the recipients",
						"_sender": "The address of the sender"
					}
				},
				"getAllo()": {
					"returns": {
						"_0": "The Allo contract"
					}
				},
				"getPayouts(address[],bytes[])": {
					"details": "The encoded '_data' will be determined by the strategy implementation.",
					"params": {
						"_data": "The data to use to get the payout summary for the recipients",
						"_recipientIds": "The IDs of the recipients"
					},
					"returns": {
						"_0": "The payout summary for the recipients"
					}
				},
				"getPoolAmount()": {
					"returns": {
						"_0": "The balance of the pool"
					}
				},
				"getPoolId()": {
					"returns": {
						"_0": "The ID of the pool"
					}
				},
				"getRecipientDetails(address)": {
					"params": {
						"_recipientAddress": "Address of the recipient"
					},
					"returns": {
						"_0": "Recipient struct containing recipient details"
					}
				},
				"getRecipientStatus(address)": {
					"params": {
						"_recipientId": "The ID of the recipient"
					},
					"returns": {
						"_0": "The status of the recipient"
					}
				},
				"getStrategyId()": {
					"returns": {
						"_0": "The ID of the strategy"
					}
				},
				"getTotalRecipients()": {
					"returns": {
						"_0": "uint256 Total number of recipients"
					}
				},
				"increasePoolAmount(uint256)": {
					"details": "Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.",
					"params": {
						"_amount": "The amount to increase the pool by"
					}
				},
				"initialize(uint256,bytes)": {
					"details": "Overrides BaseStrategy's initialize function",
					"params": {
						"_data": "Encoded initialization parameters",
						"_poolId": "ID of the pool"
					}
				},
				"isPoolActive()": {
					"returns": {
						"_0": "'true' if the pool is active, otherwise 'false'"
					}
				},
				"isValidAllocator(address)": {
					"details": "How the allocator is determined is up to the strategy implementation.",
					"params": {
						"_allocator": "The address to check if it is a valid allocator for the strategy."
					},
					"returns": {
						"_0": "'true' if the address is a valid allocator, 'false' otherwise"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"registerRecipient(bytes,address)": {
					"details": "Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.",
					"params": {
						"_data": "The data to use to register the recipient",
						"_sender": "The address of the sender"
					},
					"returns": {
						"recipientId": "The recipientId"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updatePoolTimestamps(uint64,uint64,uint64,uint64)": {
					"params": {
						"_allocationEndTime": "New allocation end time",
						"_allocationStartTime": "New allocation start time",
						"_registrationEndTime": "New registration end time",
						"_registrationStartTime": "New registration start time"
					}
				},
				"updateRecipientStatus(address,uint8)": {
					"params": {
						"_newStatus": "New status to set",
						"_recipientAddress": "Address of the recipient"
					}
				},
				"updateWhitelistedCollectors(address[])": {
					"params": {
						"_newWhitelistedCollectors": "Address of the collector"
					}
				},
				"withdrawRemainingTokens()": {
					"details": "Can only be called by the owner"
				}
			},
			"title": "SNDRStrategy Contract",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"ALLOCATION_ACTIVE()": [
					{
						"notice": "Thrown when the allocation is active."
					}
				],
				"ALLOCATION_NOT_ACTIVE()": [
					{
						"notice": "Thrown when the allocation is not active."
					}
				],
				"ALLOCATION_NOT_ENDED()": [
					{
						"notice": "Thrown when the allocation is not ended."
					}
				],
				"ALREADY_INITIALIZED()": [
					{
						"notice": "Thrown when data is already intialized"
					}
				],
				"AMOUNT_MISMATCH()": [
					{
						"notice": "Thrown when the amount of tokens sent does not match the amount of tokens expected"
					}
				],
				"ARRAY_MISMATCH()": [
					{
						"notice": "Thrown when two arrays length are not equal"
					}
				],
				"INVALID()": [
					{
						"notice": "Thrown as a general error when input / data is invalid"
					}
				],
				"INVALID_ADDRESS()": [
					{
						"notice": "Thrown when an invalid address is used"
					}
				],
				"INVALID_FEE()": [
					{
						"notice": "Thrown when the fee is below 1e18 which is the fee percentage denominator"
					}
				],
				"INVALID_METADATA()": [
					{
						"notice": "Thrown when the metadata is invalid."
					}
				],
				"INVALID_REGISTRATION()": [
					{
						"notice": "Thrown when the registration is invalid."
					}
				],
				"IS_APPROVED_STRATEGY()": [
					{
						"notice": "Thrown when the strategy is approved and should be cloned"
					}
				],
				"MISMATCH()": [
					{
						"notice": "Thrown when mismatch in decoding data"
					}
				],
				"NON_ZERO_VALUE()": [
					{
						"notice": "Thrown when the value is non-zero"
					}
				],
				"NOT_APPROVED_STRATEGY()": [
					{
						"notice": "Thrown when the strategy is not approved"
					}
				],
				"NOT_ENOUGH_FUNDS()": [
					{
						"notice": "Thrown when not enough funds are available"
					}
				],
				"NOT_IMPLEMENTED()": [
					{
						"notice": "Thrown when the function is not implemented"
					}
				],
				"NOT_INITIALIZED()": [
					{
						"notice": "Thrown when data is yet to be initialized"
					}
				],
				"POOL_ACTIVE()": [
					{
						"notice": "Thrown when a pool is already active"
					}
				],
				"POOL_INACTIVE()": [
					{
						"notice": "Thrown when a pool is inactive"
					}
				],
				"RECIPIENT_ALREADY_ACCEPTED()": [
					{
						"notice": "Thrown when recipient is already accepted."
					}
				],
				"RECIPIENT_ERROR(address)": [
					{
						"notice": "Thrown when there is an error in recipient."
					}
				],
				"RECIPIENT_NOT_ACCEPTED()": [
					{
						"notice": "Thrown when the recipient is not accepted."
					}
				],
				"REGISTRATION_ACTIVE()": [
					{
						"notice": "Thrown when registration is active."
					}
				],
				"REGISTRATION_NOT_ACTIVE()": [
					{
						"notice": "Thrown when registration is not active."
					}
				],
				"UNAUTHORIZED()": [
					{
						"notice": "Thrown when user is not authorized"
					}
				],
				"ZERO_ADDRESS()": [
					{
						"notice": "Thrown when address is the zero address"
					}
				]
			},
			"events": {
				"Allocated(address,uint256,address,address)": {
					"notice": "Emitted when a recipient is allocated to."
				},
				"Distributed(address,address,uint256,address)": {
					"notice": "Emitted when tokens are distributed."
				},
				"Initialized(uint256,bytes)": {
					"notice": "Emitted when strategy is initialized."
				},
				"PoolActive(bool)": {
					"notice": "Emitted when pool is set to active status."
				},
				"Registered(address,bytes,address)": {
					"notice": "Emitted when a recipient is registered."
				}
			},
			"kind": "user",
			"methods": {
				"NATIVE()": {
					"notice": "Address of the native token"
				},
				"allocate(bytes,address)": {
					"notice": "Allocates to a recipient."
				},
				"constructor": {
					"notice": "Constructor to set the Allo contract, SNDR core, and token addresses"
				},
				"distribute(address[],bytes,address)": {
					"notice": "Distributes funds (tokens) to recipients."
				},
				"getAllo()": {
					"notice": "Getter for the 'Allo' contract."
				},
				"getPayouts(address[],bytes[])": {
					"notice": "Gets the payout summary for recipients."
				},
				"getPoolAmount()": {
					"notice": "Getter for the 'poolAmount'."
				},
				"getPoolId()": {
					"notice": "Getter for the 'poolId'."
				},
				"getRecipientDetails(address)": {
					"notice": "Returns the details of a recipient"
				},
				"getRecipientStatus(address)": {
					"notice": "Getter for the status of a recipient."
				},
				"getStrategyId()": {
					"notice": "Getter for the 'strategyId'."
				},
				"getTotalRecipients()": {
					"notice": "Returns the total number of registered recipients"
				},
				"increasePoolAmount(uint256)": {
					"notice": "Increases the pool amount."
				},
				"initialize(uint256,bytes)": {
					"notice": "Initializes the strategy with pool-specific parameters"
				},
				"isPoolActive()": {
					"notice": "Getter for whether or not the pool is active."
				},
				"isValidAllocator(address)": {
					"notice": "Checks if the '_allocator' is a valid allocator."
				},
				"registerRecipient(bytes,address)": {
					"notice": "Registers a recipient."
				},
				"updatePoolTimestamps(uint64,uint64,uint64,uint64)": {
					"notice": "Updates the pool timestamps"
				},
				"updateRecipientStatus(address,uint8)": {
					"notice": "Updates the status of a recipient"
				},
				"updateWhitelistedCollectors(address[])": {
					"notice": "Updates whitelisted collectors"
				},
				"withdrawRemainingTokens()": {
					"notice": "Withdraws any remaining tokens from the contract"
				}
			},
			"notice": "This contract implements a custom strategy for distributing funds to recipients",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/SNDRStrategy.sol": "SNDRStrategy"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [
			":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/",
			":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/",
			":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/",
			":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/",
			":@sablier/v2-core/=lib/allo-v2/lib/v2-core/",
			":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/",
			":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/",
			":allo-v2/=lib/allo-v2/contracts/",
			":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/",
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/",
			":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/",
			":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
			":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/",
			":forge-std/=lib/forge-std/src/",
			":hats-protocol/=lib/allo-v2/lib/hats-protocol/",
			":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/",
			":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/",
			":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/",
			":openzeppelin-contracts/=lib/openzeppelin-contracts/",
			":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/",
			":permit2/=lib/allo-v2/lib/permit2/",
			":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/",
			":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/",
			":solady/=lib/allo-v2/lib/solady/src/",
			":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/",
			":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/",
			":solmate/=lib/allo-v2/lib/permit2/lib/solmate/",
			":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/",
			":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/",
			":v2-core/=lib/allo-v2/lib/v2-core/"
		],
		"viaIR": true
	},
	"sources": {
		"lib/allo-v2/contracts/core/interfaces/IAllo.sol": {
			"keccak256": "0x7bc06a262ffe042092c58949452b043546788a66616bec2a40f55975fd537c1d",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://7420316020e25430b295e876562932810f274c7c651cbda8c09989a3ad9837d2",
				"dweb:/ipfs/QmfNx7MHNK9t4ReeA71CBUXHEhYNj6suDYHY7pjqUDc1T3"
			]
		},
		"lib/allo-v2/contracts/core/interfaces/IRegistry.sol": {
			"keccak256": "0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f",
			"license": "MIT",
			"urls": [
				"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e",
				"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA"
			]
		},
		"lib/allo-v2/contracts/core/interfaces/IStrategy.sol": {
			"keccak256": "0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487",
				"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH"
			]
		},
		"lib/allo-v2/contracts/core/libraries/Errors.sol": {
			"keccak256": "0x67e3c1109948a92cb3a01e8c2325c5f1b748ecbd4c9cd5bee34e81fa737f77ea",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://9603d3f1c4bb4b44a55663e71688a9d10786038e5dfa5039aa354572af1a53c3",
				"dweb:/ipfs/QmWNxsPH9YaJJkFiiU6oJ642i5kHxPzpRYfR5H8zSH4KaP"
			]
		},
		"lib/allo-v2/contracts/core/libraries/Metadata.sol": {
			"keccak256": "0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://2cc5507da2550ab9bfa0fbb263e703f9e70b831190bb7b2bcdbb231cab49795c",
				"dweb:/ipfs/QmQXCD8v2HppXAX17aH49JvNyyfDYzGMrg63QNabUEXPpn"
			]
		},
		"lib/allo-v2/contracts/core/libraries/Native.sol": {
			"keccak256": "0x23dacace24a8c570a659dcc7e52fca2d39cc7577c6cfa674820cafaf194b29d5",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://0727880a600b1803f02b58ad002938462dc61aacf841f5e1ee38f296fdd67e8a",
				"dweb:/ipfs/QmdrEiJxFFnUfn2QUNxRAUMS1qwCnRtGeWPChaGzhAkRnv"
			]
		},
		"lib/allo-v2/contracts/core/libraries/Transfer.sol": {
			"keccak256": "0x99f4e3bfd5cea354c2ef9e9774d7bdb2310faec5e7a21a619d87377b40eba135",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://f84412d189fa7c6ea3656409af156fad084b1a541850798da3e76549e3124588",
				"dweb:/ipfs/QmT3roFjt41PX7zgjT7KdThFU37Fh7F6vEyKooSzpfTBvq"
			]
		},
		"lib/allo-v2/contracts/strategies/BaseStrategy.sol": {
			"keccak256": "0x3f1382dc6c35d50545e327e7ed6016f2bd752357d446bd698014073f0b812873",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://99500abcd617fa43f6dde49e2c7802821ceaf54a65a8055cbbf2695ecd107974",
				"dweb:/ipfs/QmUktZkWuu3GCMEijY1fqt7NMy7BzpTvEtcmpB1fuoa7zt"
			]
		},
		"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
				"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
			]
		},
		"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a",
			"license": "MIT",
			"urls": [
				"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a",
				"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv"
			]
		},
		"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1",
			"license": "MIT",
			"urls": [
				"bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68",
				"dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS"
			]
		},
		"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
			"keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
				"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
			]
		},
		"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol": {
			"keccak256": "0x06d3261d13cf5a08f9bcda05e17be0a6a0380193116298fdf8eabf9bf80d3624",
			"license": "MIT",
			"urls": [
				"bzz-raw://96965a8a2b1bd2d6cff4a8f78bcb33b0de8848834f8e4be28c03609ae08e9298",
				"dweb:/ipfs/QmSoNDxaEozMZgNdVEygfEvnk26Tu4UeFeapvtMsoUFftt"
			]
		},
		"src/SNDRStrategy.sol": {
			"keccak256": "0x79d0341cb7bab9713e47e4a4036435b19ab471a4924b7265e40f804a1f113470",
			"license": "MIT",
			"urls": [
				"bzz-raw://d079cb89bf9bb1a4d6a11b03c4f9c5b6e46a4b8b42c8dff1a0ad18f5496ade77",
				"dweb:/ipfs/QmWqeViEkpFRx4TqZ83RavYHrivyhnGyoNUW2j9FiNVHGV"
			]
		}
	},
	"version": 1
}