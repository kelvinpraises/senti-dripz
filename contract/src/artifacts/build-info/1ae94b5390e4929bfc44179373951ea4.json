{
	"id": "1ae94b5390e4929bfc44179373951ea4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"settings": {
			"viaIR": true,
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/",
				"@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/",
				"@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/",
				"@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/",
				"@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/",
				"@sablier/v2-core/=lib/allo-v2/lib/v2-core/",
				"@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/",
				"ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/",
				"allo-v2/=lib/allo-v2/contracts/",
				"ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/",
				"eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/",
				"eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/",
				"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
				"forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/",
				"forge-std/=lib/forge-std/src/",
				"hats-protocol/=lib/allo-v2/lib/hats-protocol/",
				"hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/",
				"lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/",
				"openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/",
				"openzeppelin-contracts/=lib/openzeppelin-contracts/",
				"openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/",
				"permit2/=lib/allo-v2/lib/permit2/",
				"prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/",
				"prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/",
				"solady/=lib/allo-v2/lib/solady/src/",
				"solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/",
				"solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/",
				"solmate/=lib/allo-v2/lib/permit2/lib/solmate/",
				"superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/",
				"utils/=lib/allo-v2/lib/hats-protocol/lib/utils/",
				"v2-core/=lib/allo-v2/lib/v2-core/"
			]
		},
		"sources": {
			"src/SNDRStrategy.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"allo-v2/strategies/BaseStrategy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface ISNDRCore {\n    function handleDistribution(\n        uint256 poolId,\n        IERC20 token,\n        address[] memory recipients,\n        uint256[] memory allocations,\n        uint256 duration,\n        address[] memory whitelistedCollectors\n    ) external;\n}\n\n/// @title SNDRStrategy Contract\n/// @notice This contract implements a custom strategy for distributing funds to recipients\n/// @dev Inherits from BaseStrategy, Ownable, and ReentrancyGuard\ncontract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    ISNDRCore public sndrCore;\n    IERC20 public token;\n\n    struct Recipient {\n        address recipientAddress;\n        uint256 totalAllocation;\n        Status status;\n    }\n\n    mapping(address => Recipient) public recipients;\n    address[] public recipientList;\n    address[] public whitelistedCollectors;\n\n    // Timestamp management\n    uint64 public registrationStartTime;\n    uint64 public registrationEndTime;\n    uint64 public allocationStartTime;\n    uint64 public allocationEndTime;\n\n    // Events\n    event RecipientRegistered(\n        address indexed recipientAddress,\n        uint256 initialAllocation\n    );\n    event AllocationUpdated(\n        address indexed recipientAddress,\n        uint256 newAllocation\n    );\n    event TimestampsUpdated(\n        uint64 registrationStartTime,\n        uint64 registrationEndTime,\n        uint64 allocationStartTime,\n        uint64 allocationEndTime\n    );\n    event BatchAllocationCompleted(\n        uint256 allocationsCount,\n        uint256 totalAllocated\n    );\n    event WhitelistedCollectorsUpdated(address[] newWhitelistedCollectors);\n    event RecipientStatusUpdated(\n        address indexed recipientAddress,\n        Status status\n    );\n    event DistributionExecuted(address[] recipientIds, uint256 totalAllocation);\n\n    /// @notice Constructor to set the Allo contract, SNDR core, and token addresses\n    /// @param _allo Address of the Allo contract\n    /// @param _sndrCore Address of the SNDR core contract\n    /// @param _token Address of the ERC20 token used for distributions\n    constructor(\n        address _allo,\n        address _sndrCore,\n        address _token\n    ) BaseStrategy(_allo, \"SNDRStrategy\") Ownable() {\n        sndrCore = ISNDRCore(_sndrCore);\n        token = IERC20(_token);\n    }\n\n    /// @notice Initializes the strategy with pool-specific parameters\n    /// @dev Overrides BaseStrategy's initialize function\n    /// @param _poolId ID of the pool\n    /// @param _data Encoded initialization parameters\n    function initialize(uint256 _poolId, bytes memory _data) external override {\n        __BaseStrategy_init(_poolId);\n\n        (\n            uint64 _registrationStartTime,\n            uint64 _registrationEndTime,\n            uint64 _allocationStartTime,\n            uint64 _allocationEndTime\n        ) = abi.decode(_data, (uint64, uint64, uint64, uint64));\n\n        _updatePoolTimestamps(\n            _registrationStartTime,\n            _registrationEndTime,\n            _allocationStartTime,\n            _allocationEndTime\n        );\n    }\n\n    /// @notice Updates the pool timestamps\n    /// @param _registrationStartTime New registration start time\n    /// @param _registrationEndTime New registration end time\n    /// @param _allocationStartTime New allocation start time\n    /// @param _allocationEndTime New allocation end time\n    function _updatePoolTimestamps(\n        uint64 _registrationStartTime,\n        uint64 _registrationEndTime,\n        uint64 _allocationStartTime,\n        uint64 _allocationEndTime\n    ) internal {\n        require(\n            _registrationStartTime < _registrationEndTime,\n            \"Invalid registration times\"\n        );\n        require(\n            _allocationStartTime < _allocationEndTime,\n            \"Invalid allocation times\"\n        );\n        require(\n            _registrationEndTime <= _allocationStartTime,\n            \"Registration must end before allocation starts\"\n        );\n\n        registrationStartTime = _registrationStartTime;\n        registrationEndTime = _registrationEndTime;\n        allocationStartTime = _allocationStartTime;\n        allocationEndTime = _allocationEndTime;\n\n        emit TimestampsUpdated(\n            registrationStartTime,\n            registrationEndTime,\n            allocationStartTime,\n            allocationEndTime\n        );\n    }\n\n    /// @notice Registers a recipient\n    /// @dev Overrides BaseStrategy's _registerRecipient function\n    /// @param _data Encoded recipient data\n    //  @param _sender Address of the sender\n    /// @return recipientId The address of the registered recipient\n    function _registerRecipient(\n        bytes memory _data,\n        address\n    )\n        internal\n        override\n        onlyActiveRegistration\n        nonReentrant\n        returns (address recipientId)\n    {\n        (address recipientAddress, uint256 initialAllocation) = abi.decode(\n            _data,\n            (address, uint256)\n        );\n\n        require(\n            recipients[recipientAddress].recipientAddress == address(0),\n            \"Recipient already registered\"\n        );\n\n        recipients[recipientAddress] = Recipient({\n            recipientAddress: recipientAddress,\n            totalAllocation: initialAllocation,\n            status: Status.Pending\n        });\n        recipientList.push(recipientAddress);\n\n        emit RecipientRegistered(recipientAddress, initialAllocation);\n        emit RecipientStatusUpdated(recipientAddress, Status.Pending);\n\n        return recipientAddress;\n    }\n\n    /// @notice Allocates funds to recipients\n    /// @dev Overrides BaseStrategy's _allocate function\n    /// @param _data Encoded allocation data\n    /// @param _sender Address of the sender\n    function _allocate(\n        bytes memory _data,\n        address _sender\n    ) internal override onlyActiveAllocation onlyPoolManager(_sender) {\n        (address[] memory recipientAddresses, uint256[] memory amounts) = abi\n            .decode(_data, (address[], uint256[]));\n        require(\n            recipientAddresses.length == amounts.length,\n            \"Mismatched input arrays\"\n        );\n\n        // First, validate all recipients\n        for (uint256 i = 0; i < recipientAddresses.length; i++) {\n            address recipientAddress = recipientAddresses[i];\n            require(\n                recipients[recipientAddress].recipientAddress != address(0),\n                \"Recipient not registered\"\n            );\n            require(\n                recipients[recipientAddress].status == Status.Accepted,\n                \"Recipient not accepted\"\n            );\n        }\n\n        // If all validations pass, perform the allocations\n        uint256 totalAllocated = 0;\n        for (uint256 i = 0; i < recipientAddresses.length; i++) {\n            address recipientAddress = recipientAddresses[i];\n            uint256 amount = amounts[i];\n\n            recipients[recipientAddress].totalAllocation += amount;\n            totalAllocated += amount;\n\n            emit AllocationUpdated(\n                recipientAddress,\n                recipients[recipientAddress].totalAllocation\n            );\n        }\n\n        require(totalAllocated > 0, \"No funds allocated\");\n\n        emit BatchAllocationCompleted(\n            recipientAddresses.length,\n            totalAllocated\n        );\n    }\n\n    /// @notice Distributes funds to recipients\n    /// @dev Overrides BaseStrategy's _distribute function\n    /// @param _recipientIds Array of recipient addresses\n    /// @param _data Additional distribution data\n    /// @custom:data '(uint256 duration)'\n    /// @param _sender Address of the sender\n    function _distribute(\n        address[] memory _recipientIds,\n        bytes memory _data,\n        address _sender\n    )\n        internal\n        override\n        onlyAfterAllocation\n        nonReentrant\n        onlyPoolManager(_sender)\n    {\n        // Calculate duration\n        uint256 duration = abi.decode(_data, (uint256));\n\n        // Prepare allocation data\n        uint256[] memory allocations = new uint256[](_recipientIds.length);\n        uint256 totalAllocation = 0;\n        for (uint256 i = 0; i < _recipientIds.length; i++) {\n            allocations[i] = recipients[_recipientIds[i]].totalAllocation;\n            totalAllocation += allocations[i];\n        }\n        require(poolAmount >= totalAllocation, \"Pool allocation funds too low\");\n\n        // TODO: do a transfer approval instead\n        // Transfer tokens to SNDRCore\n        token.safeTransfer(address(sndrCore), totalAllocation);\n\n        // Call handleDistribution on SNDRCore\n        sndrCore.handleDistribution(\n            poolId,\n            token,\n            _recipientIds,\n            allocations,\n            duration,\n            whitelistedCollectors\n        );\n\n        emit DistributionExecuted(_recipientIds, totalAllocation);\n    }\n\n    /// @notice Returns the payout summary for a recipient\n    /// @dev Overrides BaseStrategy's _getPayout function\n    /// @param _recipientId Address of the recipient\n    /// @return PayoutSummary struct with recipient address and allocated amount\n    function _getPayout(\n        address _recipientId,\n        bytes memory\n    ) internal view override returns (PayoutSummary memory) {\n        return\n            PayoutSummary({\n                recipientAddress: _recipientId,\n                amount: recipients[_recipientId].totalAllocation\n            });\n    }\n\n    /// @notice Returns the status of a recipient\n    /// @dev Overrides BaseStrategy's _getRecipientStatus function\n    /// @param _recipientId Address of the recipient\n    /// @return Status of the recipient\n    function _getRecipientStatus(\n        address _recipientId\n    ) internal view override returns (Status) {\n        return recipients[_recipientId].status;\n    }\n\n    /// @notice Updates the status of a recipient\n    /// @param _recipientAddress Address of the recipient\n    /// @param _newStatus New status to set\n    function updateRecipientStatus(\n        address _recipientAddress,\n        Status _newStatus\n    ) external onlyOwner {\n        require(\n            recipients[_recipientAddress].recipientAddress != address(0),\n            \"Recipient not registered\"\n        );\n        recipients[_recipientAddress].status = _newStatus;\n        emit RecipientStatusUpdated(_recipientAddress, _newStatus);\n    }\n\n    /// @notice Updates whitelisted collectors\n    /// @param _newWhitelistedCollectors Address of the collector\n    function updateWhitelistedCollectors(\n        address[] memory _newWhitelistedCollectors\n    ) external onlyOwner {\n        whitelistedCollectors = _newWhitelistedCollectors;\n        emit WhitelistedCollectorsUpdated(_newWhitelistedCollectors);\n    }\n\n    /// @notice Updates the pool timestamps\n    /// @param _registrationStartTime New registration start time\n    /// @param _registrationEndTime New registration end time\n    /// @param _allocationStartTime New allocation start time\n    /// @param _allocationEndTime New allocation end time\n    function updatePoolTimestamps(\n        uint64 _registrationStartTime,\n        uint64 _registrationEndTime,\n        uint64 _allocationStartTime,\n        uint64 _allocationEndTime\n    ) public onlyOwner {\n        _updatePoolTimestamps(\n            _registrationStartTime,\n            _registrationEndTime,\n            _allocationStartTime,\n            _allocationEndTime\n        );\n    }\n\n    /// @notice Returns the total number of registered recipients\n    /// @return uint256 Total number of recipients\n    function getTotalRecipients() external view returns (uint256) {\n        return recipientList.length;\n    }\n\n    /// @notice Returns the details of a recipient\n    /// @param _recipientAddress Address of the recipient\n    /// @return Recipient struct containing recipient details\n    function getRecipientDetails(\n        address _recipientAddress\n    ) external view returns (Recipient memory) {\n        return recipients[_recipientAddress];\n    }\n\n    /// @notice Withdraws any remaining tokens from the contract\n    /// @dev Can only be called by the owner\n    function withdrawRemainingTokens() external onlyOwner {\n        uint256 remainingBalance = token.balanceOf(address(this));\n        if (remainingBalance > 0) {\n            token.safeTransfer(owner(), remainingBalance);\n        }\n    }\n\n    /// @notice Checks if address is eligible allocator.\n    /// @return Always returns true for this strategy\n    function _isValidAllocator(address) internal pure override returns (bool) {\n        return true;\n    }\n\n    /// @notice Modifier to ensure the function is called during the active registration period\n    modifier onlyActiveRegistration() {\n        require(\n            block.timestamp >= registrationStartTime &&\n                block.timestamp <= registrationEndTime,\n            \"Registration is not active\"\n        );\n        _;\n    }\n\n    /// @notice Modifier to ensure the function is called during the active allocation period\n    modifier onlyActiveAllocation() {\n        require(\n            block.timestamp >= allocationStartTime &&\n                block.timestamp <= allocationEndTime,\n            \"Allocation is not active\"\n        );\n        _;\n    }\n\n    /// @notice Modifier to ensure the function is called after the allocation period has ended\n    modifier onlyAfterAllocation() {\n        require(\n            block.timestamp > allocationEndTime,\n            \"Allocation period has not ended\"\n        );\n        _;\n    }\n}\n"
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"lib/allo-v2/contracts/strategies/BaseStrategy.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.19;\n\n// Interfaces\nimport \"../core/interfaces/IStrategy.sol\";\n\n// Libraries\nimport {Transfer} from \"../core/libraries/Transfer.sol\";\nimport {Errors} from \"../core/libraries/Errors.sol\";\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title BaseStrategy Contract\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice This contract is the base contract for all strategies\n/// @dev This contract is implemented by all strategies.\nabstract contract BaseStrategy is IStrategy, Transfer, Errors {\n    /// ==========================\n    /// === Storage Variables ====\n    /// ==========================\n\n    IAllo internal immutable allo;\n    bytes32 internal immutable strategyId;\n    bool internal poolActive;\n    uint256 internal poolId;\n    uint256 internal poolAmount;\n\n    /// ====================================\n    /// ========== Constructor =============\n    /// ====================================\n\n    /// @notice Constructor to set the Allo contract and \"strategyId'.\n    /// @param _allo Address of the Allo contract.\n    /// @param _name Name of the strategy\n    constructor(address _allo, string memory _name) {\n        allo = IAllo(_allo);\n        strategyId = keccak256(abi.encode(_name));\n    }\n\n    /// ====================================\n    /// =========== Modifiers ==============\n    /// ====================================\n\n    /// @notice Modifier to check if the 'msg.sender' is the Allo contract.\n    /// @dev Reverts if the 'msg.sender' is not the Allo contract.\n    modifier onlyAllo() {\n        _checkOnlyAllo();\n        _;\n    }\n\n    /// @notice Modifier to check if the '_sender' is a pool manager.\n    /// @dev Reverts if the '_sender' is not a pool manager.\n    /// @param _sender The address to check if they are a pool manager\n    modifier onlyPoolManager(address _sender) {\n        _checkOnlyPoolManager(_sender);\n        _;\n    }\n\n    /// @notice Modifier to check if the pool is active.\n    /// @dev Reverts if the pool is not active.\n    modifier onlyActivePool() {\n        _checkOnlyActivePool();\n        _;\n    }\n\n    /// @notice Modifier to check if the pool is inactive.\n    /// @dev Reverts if the pool is active.\n    modifier onlyInactivePool() {\n        _checkInactivePool();\n        _;\n    }\n\n    /// @notice Modifier to check if the pool is initialized.\n    /// @dev Reverts if the pool is not initialized.\n    modifier onlyInitialized() {\n        _checkOnlyInitialized();\n        _;\n    }\n\n    /// ================================\n    /// =========== Views ==============\n    /// ================================\n\n    /// @notice Getter for the 'Allo' contract.\n    /// @return The Allo contract\n    function getAllo() external view override returns (IAllo) {\n        return allo;\n    }\n\n    /// @notice Getter for the 'poolId'.\n    /// @return The ID of the pool\n    function getPoolId() external view override returns (uint256) {\n        return poolId;\n    }\n\n    /// @notice Getter for the 'strategyId'.\n    /// @return The ID of the strategy\n    function getStrategyId() external view override returns (bytes32) {\n        return strategyId;\n    }\n\n    /// @notice Getter for the 'poolAmount'.\n    /// @return The balance of the pool\n    function getPoolAmount() external view virtual override returns (uint256) {\n        return poolAmount;\n    }\n\n    /// @notice Getter for whether or not the pool is active.\n    /// @return 'true' if the pool is active, otherwise 'false'\n    function isPoolActive() external view override returns (bool) {\n        return _isPoolActive();\n    }\n\n    /// @notice Getter for the status of a recipient.\n    /// @param _recipientId The ID of the recipient\n    /// @return The status of the recipient\n    function getRecipientStatus(address _recipientId) external view virtual returns (Status) {\n        return _getRecipientStatus(_recipientId);\n    }\n\n    /// ====================================\n    /// =========== Functions ==============\n    /// ====================================\n\n    /// @notice Initializes the 'Basetrategy'.\n    /// @dev Will revert if the poolId is invalid or already initialized\n    /// @param _poolId ID of the pool\n    function __BaseStrategy_init(uint256 _poolId) internal virtual onlyAllo {\n        // check if pool ID is not initialized already, if it is, revert\n        if (poolId != 0) revert ALREADY_INITIALIZED();\n\n        // check if pool ID is valid and not zero (0), if it is, revert\n        if (_poolId == 0) revert INVALID();\n        poolId = _poolId;\n    }\n\n    /// @notice Increases the pool amount.\n    /// @dev Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.\n    /// @param _amount The amount to increase the pool by\n    function increasePoolAmount(uint256 _amount) external override onlyAllo {\n        _beforeIncreasePoolAmount(_amount);\n        poolAmount += _amount;\n        _afterIncreasePoolAmount(_amount);\n    }\n\n    /// @notice Registers a recipient.\n    /// @dev Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the\n    ///      strategy implementation. Only 'Allo' contract can call this when it is initialized.\n    /// @param _data The data to use to register the recipient\n    /// @param _sender The address of the sender\n    /// @return recipientId The recipientId\n    function registerRecipient(bytes memory _data, address _sender)\n        external\n        payable\n        onlyAllo\n        onlyInitialized\n        returns (address recipientId)\n    {\n        _beforeRegisterRecipient(_data, _sender);\n        recipientId = _registerRecipient(_data, _sender);\n        _afterRegisterRecipient(_data, _sender);\n    }\n\n    /// @notice Allocates to a recipient.\n    /// @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\n    ///      call this when it is initialized.\n    /// @param _data The data to use to allocate to the recipient\n    /// @param _sender The address of the sender\n    function allocate(bytes memory _data, address _sender) external payable onlyAllo onlyInitialized {\n        _beforeAllocate(_data, _sender);\n        _allocate(_data, _sender);\n        _afterAllocate(_data, _sender);\n    }\n\n    /// @notice Distributes funds (tokens) to recipients.\n    /// @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\n    ///      call this when it is initialized.\n    /// @param _recipientIds The IDs of the recipients\n    /// @param _data The data to use to distribute to the recipients\n    /// @param _sender The address of the sender\n    function distribute(address[] memory _recipientIds, bytes memory _data, address _sender)\n        external\n        onlyAllo\n        onlyInitialized\n    {\n        _beforeDistribute(_recipientIds, _data, _sender);\n        _distribute(_recipientIds, _data, _sender);\n        _afterDistribute(_recipientIds, _data, _sender);\n    }\n\n    /// @notice Gets the payout summary for recipients.\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\n    /// @param _recipientIds The IDs of the recipients\n    /// @param _data The data to use to get the payout summary for the recipients\n    /// @return The payout summary for the recipients\n    function getPayouts(address[] memory _recipientIds, bytes[] memory _data)\n        external\n        view\n        virtual\n        override\n        returns (PayoutSummary[] memory)\n    {\n        uint256 recipientLength = _recipientIds.length;\n        // check if the length of the recipient IDs and data arrays are equal, if they are not, revert\n        if (recipientLength != _data.length) revert ARRAY_MISMATCH();\n\n        PayoutSummary[] memory payouts = new PayoutSummary[](recipientLength);\n        for (uint256 i; i < recipientLength;) {\n            payouts[i] = _getPayout(_recipientIds[i], _data[i]);\n            unchecked {\n                i++;\n            }\n        }\n        return payouts;\n    }\n\n    /// @notice Checks if the '_allocator' is a valid allocator.\n    /// @dev How the allocator is determined is up to the strategy implementation.\n    /// @param _allocator The address to check if it is a valid allocator for the strategy.\n    /// @return 'true' if the address is a valid allocator, 'false' otherwise\n    function isValidAllocator(address _allocator) external view virtual override returns (bool) {\n        return _isValidAllocator(_allocator);\n    }\n\n    /// ====================================\n    /// ============ Internal ==============\n    /// ====================================\n\n    /// @notice Checks if the 'msg.sender' is the Allo contract.\n    /// @dev Reverts if the 'msg.sender' is not the Allo contract.\n    function _checkOnlyAllo() internal view {\n        if (msg.sender != address(allo)) revert UNAUTHORIZED();\n    }\n\n    /// @notice Checks if the '_sender' is a pool manager.\n    /// @dev Reverts if the '_sender' is not a pool manager.\n    /// @param _sender The address to check if they are a pool manager\n    function _checkOnlyPoolManager(address _sender) internal view {\n        if (!allo.isPoolManager(poolId, _sender)) revert UNAUTHORIZED();\n    }\n\n    /// @notice Checks if the pool is active.\n    /// @dev Reverts if the pool is not active.\n    function _checkOnlyActivePool() internal view {\n        if (!poolActive) revert POOL_INACTIVE();\n    }\n\n    /// @notice Checks if the pool is inactive.\n    /// @dev Reverts if the pool is active.\n    function _checkInactivePool() internal view {\n        if (poolActive) revert POOL_ACTIVE();\n    }\n\n    /// @notice Checks if the pool is initialized.\n    /// @dev Reverts if the pool is not initialized.\n    function _checkOnlyInitialized() internal view {\n        if (poolId == 0) revert NOT_INITIALIZED();\n    }\n\n    /// @notice Set the pool to active or inactive status.\n    /// @dev This will emit a 'PoolActive()' event. Used by the strategy implementation.\n    /// @param _active The status to set, 'true' means active, 'false' means inactive\n    function _setPoolActive(bool _active) internal {\n        poolActive = _active;\n        emit PoolActive(_active);\n    }\n\n    /// @notice Checks if the pool is active.\n    /// @dev Used by the strategy implementation.\n    /// @return 'true' if the pool is active, otherwise 'false'\n    function _isPoolActive() internal view virtual returns (bool) {\n        return poolActive;\n    }\n\n    /// @notice Checks if the allocator is valid\n    /// @param _allocator The allocator address\n    /// @return 'true' if the allocator is valid, otherwise 'false'\n    function _isValidAllocator(address _allocator) internal view virtual returns (bool);\n\n    /// @notice This will register a recipient, set their status (and any other strategy specific values), and\n    ///         return the ID of the recipient.\n    /// @dev Able to change status all the way up to Accepted, or to Pending and if there are more steps, additional\n    ///      functions should be added to allow the owner to check this. The owner could also check attestations directly\n    ///      and then Accept for instance.\n    /// @param _data The data to use to register the recipient\n    /// @param _sender The address of the sender\n    /// @return The ID of the recipient\n    function _registerRecipient(bytes memory _data, address _sender) internal virtual returns (address);\n\n    /// @notice This will allocate to a recipient.\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\n    /// @param _data The data to use to allocate to the recipient\n    /// @param _sender The address of the sender\n    function _allocate(bytes memory _data, address _sender) internal virtual;\n\n    /// @notice This will distribute funds (tokens) to recipients.\n    /// @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\n    /// this contract will need to track the amount paid already, so that it doesn't double pay.\n    /// @param _recipientIds The ids of the recipients to distribute to\n    /// @param _data Data required will depend on the strategy implementation\n    /// @param _sender The address of the sender\n    function _distribute(address[] memory _recipientIds, bytes memory _data, address _sender) internal virtual;\n\n    /// @notice This will get the payout summary for a recipient.\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\n    /// @param _recipientId The ID of the recipient\n    /// @param _data The data to use to get the payout summary for the recipient\n    /// @return The payout summary for the recipient\n    function _getPayout(address _recipientId, bytes memory _data)\n        internal\n        view\n        virtual\n        returns (PayoutSummary memory);\n\n    /// @notice This will get the status of a recipient.\n    /// @param _recipientId The ID of the recipient\n    /// @return The status of the recipient\n    function _getRecipientStatus(address _recipientId) internal view virtual returns (Status);\n\n    /// ===================================\n    /// ============== Hooks ==============\n    /// ===================================\n\n    /// @notice Hook called before increasing the pool amount.\n    /// @param _amount The amount to increase the pool by\n    function _beforeIncreasePoolAmount(uint256 _amount) internal virtual {}\n\n    /// @notice Hook called after increasing the pool amount.\n    /// @param _amount The amount to increase the pool by\n    function _afterIncreasePoolAmount(uint256 _amount) internal virtual {}\n\n    /// @notice Hook called before registering a recipient.\n    /// @param _data The data to use to register the recipient\n    /// @param _sender The address of the sender\n    function _beforeRegisterRecipient(bytes memory _data, address _sender) internal virtual {}\n\n    /// @notice Hook called after registering a recipient.\n    /// @param _data The data to use to register the recipient\n    /// @param _sender The address of the sender\n    function _afterRegisterRecipient(bytes memory _data, address _sender) internal virtual {}\n\n    /// @notice Hook called before allocating to a recipient.\n    /// @param _data The data to use to allocate to the recipient\n    /// @param _sender The address of the sender\n    function _beforeAllocate(bytes memory _data, address _sender) internal virtual {}\n\n    /// @notice Hook called after allocating to a recipient.\n    /// @param _data The data to use to allocate to the recipient\n    /// @param _sender The address of the sender\n    function _afterAllocate(bytes memory _data, address _sender) internal virtual {}\n\n    /// @notice Hook called before distributing funds (tokens) to recipients.\n    /// @param _recipientIds The IDs of the recipients\n    /// @param _data The data to use to distribute to the recipients\n    /// @param _sender The address of the sender\n    function _beforeDistribute(address[] memory _recipientIds, bytes memory _data, address _sender) internal virtual {}\n\n    /// @notice Hook called after distributing funds (tokens) to recipients.\n    /// @param _recipientIds The IDs of the recipients\n    /// @param _data The data to use to distribute to the recipients\n    /// @param _sender The address of the sender\n    function _afterDistribute(address[] memory _recipientIds, bytes memory _data, address _sender) internal virtual {}\n}\n"
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"lib/allo-v2/contracts/core/libraries/Errors.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title Errors\n/// @author @thelostone-mc <aditya@gitcoin.co>, @KurtMerbeth <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>\n/// @notice Library containing all custom errors the protocol may revert with.\ncontract Errors {\n    /// ======================\n    /// ====== Generic =======\n    /// ======================\n\n    /// @notice Thrown as a general error when input / data is invalid\n    error INVALID();\n\n    /// @notice Thrown when mismatch in decoding data\n    error MISMATCH();\n\n    /// @notice Thrown when not enough funds are available\n    error NOT_ENOUGH_FUNDS();\n\n    /// @notice Thrown when user is not authorized\n    error UNAUTHORIZED();\n\n    /// @notice Thrown when address is the zero address\n    error ZERO_ADDRESS();\n\n    /// @notice Thrown when the function is not implemented\n    error NOT_IMPLEMENTED();\n\n    /// @notice Thrown when the value is non-zero\n    error NON_ZERO_VALUE();\n\n    /// ======================\n    /// ====== Registry ======\n    /// ======================\n\n    /// @dev Thrown when the nonce passed has been used or not available\n    error NONCE_NOT_AVAILABLE();\n\n    /// @dev Thrown when the 'msg.sender' is not the pending owner on ownership transfer\n    error NOT_PENDING_OWNER();\n\n    /// @dev Thrown if the anchor creation fails\n    error ANCHOR_ERROR();\n\n    /// ======================\n    /// ======== Allo ========\n    /// ======================\n\n    /// @notice Thrown when the strategy is not approved\n    error NOT_APPROVED_STRATEGY();\n\n    /// @notice Thrown when the strategy is approved and should be cloned\n    error IS_APPROVED_STRATEGY();\n\n    /// @notice Thrown when the fee is below 1e18 which is the fee percentage denominator\n    error INVALID_FEE();\n\n    /// ======================\n    /// ===== IStrategy ======\n    /// ======================\n\n    /// @notice Thrown when data is already intialized\n    error ALREADY_INITIALIZED();\n\n    /// @notice Thrown when data is yet to be initialized\n    error NOT_INITIALIZED();\n\n    /// @notice Thrown when an invalid address is used\n    error INVALID_ADDRESS();\n\n    /// @notice Thrown when a pool is inactive\n    error POOL_INACTIVE();\n\n    /// @notice Thrown when a pool is already active\n    error POOL_ACTIVE();\n\n    /// @notice Thrown when two arrays length are not equal\n    error ARRAY_MISMATCH();\n\n    /// @notice Thrown when the registration is invalid.\n    error INVALID_REGISTRATION();\n\n    /// @notice Thrown when the metadata is invalid.\n    error INVALID_METADATA();\n\n    /// @notice Thrown when the recipient is not accepted.\n    error RECIPIENT_NOT_ACCEPTED();\n\n    /// @notice Thrown when recipient is already accepted.\n    error RECIPIENT_ALREADY_ACCEPTED();\n\n    /// @notice Thrown when registration is not active.\n    error REGISTRATION_NOT_ACTIVE();\n\n    /// @notice Thrown when registration is active.\n    error REGISTRATION_ACTIVE();\n\n    /// @notice Thrown when there is an error in recipient.\n    error RECIPIENT_ERROR(address recipientId);\n\n    /// @notice Thrown when the allocation is not active.\n    error ALLOCATION_NOT_ACTIVE();\n\n    /// @notice Thrown when the allocation is not ended.\n    error ALLOCATION_NOT_ENDED();\n\n    /// @notice Thrown when the allocation is active.\n    error ALLOCATION_ACTIVE();\n}\n"
			},
			"lib/allo-v2/contracts/core/libraries/Transfer.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\n// External Libraries\nimport {SafeTransferLib} from \"solady/utils/SafeTransferLib.sol\";\n// Internal Libraries\nimport \"./Native.sol\";\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title Transfer contract\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice A helper contract to transfer tokens within Allo protocol\n/// @dev Handles the transfer of tokens to an address\ncontract Transfer is Native {\n    /// @notice Thrown when the amount of tokens sent does not match the amount of tokens expected\n    error AMOUNT_MISMATCH();\n\n    /// @notice This holds the details for a transfer\n    struct TransferData {\n        address from;\n        address to;\n        uint256 amount;\n    }\n\n    /// @notice Transfer an amount of a token to an array of addresses\n    /// @param _token The address of the token\n    /// @param _transferData TransferData[]\n    /// @return Whether the transfer was successful or not\n    function _transferAmountsFrom(address _token, TransferData[] memory _transferData)\n        internal\n        virtual\n        returns (bool)\n    {\n        uint256 msgValue = msg.value;\n\n        for (uint256 i; i < _transferData.length;) {\n            TransferData memory transferData = _transferData[i];\n\n            if (_token == NATIVE) {\n                msgValue -= transferData.amount;\n                SafeTransferLib.safeTransferETH(transferData.to, transferData.amount);\n            } else {\n                SafeTransferLib.safeTransferFrom(_token, transferData.from, transferData.to, transferData.amount);\n            }\n\n            unchecked {\n                i++;\n            }\n        }\n\n        if (msgValue != 0) revert AMOUNT_MISMATCH();\n\n        return true;\n    }\n\n    /// @notice Transfer an amount of a token to an address\n    /// @param _token The address of the token\n    /// @param _transferData Individual TransferData\n    /// @return Whether the transfer was successful or not\n    function _transferAmountFrom(address _token, TransferData memory _transferData) internal virtual returns (bool) {\n        uint256 amount = _transferData.amount;\n        if (_token == NATIVE) {\n            // Native Token\n            if (msg.value < amount) revert AMOUNT_MISMATCH();\n\n            SafeTransferLib.safeTransferETH(_transferData.to, amount);\n        } else {\n            SafeTransferLib.safeTransferFrom(_token, _transferData.from, _transferData.to, amount);\n        }\n        return true;\n    }\n\n    /// @notice Transfer an amount of a token to an address\n    /// @param _token The token to transfer\n    /// @param _to The address to transfer to\n    /// @param _amount The amount to transfer\n    function _transferAmount(address _token, address _to, uint256 _amount) internal virtual {\n        if (_token == NATIVE) {\n            SafeTransferLib.safeTransferETH(_to, _amount);\n        } else {\n            SafeTransferLib.safeTransfer(_token, _to, _amount);\n        }\n    }\n\n    /// @notice Get the balance of a token for an account\n    /// @param _token The token to get the balance of\n    /// @param _account The account to get the balance for\n    /// @return The balance of the token for the account\n    function _getBalance(address _token, address _account) internal view returns (uint256) {\n        if (_token == NATIVE) {\n            return payable(_account).balance;\n        } else {\n            return SafeTransferLib.balanceOf(_token, _account);\n        }\n    }\n}\n"
			},
			"lib/allo-v2/contracts/core/interfaces/IStrategy.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.19;\n\n// Interfaces\nimport {IAllo} from \"./IAllo.sol\";\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title IStrategy Interface\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice BaseStrategy is the base contract that all strategies should inherit from and uses this interface.\n\ninterface IStrategy {\n    /// ======================\n    /// ======= Storage ======\n    /// ======================\n\n    /// @notice The Status enum that all recipients are based from\n    enum Status {\n        None,\n        Pending,\n        Accepted,\n        Rejected,\n        Appealed,\n        InReview,\n        Canceled\n    }\n\n    /// @notice Payout summary struct to hold the payout data\n    struct PayoutSummary {\n        address recipientAddress;\n        uint256 amount;\n    }\n\n    /// ======================\n    /// ======= Events =======\n    /// ======================\n\n    /// @notice Emitted when strategy is initialized.\n    /// @param poolId The ID of the pool\n    /// @param data The data passed to the 'initialize' function\n    event Initialized(uint256 poolId, bytes data);\n\n    /// @notice Emitted when a recipient is registered.\n    /// @param recipientId The ID of the recipient\n    /// @param data The data passed to the 'registerRecipient' function\n    /// @param sender The sender\n    event Registered(address indexed recipientId, bytes data, address sender);\n\n    /// @notice Emitted when a recipient is allocated to.\n    /// @param recipientId The ID of the recipient\n    /// @param amount The amount allocated\n    /// @param token The token allocated\n    event Allocated(address indexed recipientId, uint256 amount, address token, address sender);\n\n    /// @notice Emitted when tokens are distributed.\n    /// @param recipientId The ID of the recipient\n    /// @param recipientAddress The recipient\n    /// @param amount The amount distributed\n    /// @param sender The sender\n    event Distributed(address indexed recipientId, address recipientAddress, uint256 amount, address sender);\n\n    /// @notice Emitted when pool is set to active status.\n    /// @param active The status of the pool\n    event PoolActive(bool active);\n\n    /// ======================\n    /// ======= Views ========\n    /// ======================\n\n    /// @notice Getter for the address of the Allo contract.\n    /// @return The 'Allo' contract\n    function getAllo() external view returns (IAllo);\n\n    /// @notice Getter for the 'poolId' for this strategy.\n    /// @return The ID of the pool\n    function getPoolId() external view returns (uint256);\n\n    /// @notice Getter for the 'id' of the strategy.\n    /// @return The ID of the strategy\n    function getStrategyId() external view returns (bytes32);\n\n    /// @notice Checks whether a allocator is valid or not, will usually be true for all strategies\n    ///      and will depend on the strategy implementation.\n    /// @param _allocator The allocator to check\n    /// @return Whether the allocator is valid or not\n    function isValidAllocator(address _allocator) external view returns (bool);\n\n    /// @notice whether pool is active.\n    /// @return Whether the pool is active or not\n    function isPoolActive() external returns (bool);\n\n    /// @notice Checks the amount of tokens in the pool.\n    /// @return The balance of the pool\n    function getPoolAmount() external view returns (uint256);\n\n    /// @notice Increases the balance of the pool.\n    /// @param _amount The amount to increase the pool by\n    function increasePoolAmount(uint256 _amount) external;\n\n    /// @notice Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation\n    ///      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those\n    ///      since there is no need for Pending or Rejected.\n    /// @param _recipientId The ID of the recipient\n    /// @return The status of the recipient\n    function getRecipientStatus(address _recipientId) external view returns (Status);\n\n    /// @notice Checks the amount allocated to a recipient for distribution.\n    /// @dev Input the values you would send to distribute(), get the amounts each recipient in the array would receive.\n    ///      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\n    /// @param _recipientIds The IDs of the recipients\n    /// @param _data The encoded data\n    function getPayouts(address[] memory _recipientIds, bytes[] memory _data)\n        external\n        view\n        returns (PayoutSummary[] memory);\n\n    /// ======================\n    /// ===== Functions ======\n    /// ======================\n\n    /// @notice\n    /// @dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,\n    ///      use it, and then call super.initialize().\n    /// @param _poolId The ID of the pool\n    /// @param _data The encoded data\n    function initialize(uint256 _poolId, bytes memory _data) external;\n\n    /// @notice This will register a recipient, set their status (and any other strategy specific values), and\n    ///         return the ID of the recipient.\n    /// @dev Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional\n    ///      functions should be added to allow the owner to check this. The owner could also check attestations directly\n    ///      and then accept for instance. The '_data' will be determined by the strategy implementation.\n    /// @param _data The data to use to register the recipient\n    /// @param _sender The address of the sender\n    /// @return The ID of the recipient\n    function registerRecipient(bytes memory _data, address _sender) external payable returns (address);\n\n    /// @notice This will allocate to a recipient.\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\n    /// @param _data The data to use to allocate to the recipient\n    /// @param _sender The address of the sender\n    function allocate(bytes memory _data, address _sender) external payable;\n\n    /// @notice This will distribute funds (tokens) to recipients.\n    /// @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\n    /// this contract will need to track the amount paid already, so that it doesn't double pay.\n    function distribute(address[] memory _recipientIds, bytes memory _data, address _sender) external;\n}\n"
			},
			"lib/allo-v2/contracts/core/libraries/Native.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title Native token information\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice This is used to define the address of the native token for the protocol\ncontract Native {\n    /// @notice Address of the native token\n    address public constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n}\n"
			},
			"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n///\n/// @dev Note:\n/// - For ETH transfers, please use `forceSafeTransferETH` for gas griefing protection.\n/// - For ERC20s, this implementation won't check that a token has code,\n/// responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ETH transfer has failed.\n    error ETHTransferFailed();\n\n    /// @dev The ERC20 `transferFrom` has failed.\n    error TransferFromFailed();\n\n    /// @dev The ERC20 `transfer` has failed.\n    error TransferFailed();\n\n    /// @dev The ERC20 `approve` has failed.\n    error ApproveFailed();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Suggested gas stipend for contract receiving ETH\n    /// that disallows any storage writes.\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\n\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\n    /// storage reads and writes, but low enough to prevent griefing.\n    /// Multiply by a small constant (e.g. 2), if needed.\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       ETH OPERATIONS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sends `amount` (in wei) ETH to `to`.\n    /// Reverts upon failure.\n    ///\n    /// Note: This implementation does NOT protect against gas griefing.\n    /// Please use `forceSafeTransferETH` for gas griefing protection.\n    function safeTransferETH(address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and check if it succeeded or not.\n            if iszero(call(gas(), to, amount, 0x00, 0x00, 0x00, 0x00)) {\n                // Store the function selector of `ETHTransferFailed()`.\n                mstore(0x00, 0xb12d13eb)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    /// The `gasStipend` can be set to a low enough value to prevent\n    /// storage writes or gas griefing.\n    ///\n    /// If sending via the normal procedure fails, force sends the ETH by\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\n    ///\n    /// Reverts if the current contract has insufficient balance.\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If insufficient balance, revert.\n            if lt(selfbalance(), amount) {\n                // Store the function selector of `ETHTransferFailed()`.\n                mstore(0x00, 0xb12d13eb)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Transfer the ETH and check if it succeeded or not.\n            if iszero(call(gasStipend, to, amount, 0x00, 0x00, 0x00, 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                // We can directly use `SELFDESTRUCT` in the contract creation.\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\n                if iszero(create(amount, 0x0b, 0x16)) {\n                    // To coerce gas estimation to provide enough gas for the `create` above.\n                    if iszero(gt(gas(), 1000000)) { revert(0x00, 0x00) }\n                }\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\n    /// equal to `GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\n    /// for 99% of cases and can be overridden with the three-argument version of this\n    /// function if necessary.\n    ///\n    /// If sending via the normal procedure fails, force sends the ETH by\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\n    ///\n    /// Reverts if the current contract has insufficient balance.\n    function forceSafeTransferETH(address to, uint256 amount) internal {\n        // Manually inlined because the compiler doesn't inline functions with branches.\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If insufficient balance, revert.\n            if lt(selfbalance(), amount) {\n                // Store the function selector of `ETHTransferFailed()`.\n                mstore(0x00, 0xb12d13eb)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Transfer the ETH and check if it succeeded or not.\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, 0x00, 0x00, 0x00, 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                // We can directly use `SELFDESTRUCT` in the contract creation.\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\n                if iszero(create(amount, 0x0b, 0x16)) {\n                    // To coerce gas estimation to provide enough gas for the `create` above.\n                    if iszero(gt(gas(), 1000000)) { revert(0x00, 0x00) }\n                }\n            }\n        }\n    }\n\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    /// The `gasStipend` can be set to a low enough value to prevent\n    /// storage writes or gas griefing.\n    ///\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\n    ///\n    /// Note: Does NOT revert upon failure.\n    /// Returns whether the transfer of ETH is successful instead.\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and check if it succeeded or not.\n            success := call(gasStipend, to, amount, 0x00, 0x00, 0x00, 0x00)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      ERC20 OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for\n    /// the current contract to manage.\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n\n            mstore(0x60, amount) // Store the `amount` argument.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            // Store the function selector of `transferFrom(address,address,uint256)`.\n            mstore(0x0c, 0x23b872dd000000000000000000000000)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFromFailed()`.\n                mstore(0x00, 0x7939f424)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have their entire balance approved for\n    /// the current contract to manage.\n    function safeTransferAllFrom(address token, address from, address to)\n        internal\n        returns (uint256 amount)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            // Store the function selector of `balanceOf(address)`.\n            mstore(0x0c, 0x70a08231000000000000000000000000)\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFromFailed()`.\n                mstore(0x00, 0x7939f424)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            // Store the function selector of `transferFrom(address,address,uint256)`.\n            mstore(0x00, 0x23b872dd)\n            // The `amount` is already at 0x60. Load it for the function's return value.\n            amount := mload(0x60)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFromFailed()`.\n                mstore(0x00, 0x7939f424)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransfer(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            // Store the function selector of `transfer(address,uint256)`.\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFailed()`.\n                mstore(0x00, 0x90b8ec18)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that was overwritten.\n            mstore(0x34, 0)\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\n            mstore(0x20, address()) // Store the address of the current contract.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFailed()`.\n                mstore(0x00, 0x90b8ec18)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            mstore(0x14, to) // Store the `to` argument.\n            // The `amount` is already at 0x34. Load it for the function's return value.\n            amount := mload(0x34)\n            // Store the function selector of `transfer(address,uint256)`.\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFailed()`.\n                mstore(0x00, 0x90b8ec18)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that was overwritten.\n            mstore(0x34, 0)\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// Reverts upon failure.\n    function safeApprove(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            // Store the function selector of `approve(address,uint256)`.\n            mstore(0x00, 0x095ea7b3000000000000000000000000)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `ApproveFailed()`.\n                mstore(0x00, 0x3e3f8f73)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that was overwritten.\n            mstore(0x34, 0)\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\n    /// Reverts upon failure.\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            // Store the function selector of `approve(address,uint256)`.\n            mstore(0x00, 0x095ea7b3000000000000000000000000)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x34, 0) // Store 0 for the `amount`.\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // Store the function selector.\n                // We can ignore the result of this call. Just need to check the next call.\n                pop(call(gas(), token, 0, 0x10, 0x44, 0x00, 0x00))\n                mstore(0x34, amount) // Store back the original `amount`.\n\n                if iszero(\n                    and(\n                        or(eq(mload(0x00), 1), iszero(returndatasize())),\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                    )\n                ) {\n                    // Store the function selector of `ApproveFailed()`.\n                    mstore(0x00, 0x3e3f8f73)\n                    // Revert with (offset, size).\n                    revert(0x1c, 0x04)\n                }\n            }\n            // Restore the part of the free memory pointer that was overwritten.\n            mstore(0x34, 0)\n        }\n    }\n\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\n    /// Returns zero if the `token` does not exist.\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, account) // Store the `account` argument.\n            // Store the function selector of `balanceOf(address)`.\n            mstore(0x00, 0x70a08231000000000000000000000000)\n            amount :=\n                mul(\n                    mload(0x20),\n                    and( // The arguments of `and` are evaluated from right to left.\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\n                    )\n                )\n        }\n    }\n}\n"
			},
			"lib/allo-v2/contracts/core/interfaces/IAllo.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.19;\n\n// Interfaces\nimport {IRegistry} from \"./IRegistry.sol\";\nimport {IStrategy} from \"./IStrategy.sol\";\n// Internal Libraries\nimport {Metadata} from \"../libraries/Metadata.sol\";\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title Allo Interface\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice Interface for the Allo contract. It exposes all functions needed to use the Allo protocol.\ninterface IAllo {\n    /// ======================\n    /// ======= Structs ======\n    /// ======================\n\n    /// @notice the Pool struct that all strategy pools are based from\n    struct Pool {\n        bytes32 profileId;\n        IStrategy strategy;\n        address token;\n        Metadata metadata;\n        bytes32 managerRole;\n        bytes32 adminRole;\n    }\n\n    /// ======================\n    /// ======= Events =======\n    /// ======================\n\n    /// @notice Event emitted when a new pool is created\n    /// @param poolId ID of the pool created\n    /// @param profileId ID of the profile the pool is associated with\n    /// @param strategy Address of the strategy contract\n    /// @param token Address of the token pool was funded with when created\n    /// @param amount Amount pool was funded with when created\n    /// @param metadata Pool metadata\n    event PoolCreated(\n        uint256 indexed poolId,\n        bytes32 indexed profileId,\n        IStrategy strategy,\n        address token,\n        uint256 amount,\n        Metadata metadata\n    );\n\n    /// @notice Emitted when a pools metadata is updated\n    /// @param poolId ID of the pool updated\n    /// @param metadata Pool metadata that was updated\n    event PoolMetadataUpdated(uint256 indexed poolId, Metadata metadata);\n\n    /// @notice Emitted when a pool is funded\n    /// @param poolId ID of the pool funded\n    /// @param amount Amount funded to the pool\n    /// @param fee Amount of the fee paid to the treasury\n    event PoolFunded(uint256 indexed poolId, uint256 amount, uint256 fee);\n\n    /// @notice Emitted when the base fee is paid\n    /// @param poolId ID of the pool the base fee was paid for\n    /// @param amount Amount of the base fee paid\n    event BaseFeePaid(uint256 indexed poolId, uint256 amount);\n\n    /// @notice Emitted when the treasury address is updated\n    /// @param treasury Address of the new treasury\n    event TreasuryUpdated(address treasury);\n\n    /// @notice Emitted when the percent fee is updated\n    /// @param percentFee New percentage for the fee\n    event PercentFeeUpdated(uint256 percentFee);\n\n    /// @notice Emitted when the base fee is updated\n    /// @param baseFee New base fee amount\n    event BaseFeeUpdated(uint256 baseFee);\n\n    /// @notice Emitted when the registry address is updated\n    /// @param registry Address of the new registry\n    event RegistryUpdated(address registry);\n\n    /// ====================================\n    /// ==== External/Public Functions =====\n    /// ====================================\n\n    /// @notice Initialize the Allo contract\n    /// @param _owner Address of the owner\n    /// @param _registry Address of the registry contract\n    /// @param _treasury Address of the treasury\n    /// @param _percentFee Percentage for the fee\n    /// @param _baseFee Base fee amount\n    function initialize(\n        address _owner,\n        address _registry,\n        address payable _treasury,\n        uint256 _percentFee,\n        uint256 _baseFee\n    ) external;\n\n    /// @notice Creates a new pool (with a custom strategy)\n    /// @dev 'msg.sender' must be a member or owner of a profile to create a pool with or without a custom strategy, The encoded data\n    ///      will be specific to a given strategy requirements, reference the strategy implementation of 'initialize()'. The strategy\n    ///      address passed must not be the zero address. 'msg.sender' must be a member or owner of the profile id passed as '_profileId'.\n    /// @param _profileId The 'profileId' of the registry profile, used to check if 'msg.sender' is a member or owner of the profile\n    /// @param _strategy The address of the deployed custom strategy\n    /// @param _initStrategyData The data to initialize the strategy\n    /// @param _token The address of the token you want to use in your pool\n    /// @param _amount The amount of the token you want to deposit into the pool on initialization\n    /// @param _metadata The 'Metadata' of the pool, this uses our 'Meatdata.sol' struct (consistent throughout the protocol)\n    /// @param _managers The managers of the pool, and can be added/removed later by the pool admin\n    /// @return poolId The ID of the pool\n    function createPoolWithCustomStrategy(\n        bytes32 _profileId,\n        address _strategy,\n        bytes memory _initStrategyData,\n        address _token,\n        uint256 _amount,\n        Metadata memory _metadata,\n        address[] memory _managers\n    ) external payable returns (uint256 poolId);\n\n    /// @notice Creates a new pool (by cloning a deployed strategies).\n    /// @dev 'msg.sender' must be owner or member of the profile id passed as '_profileId'. The strategy address passed\n    ///      must not be the zero address.\n    /// @param _profileId The ID of the registry profile, used to check if 'msg.sender' is a member or owner of the profile\n    /// @param _strategy The address of the strategy contract the pool will use.\n    /// @param _initStrategyData The data to initialize the strategy\n    /// @param _token The address of the token\n    /// @param _amount The amount of the token\n    /// @param _metadata The metadata of the pool\n    /// @param _managers The managers of the pool\n    /// @custom:initstrategydata The encoded data will be specific to a given strategy requirements,\n    ///    reference the strategy implementation of 'initialize()'\n    function createPool(\n        bytes32 _profileId,\n        address _strategy,\n        bytes memory _initStrategyData,\n        address _token,\n        uint256 _amount,\n        Metadata memory _metadata,\n        address[] memory _managers\n    ) external payable returns (uint256 poolId);\n\n    /// @notice Updates a pools metadata.\n    /// @dev 'msg.sender' must be a pool admin.\n    /// @param _poolId The ID of the pool to update\n    /// @param _metadata The new metadata to set\n    function updatePoolMetadata(uint256 _poolId, Metadata memory _metadata) external;\n\n    /// @notice Update the registry address.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _registry The new registry address\n    function updateRegistry(address _registry) external;\n\n    /// @notice Updates the treasury address.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _treasury The new treasury address\n    function updateTreasury(address payable _treasury) external;\n\n    /// @notice Updates the percentage for the fee.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _percentFee The new percentage for the fee\n    function updatePercentFee(uint256 _percentFee) external;\n\n    /// @notice Updates the base fee.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _baseFee The new base fee\n    function updateBaseFee(uint256 _baseFee) external;\n\n    /// @notice Adds a pool manager to the pool.\n    /// @dev 'msg.sender' must be a pool admin.\n    /// @param _poolId The ID of the pool to add the manager to\n    /// @param _manager The address of the manager to add\n    function addPoolManager(uint256 _poolId, address _manager) external;\n\n    /// @notice Removes a pool manager from the pool.\n    /// @dev 'msg.sender' must be a pool admin.\n    /// @param _poolId The ID of the pool to remove the manager from\n    /// @param _manager The address of the manager to remove\n    function removePoolManager(uint256 _poolId, address _manager) external;\n\n    /// @notice Recovers funds from a pool.\n    /// @dev 'msg.sender' must be a pool admin.\n    /// @param _token The token to recover\n    /// @param _recipient The address to send the recovered funds to\n    function recoverFunds(address _token, address _recipient) external;\n\n    /// @notice Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy.\n    /// @param _poolId The ID of the pool to register the recipient for\n    function registerRecipient(uint256 _poolId, bytes memory _data) external payable returns (address);\n\n    /// @notice Registers a batch of recipients.\n    /// @param _poolIds The pool ID's to register the recipients for\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy\n    function batchRegisterRecipient(uint256[] memory _poolIds, bytes[] memory _data)\n        external\n        returns (address[] memory);\n\n    /// @notice Funds a pool.\n    /// @dev 'msg.value' must be greater than 0 if the token is the native token\n    ///       or '_amount' must be greater than 0 if the token is not the native token.\n    /// @param _poolId The ID of the pool to fund\n    /// @param _amount The amount to fund the pool with\n    function fundPool(uint256 _poolId, uint256 _amount) external payable;\n\n    /// @notice Allocates funds to a recipient.\n    /// @dev Each strategy will handle the allocation of funds differently.\n    /// @param _poolId The ID of the pool to allocate funds from\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy.\n    function allocate(uint256 _poolId, bytes memory _data) external payable;\n\n    /// @notice Allocates funds to multiple recipients.\n    /// @dev Each strategy will handle the allocation of funds differently\n    function batchAllocate(uint256[] calldata _poolIds, bytes[] memory _datas) external;\n\n    /// @notice Distributes funds to recipients and emits {Distributed} event if successful\n    /// @dev Each strategy will handle the distribution of funds differently\n    /// @param _poolId The ID of the pool to distribute from\n    /// @param _recipientIds The recipient ids to distribute to\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy\n    function distribute(uint256 _poolId, address[] memory _recipientIds, bytes memory _data) external;\n\n    /// =========================\n    /// ==== View Functions =====\n    /// =========================\n\n    /// @notice Checks if an address is a pool admin.\n    /// @param _poolId The ID of the pool to check\n    /// @param _address The address to check\n    /// @return 'true' if the '_address' is a pool admin, otherwise 'false'\n    function isPoolAdmin(uint256 _poolId, address _address) external view returns (bool);\n\n    /// @notice Checks if an address is a pool manager.\n    /// @param _poolId The ID of the pool to check\n    /// @param _address The address to check\n    /// @return 'true' if the '_address' is a pool manager, otherwise 'false'\n    function isPoolManager(uint256 _poolId, address _address) external view returns (bool);\n\n    /// @notice Returns the address of the strategy for a given 'poolId'\n    /// @param _poolId The ID of the pool to check\n    /// @return strategy The address of the strategy for the ID of the pool passed in\n    function getStrategy(uint256 _poolId) external view returns (address);\n\n    /// @notice Returns the current percent fee\n    /// @return percentFee The current percentage for the fee\n    function getPercentFee() external view returns (uint256);\n\n    /// @notice Returns the current base fee\n    /// @return baseFee The current base fee\n    function getBaseFee() external view returns (uint256);\n\n    /// @notice Returns the current treasury address\n    /// @return treasury The current treasury address\n    function getTreasury() external view returns (address payable);\n\n    /// @notice Returns the current registry address\n    /// @return registry The current registry address\n    function getRegistry() external view returns (IRegistry);\n\n    /// @notice Returns the 'Pool' struct for a given 'poolId'\n    /// @param _poolId The ID of the pool to check\n    /// @return pool The 'Pool' struct for the ID of the pool passed in\n    function getPool(uint256 _poolId) external view returns (Pool memory);\n\n    /// @notice Returns the current fee denominator\n    /// @dev 1e18 represents 100%\n    /// @return feeDenominator The current fee denominator\n    function getFeeDenominator() external view returns (uint256);\n}\n"
			},
			"lib/allo-v2/contracts/core/libraries/Metadata.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title Metadata\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice Metadata is used to define the metadata for the protocol that is used throughout the system.\nstruct Metadata {\n    /// @notice Protocol ID corresponding to a specific protocol (currently using IPFS = 1)\n    uint256 protocol;\n    /// @notice Pointer (hash) to fetch metadata for the specified protocol\n    string pointer;\n}\n"
			},
			"lib/allo-v2/contracts/core/interfaces/IRegistry.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n// Internal Libraries\nimport {Metadata} from \"../libraries/Metadata.sol\";\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title IRegistry Interface\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice Interface for the Registry contract and exposes all functions needed to use the Registry\n///         within the Allo protocol.\n/// @dev The Registry Interface is used to interact with the Allo protocol and create profiles\n///      that can be used to interact with the Allo protocol. The Registry is the main contract\n///      that all other contracts interact with to get the 'Profile' information needed to\n///      interact with the Allo protocol. The Registry is also used to create new profiles\n///      and update existing profiles. The Registry is also used to add and remove members\n///      from a profile. The Registry will not always be used in a strategy and will depend on\n///      the strategy being used.\ninterface IRegistry {\n    /// ======================\n    /// ======= Structs ======\n    /// ======================\n\n    /// @dev The Profile struct that all profiles are based from\n    struct Profile {\n        bytes32 id;\n        uint256 nonce;\n        string name;\n        Metadata metadata;\n        address owner;\n        address anchor;\n    }\n\n    /// ======================\n    /// ======= Events =======\n    /// ======================\n\n    /// @dev Emitted when a profile is created. This will return your anchor address.\n    event ProfileCreated(\n        bytes32 indexed profileId, uint256 nonce, string name, Metadata metadata, address owner, address anchor\n    );\n\n    /// @dev Emitted when a profile name is updated. This will update the anchor when the name is updated and return it.\n    event ProfileNameUpdated(bytes32 indexed profileId, string name, address anchor);\n\n    /// @dev Emitted when a profile's metadata is updated.\n    event ProfileMetadataUpdated(bytes32 indexed profileId, Metadata metadata);\n\n    /// @dev Emitted when a profile owner is updated.\n    event ProfileOwnerUpdated(bytes32 indexed profileId, address owner);\n\n    /// @dev Emitted when a profile pending owner is updated.\n    event ProfilePendingOwnerUpdated(bytes32 indexed profileId, address pendingOwner);\n\n    /// =========================\n    /// ==== View Functions =====\n    /// =========================\n\n    /// @dev Returns the 'Profile' for a '_profileId' passed\n    /// @param _profileId The 'profileId' to return the 'Profile' for\n    /// @return profile The 'Profile' for the '_profileId' passed\n    function getProfileById(bytes32 _profileId) external view returns (Profile memory profile);\n\n    /// @dev Returns the 'Profile' for an '_anchor' passed\n    /// @param _anchor The 'anchor' to return the 'Profile' for\n    /// @return profile The 'Profile' for the '_anchor' passed\n    function getProfileByAnchor(address _anchor) external view returns (Profile memory profile);\n\n    /// @dev Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in\n    /// @param _profileId The 'profileId' to check if the '_account' is a member or owner of\n    /// @param _account The 'account' to check if they are a member or owner of the '_profileId' passed in\n    /// @return isOwnerOrMemberOfProfile A boolean if the '_account' is a member or owner of the '_profileId' passed in\n    function isOwnerOrMemberOfProfile(bytes32 _profileId, address _account)\n        external\n        view\n        returns (bool isOwnerOrMemberOfProfile);\n\n    /// @dev Returns a boolean if the '_account' is an owner of the '_profileId' passed in\n    /// @param _profileId The 'profileId' to check if the '_account' is an owner of\n    /// @param _owner The 'owner' to check if they are an owner of the '_profileId' passed in\n    /// @return isOwnerOfProfile A boolean if the '_account' is an owner of the '_profileId' passed in\n    function isOwnerOfProfile(bytes32 _profileId, address _owner) external view returns (bool isOwnerOfProfile);\n\n    /// @dev Returns a boolean if the '_account' is a member of the '_profileId' passed in\n    /// @param _profileId The 'profileId' to check if the '_account' is a member of\n    /// @param _member The 'member' to check if they are a member of the '_profileId' passed in\n    /// @return isMemberOfProfile A boolean if the '_account' is a member of the '_profileId' passed in\n    function isMemberOfProfile(bytes32 _profileId, address _member) external view returns (bool isMemberOfProfile);\n\n    /// ====================================\n    /// ==== External/Public Functions =====\n    /// ====================================\n\n    /// @dev Creates a new 'Profile' and returns the 'profileId' of the new profile\n    ///\n    /// Note: The 'name' and 'nonce' are used to generate the 'anchor' address\n    ///\n    /// Requirements: None, anyone can create a new profile\n    ///\n    /// @param _nonce The nonce to use to generate the 'anchor' address\n    /// @param _name The name to use to generate the 'anchor' address\n    /// @param _metadata The 'Metadata' to use to generate the 'anchor' address\n    /// @param _owner The 'owner' to use to generate the 'anchor' address\n    /// @param _members The 'members' to use to generate the 'anchor' address\n    /// @return profileId The 'profileId' of the new profile\n    function createProfile(\n        uint256 _nonce,\n        string memory _name,\n        Metadata memory _metadata,\n        address _owner,\n        address[] memory _members\n    ) external returns (bytes32 profileId);\n\n    /// @dev Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address\n    ///\n    /// Requirements: Only the 'Profile' owner can update the name\n    ///\n    /// Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'\n    ///       so please use caution. You can always recreate your 'anchor' address by updating the name back\n    ///       to the original name used to create the profile.\n    ///\n    /// @param _profileId The 'profileId' to update the name for\n    /// @param _name The new 'name' value\n    /// @return anchor The new 'anchor' address\n    function updateProfileName(bytes32 _profileId, string memory _name) external returns (address anchor);\n\n    /// @dev Updates the 'Metadata' of the '_profileId' passed in\n    ///\n    /// Requirements: Only the 'Profile' owner can update the metadata\n    ///\n    /// @param _profileId The 'profileId' to update the metadata for\n    /// @param _metadata The new 'Metadata' value\n    function updateProfileMetadata(bytes32 _profileId, Metadata memory _metadata) external;\n\n    /// @dev Updates the pending 'owner' of the '_profileId' passed in\n    ///\n    /// Requirements: Only the 'Profile' owner can update the pending owner\n    ///\n    /// @param _profileId The 'profileId' to update the pending owner for\n    /// @param _pendingOwner The new pending 'owner' value\n    function updateProfilePendingOwner(bytes32 _profileId, address _pendingOwner) external;\n\n    /// @dev Accepts the pending 'owner' of the '_profileId' passed in\n    ///\n    /// Requirements: Only the pending owner can accept the ownership\n    ///\n    /// @param _profileId The 'profileId' to accept the ownership for\n    function acceptProfileOwnership(bytes32 _profileId) external;\n\n    /// @dev Adds members to the '_profileId' passed in\n    ///\n    /// Requirements: Only the 'Profile' owner can add members\n    ///\n    /// @param _profileId The 'profileId' to add members to\n    /// @param _members The members to add to the '_profileId' passed in\n    function addMembers(bytes32 _profileId, address[] memory _members) external;\n\n    /// @dev Removes members from the '_profileId' passed in\n    ///\n    /// Requirements: Only the 'Profile' owner can remove members\n    ///\n    /// @param _profileId The 'profileId' to remove members from\n    /// @param _members The members to remove from the '_profileId' passed in\n    function removeMembers(bytes32 _profileId, address[] memory _members) external;\n\n    /// @dev Recovers funds from the contract\n    ///\n    /// Requirements: Must be the Allo owner\n    ///\n    /// @param _token The token you want to use to recover funds\n    /// @param _recipient The recipient of the recovered funds\n    function recoverFunds(address _token, address _recipient) external;\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"lib/allo-v2/contracts/core/interfaces/IAllo.sol": {
				"IAllo": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "BaseFeePaid",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "baseFee",
									"type": "uint256"
								}
							],
							"name": "BaseFeeUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "percentFee",
									"type": "uint256"
								}
							],
							"name": "PercentFeeUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "contract IStrategy",
									"name": "strategy",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"indexed": false,
									"internalType": "struct Metadata",
									"name": "metadata",
									"type": "tuple"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "fee",
									"type": "uint256"
								}
							],
							"name": "PoolFunded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"indexed": false,
									"internalType": "struct Metadata",
									"name": "metadata",
									"type": "tuple"
								}
							],
							"name": "PoolMetadataUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "registry",
									"type": "address"
								}
							],
							"name": "RegistryUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "treasury",
									"type": "address"
								}
							],
							"name": "TreasuryUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_manager",
									"type": "address"
								}
							],
							"name": "addPoolManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "_poolIds",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes[]",
									"name": "_datas",
									"type": "bytes[]"
								}
							],
							"name": "batchAllocate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "_poolIds",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes[]",
									"name": "_data",
									"type": "bytes[]"
								}
							],
							"name": "batchRegisterRecipient",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_strategy",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_initStrategyData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"internalType": "struct Metadata",
									"name": "_metadata",
									"type": "tuple"
								},
								{
									"internalType": "address[]",
									"name": "_managers",
									"type": "address[]"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_strategy",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_initStrategyData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"internalType": "struct Metadata",
									"name": "_metadata",
									"type": "tuple"
								},
								{
									"internalType": "address[]",
									"name": "_managers",
									"type": "address[]"
								}
							],
							"name": "createPoolWithCustomStrategy",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "fundPool",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getBaseFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getFeeDenominator",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPercentFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "profileId",
											"type": "bytes32"
										},
										{
											"internalType": "contract IStrategy",
											"name": "strategy",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "protocol",
													"type": "uint256"
												},
												{
													"internalType": "string",
													"name": "pointer",
													"type": "string"
												}
											],
											"internalType": "struct Metadata",
											"name": "metadata",
											"type": "tuple"
										},
										{
											"internalType": "bytes32",
											"name": "managerRole",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "adminRole",
											"type": "bytes32"
										}
									],
									"internalType": "struct IAllo.Pool",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getRegistry",
							"outputs": [
								{
									"internalType": "contract IRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								}
							],
							"name": "getStrategy",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTreasury",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_registry",
									"type": "address"
								},
								{
									"internalType": "address payable",
									"name": "_treasury",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_percentFee",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_baseFee",
									"type": "uint256"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isPoolAdmin",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isPoolManager",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_recipient",
									"type": "address"
								}
							],
							"name": "recoverFunds",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "registerRecipient",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_manager",
									"type": "address"
								}
							],
							"name": "removePoolManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_baseFee",
									"type": "uint256"
								}
							],
							"name": "updateBaseFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_percentFee",
									"type": "uint256"
								}
							],
							"name": "updatePercentFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"internalType": "struct Metadata",
									"name": "_metadata",
									"type": "tuple"
								}
							],
							"name": "updatePoolMetadata",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_registry",
									"type": "address"
								}
							],
							"name": "updateRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_treasury",
									"type": "address"
								}
							],
							"name": "updateTreasury",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"events": {
							"BaseFeePaid(uint256,uint256)": {
								"params": {
									"amount": "Amount of the base fee paid",
									"poolId": "ID of the pool the base fee was paid for"
								}
							},
							"BaseFeeUpdated(uint256)": {
								"params": {
									"baseFee": "New base fee amount"
								}
							},
							"PercentFeeUpdated(uint256)": {
								"params": {
									"percentFee": "New percentage for the fee"
								}
							},
							"PoolCreated(uint256,bytes32,address,address,uint256,(uint256,string))": {
								"params": {
									"amount": "Amount pool was funded with when created",
									"metadata": "Pool metadata",
									"poolId": "ID of the pool created",
									"profileId": "ID of the profile the pool is associated with",
									"strategy": "Address of the strategy contract",
									"token": "Address of the token pool was funded with when created"
								}
							},
							"PoolFunded(uint256,uint256,uint256)": {
								"params": {
									"amount": "Amount funded to the pool",
									"fee": "Amount of the fee paid to the treasury",
									"poolId": "ID of the pool funded"
								}
							},
							"PoolMetadataUpdated(uint256,(uint256,string))": {
								"params": {
									"metadata": "Pool metadata that was updated",
									"poolId": "ID of the pool updated"
								}
							},
							"RegistryUpdated(address)": {
								"params": {
									"registry": "Address of the new registry"
								}
							},
							"TreasuryUpdated(address)": {
								"params": {
									"treasury": "Address of the new treasury"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addPoolManager(uint256,address)": {
								"details": "'msg.sender' must be a pool admin.",
								"params": {
									"_manager": "The address of the manager to add",
									"_poolId": "The ID of the pool to add the manager to"
								}
							},
							"allocate(uint256,bytes)": {
								"details": "Each strategy will handle the allocation of funds differently.",
								"params": {
									"_data": "The data to pass to the strategy and may be handled differently by each strategy.",
									"_poolId": "The ID of the pool to allocate funds from"
								}
							},
							"batchAllocate(uint256[],bytes[])": {
								"details": "Each strategy will handle the allocation of funds differently"
							},
							"batchRegisterRecipient(uint256[],bytes[])": {
								"params": {
									"_data": "The data to pass to the strategy and may be handled differently by each strategy",
									"_poolIds": "The pool ID's to register the recipients for"
								}
							},
							"createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])": {
								"custom:initstrategydata": "The encoded data will be specific to a given strategy requirements,    reference the strategy implementation of 'initialize()'",
								"details": "'msg.sender' must be owner or member of the profile id passed as '_profileId'. The strategy address passed      must not be the zero address.",
								"params": {
									"_amount": "The amount of the token",
									"_initStrategyData": "The data to initialize the strategy",
									"_managers": "The managers of the pool",
									"_metadata": "The metadata of the pool",
									"_profileId": "The ID of the registry profile, used to check if 'msg.sender' is a member or owner of the profile",
									"_strategy": "The address of the strategy contract the pool will use.",
									"_token": "The address of the token"
								}
							},
							"createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])": {
								"details": "'msg.sender' must be a member or owner of a profile to create a pool with or without a custom strategy, The encoded data      will be specific to a given strategy requirements, reference the strategy implementation of 'initialize()'. The strategy      address passed must not be the zero address. 'msg.sender' must be a member or owner of the profile id passed as '_profileId'.",
								"params": {
									"_amount": "The amount of the token you want to deposit into the pool on initialization",
									"_initStrategyData": "The data to initialize the strategy",
									"_managers": "The managers of the pool, and can be added/removed later by the pool admin",
									"_metadata": "The 'Metadata' of the pool, this uses our 'Meatdata.sol' struct (consistent throughout the protocol)",
									"_profileId": "The 'profileId' of the registry profile, used to check if 'msg.sender' is a member or owner of the profile",
									"_strategy": "The address of the deployed custom strategy",
									"_token": "The address of the token you want to use in your pool"
								},
								"returns": {
									"poolId": "The ID of the pool"
								}
							},
							"distribute(uint256,address[],bytes)": {
								"details": "Each strategy will handle the distribution of funds differently",
								"params": {
									"_data": "The data to pass to the strategy and may be handled differently by each strategy",
									"_poolId": "The ID of the pool to distribute from",
									"_recipientIds": "The recipient ids to distribute to"
								}
							},
							"fundPool(uint256,uint256)": {
								"details": "'msg.value' must be greater than 0 if the token is the native token       or '_amount' must be greater than 0 if the token is not the native token.",
								"params": {
									"_amount": "The amount to fund the pool with",
									"_poolId": "The ID of the pool to fund"
								}
							},
							"getBaseFee()": {
								"returns": {
									"_0": "baseFee The current base fee"
								}
							},
							"getFeeDenominator()": {
								"details": "1e18 represents 100%",
								"returns": {
									"_0": "feeDenominator The current fee denominator"
								}
							},
							"getPercentFee()": {
								"returns": {
									"_0": "percentFee The current percentage for the fee"
								}
							},
							"getPool(uint256)": {
								"params": {
									"_poolId": "The ID of the pool to check"
								},
								"returns": {
									"_0": "pool The 'Pool' struct for the ID of the pool passed in"
								}
							},
							"getRegistry()": {
								"returns": {
									"_0": "registry The current registry address"
								}
							},
							"getStrategy(uint256)": {
								"params": {
									"_poolId": "The ID of the pool to check"
								},
								"returns": {
									"_0": "strategy The address of the strategy for the ID of the pool passed in"
								}
							},
							"getTreasury()": {
								"returns": {
									"_0": "treasury The current treasury address"
								}
							},
							"initialize(address,address,address,uint256,uint256)": {
								"params": {
									"_baseFee": "Base fee amount",
									"_owner": "Address of the owner",
									"_percentFee": "Percentage for the fee",
									"_registry": "Address of the registry contract",
									"_treasury": "Address of the treasury"
								}
							},
							"isPoolAdmin(uint256,address)": {
								"params": {
									"_address": "The address to check",
									"_poolId": "The ID of the pool to check"
								},
								"returns": {
									"_0": "'true' if the '_address' is a pool admin, otherwise 'false'"
								}
							},
							"isPoolManager(uint256,address)": {
								"params": {
									"_address": "The address to check",
									"_poolId": "The ID of the pool to check"
								},
								"returns": {
									"_0": "'true' if the '_address' is a pool manager, otherwise 'false'"
								}
							},
							"recoverFunds(address,address)": {
								"details": "'msg.sender' must be a pool admin.",
								"params": {
									"_recipient": "The address to send the recovered funds to",
									"_token": "The token to recover"
								}
							},
							"registerRecipient(uint256,bytes)": {
								"params": {
									"_poolId": "The ID of the pool to register the recipient for"
								}
							},
							"removePoolManager(uint256,address)": {
								"details": "'msg.sender' must be a pool admin.",
								"params": {
									"_manager": "The address of the manager to remove",
									"_poolId": "The ID of the pool to remove the manager from"
								}
							},
							"updateBaseFee(uint256)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_baseFee": "The new base fee"
								}
							},
							"updatePercentFee(uint256)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_percentFee": "The new percentage for the fee"
								}
							},
							"updatePoolMetadata(uint256,(uint256,string))": {
								"details": "'msg.sender' must be a pool admin.",
								"params": {
									"_metadata": "The new metadata to set",
									"_poolId": "The ID of the pool to update"
								}
							},
							"updateRegistry(address)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_registry": "The new registry address"
								}
							},
							"updateTreasury(address)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_treasury": "The new treasury address"
								}
							}
						},
						"title": "Allo Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addPoolManager(uint256,address)": "2cf682b0",
							"allocate(uint256,bytes)": "2ec38188",
							"batchAllocate(uint256[],bytes[])": "c6dff1cf",
							"batchRegisterRecipient(uint256[],bytes[])": "1a20bd88",
							"createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])": "77da8caf",
							"createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])": "e1007d4a",
							"distribute(uint256,address[],bytes)": "3a5fbd92",
							"fundPool(uint256,uint256)": "5acd6fac",
							"getBaseFee()": "15e812ad",
							"getFeeDenominator()": "f4e1fc41",
							"getPercentFee()": "4edbaadc",
							"getPool(uint256)": "068bcd8d",
							"getRegistry()": "5ab1bd53",
							"getStrategy(uint256)": "cfc0cc34",
							"getTreasury()": "3b19e84a",
							"initialize(address,address,address,uint256,uint256)": "a6b63eb8",
							"isPoolAdmin(uint256,address)": "ab3febc6",
							"isPoolManager(uint256,address)": "29e40d4b",
							"recoverFunds(address,address)": "24ae6a27",
							"registerRecipient(uint256,bytes)": "075c0e9c",
							"removePoolManager(uint256,address)": "7f5a70bd",
							"updateBaseFee(uint256)": "8e690186",
							"updatePercentFee(uint256)": "f54fc4a0",
							"updatePoolMetadata(uint256,(uint256,string))": "5f9ca138",
							"updateRegistry(address)": "1a5da6c8",
							"updateTreasury(address)": "7f51bb1f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BaseFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"BaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentFee\",\"type\":\"uint256\"}],\"name\":\"PercentFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PoolFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"PoolMetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"}],\"name\":\"batchAllocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"batchRegisterRecipient\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initStrategyData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initStrategyData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"name\":\"createPoolWithCustomStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"managerRole\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"internalType\":\"struct IAllo.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPoolAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPoolManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removePoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"updateBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentFee\",\"type\":\"uint256\"}],\"name\":\"updatePercentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"}],\"name\":\"updatePoolMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"events\":{\"BaseFeePaid(uint256,uint256)\":{\"params\":{\"amount\":\"Amount of the base fee paid\",\"poolId\":\"ID of the pool the base fee was paid for\"}},\"BaseFeeUpdated(uint256)\":{\"params\":{\"baseFee\":\"New base fee amount\"}},\"PercentFeeUpdated(uint256)\":{\"params\":{\"percentFee\":\"New percentage for the fee\"}},\"PoolCreated(uint256,bytes32,address,address,uint256,(uint256,string))\":{\"params\":{\"amount\":\"Amount pool was funded with when created\",\"metadata\":\"Pool metadata\",\"poolId\":\"ID of the pool created\",\"profileId\":\"ID of the profile the pool is associated with\",\"strategy\":\"Address of the strategy contract\",\"token\":\"Address of the token pool was funded with when created\"}},\"PoolFunded(uint256,uint256,uint256)\":{\"params\":{\"amount\":\"Amount funded to the pool\",\"fee\":\"Amount of the fee paid to the treasury\",\"poolId\":\"ID of the pool funded\"}},\"PoolMetadataUpdated(uint256,(uint256,string))\":{\"params\":{\"metadata\":\"Pool metadata that was updated\",\"poolId\":\"ID of the pool updated\"}},\"RegistryUpdated(address)\":{\"params\":{\"registry\":\"Address of the new registry\"}},\"TreasuryUpdated(address)\":{\"params\":{\"treasury\":\"Address of the new treasury\"}}},\"kind\":\"dev\",\"methods\":{\"addPoolManager(uint256,address)\":{\"details\":\"'msg.sender' must be a pool admin.\",\"params\":{\"_manager\":\"The address of the manager to add\",\"_poolId\":\"The ID of the pool to add the manager to\"}},\"allocate(uint256,bytes)\":{\"details\":\"Each strategy will handle the allocation of funds differently.\",\"params\":{\"_data\":\"The data to pass to the strategy and may be handled differently by each strategy.\",\"_poolId\":\"The ID of the pool to allocate funds from\"}},\"batchAllocate(uint256[],bytes[])\":{\"details\":\"Each strategy will handle the allocation of funds differently\"},\"batchRegisterRecipient(uint256[],bytes[])\":{\"params\":{\"_data\":\"The data to pass to the strategy and may be handled differently by each strategy\",\"_poolIds\":\"The pool ID's to register the recipients for\"}},\"createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])\":{\"custom:initstrategydata\":\"The encoded data will be specific to a given strategy requirements,    reference the strategy implementation of 'initialize()'\",\"details\":\"'msg.sender' must be owner or member of the profile id passed as '_profileId'. The strategy address passed      must not be the zero address.\",\"params\":{\"_amount\":\"The amount of the token\",\"_initStrategyData\":\"The data to initialize the strategy\",\"_managers\":\"The managers of the pool\",\"_metadata\":\"The metadata of the pool\",\"_profileId\":\"The ID of the registry profile, used to check if 'msg.sender' is a member or owner of the profile\",\"_strategy\":\"The address of the strategy contract the pool will use.\",\"_token\":\"The address of the token\"}},\"createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])\":{\"details\":\"'msg.sender' must be a member or owner of a profile to create a pool with or without a custom strategy, The encoded data      will be specific to a given strategy requirements, reference the strategy implementation of 'initialize()'. The strategy      address passed must not be the zero address. 'msg.sender' must be a member or owner of the profile id passed as '_profileId'.\",\"params\":{\"_amount\":\"The amount of the token you want to deposit into the pool on initialization\",\"_initStrategyData\":\"The data to initialize the strategy\",\"_managers\":\"The managers of the pool, and can be added/removed later by the pool admin\",\"_metadata\":\"The 'Metadata' of the pool, this uses our 'Meatdata.sol' struct (consistent throughout the protocol)\",\"_profileId\":\"The 'profileId' of the registry profile, used to check if 'msg.sender' is a member or owner of the profile\",\"_strategy\":\"The address of the deployed custom strategy\",\"_token\":\"The address of the token you want to use in your pool\"},\"returns\":{\"poolId\":\"The ID of the pool\"}},\"distribute(uint256,address[],bytes)\":{\"details\":\"Each strategy will handle the distribution of funds differently\",\"params\":{\"_data\":\"The data to pass to the strategy and may be handled differently by each strategy\",\"_poolId\":\"The ID of the pool to distribute from\",\"_recipientIds\":\"The recipient ids to distribute to\"}},\"fundPool(uint256,uint256)\":{\"details\":\"'msg.value' must be greater than 0 if the token is the native token       or '_amount' must be greater than 0 if the token is not the native token.\",\"params\":{\"_amount\":\"The amount to fund the pool with\",\"_poolId\":\"The ID of the pool to fund\"}},\"getBaseFee()\":{\"returns\":{\"_0\":\"baseFee The current base fee\"}},\"getFeeDenominator()\":{\"details\":\"1e18 represents 100%\",\"returns\":{\"_0\":\"feeDenominator The current fee denominator\"}},\"getPercentFee()\":{\"returns\":{\"_0\":\"percentFee The current percentage for the fee\"}},\"getPool(uint256)\":{\"params\":{\"_poolId\":\"The ID of the pool to check\"},\"returns\":{\"_0\":\"pool The 'Pool' struct for the ID of the pool passed in\"}},\"getRegistry()\":{\"returns\":{\"_0\":\"registry The current registry address\"}},\"getStrategy(uint256)\":{\"params\":{\"_poolId\":\"The ID of the pool to check\"},\"returns\":{\"_0\":\"strategy The address of the strategy for the ID of the pool passed in\"}},\"getTreasury()\":{\"returns\":{\"_0\":\"treasury The current treasury address\"}},\"initialize(address,address,address,uint256,uint256)\":{\"params\":{\"_baseFee\":\"Base fee amount\",\"_owner\":\"Address of the owner\",\"_percentFee\":\"Percentage for the fee\",\"_registry\":\"Address of the registry contract\",\"_treasury\":\"Address of the treasury\"}},\"isPoolAdmin(uint256,address)\":{\"params\":{\"_address\":\"The address to check\",\"_poolId\":\"The ID of the pool to check\"},\"returns\":{\"_0\":\"'true' if the '_address' is a pool admin, otherwise 'false'\"}},\"isPoolManager(uint256,address)\":{\"params\":{\"_address\":\"The address to check\",\"_poolId\":\"The ID of the pool to check\"},\"returns\":{\"_0\":\"'true' if the '_address' is a pool manager, otherwise 'false'\"}},\"recoverFunds(address,address)\":{\"details\":\"'msg.sender' must be a pool admin.\",\"params\":{\"_recipient\":\"The address to send the recovered funds to\",\"_token\":\"The token to recover\"}},\"registerRecipient(uint256,bytes)\":{\"params\":{\"_poolId\":\"The ID of the pool to register the recipient for\"}},\"removePoolManager(uint256,address)\":{\"details\":\"'msg.sender' must be a pool admin.\",\"params\":{\"_manager\":\"The address of the manager to remove\",\"_poolId\":\"The ID of the pool to remove the manager from\"}},\"updateBaseFee(uint256)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_baseFee\":\"The new base fee\"}},\"updatePercentFee(uint256)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_percentFee\":\"The new percentage for the fee\"}},\"updatePoolMetadata(uint256,(uint256,string))\":{\"details\":\"'msg.sender' must be a pool admin.\",\"params\":{\"_metadata\":\"The new metadata to set\",\"_poolId\":\"The ID of the pool to update\"}},\"updateRegistry(address)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_registry\":\"The new registry address\"}},\"updateTreasury(address)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_treasury\":\"The new treasury address\"}}},\"title\":\"Allo Interface\",\"version\":1},\"userdoc\":{\"events\":{\"BaseFeePaid(uint256,uint256)\":{\"notice\":\"Emitted when the base fee is paid\"},\"BaseFeeUpdated(uint256)\":{\"notice\":\"Emitted when the base fee is updated\"},\"PercentFeeUpdated(uint256)\":{\"notice\":\"Emitted when the percent fee is updated\"},\"PoolCreated(uint256,bytes32,address,address,uint256,(uint256,string))\":{\"notice\":\"Event emitted when a new pool is created\"},\"PoolFunded(uint256,uint256,uint256)\":{\"notice\":\"Emitted when a pool is funded\"},\"PoolMetadataUpdated(uint256,(uint256,string))\":{\"notice\":\"Emitted when a pools metadata is updated\"},\"RegistryUpdated(address)\":{\"notice\":\"Emitted when the registry address is updated\"},\"TreasuryUpdated(address)\":{\"notice\":\"Emitted when the treasury address is updated\"}},\"kind\":\"user\",\"methods\":{\"addPoolManager(uint256,address)\":{\"notice\":\"Adds a pool manager to the pool.\"},\"allocate(uint256,bytes)\":{\"notice\":\"Allocates funds to a recipient.\"},\"batchAllocate(uint256[],bytes[])\":{\"notice\":\"Allocates funds to multiple recipients.\"},\"batchRegisterRecipient(uint256[],bytes[])\":{\"notice\":\"Registers a batch of recipients.\"},\"createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])\":{\"notice\":\"Creates a new pool (by cloning a deployed strategies).\"},\"createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])\":{\"notice\":\"Creates a new pool (with a custom strategy)\"},\"distribute(uint256,address[],bytes)\":{\"notice\":\"Distributes funds to recipients and emits {Distributed} event if successful\"},\"fundPool(uint256,uint256)\":{\"notice\":\"Funds a pool.\"},\"getBaseFee()\":{\"notice\":\"Returns the current base fee\"},\"getFeeDenominator()\":{\"notice\":\"Returns the current fee denominator\"},\"getPercentFee()\":{\"notice\":\"Returns the current percent fee\"},\"getPool(uint256)\":{\"notice\":\"Returns the 'Pool' struct for a given 'poolId'\"},\"getRegistry()\":{\"notice\":\"Returns the current registry address\"},\"getStrategy(uint256)\":{\"notice\":\"Returns the address of the strategy for a given 'poolId'\"},\"getTreasury()\":{\"notice\":\"Returns the current treasury address\"},\"initialize(address,address,address,uint256,uint256)\":{\"notice\":\"Initialize the Allo contract\"},\"isPoolAdmin(uint256,address)\":{\"notice\":\"Checks if an address is a pool admin.\"},\"isPoolManager(uint256,address)\":{\"notice\":\"Checks if an address is a pool manager.\"},\"recoverFunds(address,address)\":{\"notice\":\"Recovers funds from a pool.\"},\"registerRecipient(uint256,bytes)\":{\"notice\":\"Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy.\"},\"removePoolManager(uint256,address)\":{\"notice\":\"Removes a pool manager from the pool.\"},\"updateBaseFee(uint256)\":{\"notice\":\"Updates the base fee.\"},\"updatePercentFee(uint256)\":{\"notice\":\"Updates the percentage for the fee.\"},\"updatePoolMetadata(uint256,(uint256,string))\":{\"notice\":\"Updates a pools metadata.\"},\"updateRegistry(address)\":{\"notice\":\"Update the registry address.\"},\"updateTreasury(address)\":{\"notice\":\"Updates the treasury address.\"}},\"notice\":\"Interface for the Allo contract. It exposes all functions needed to use the Allo protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/contracts/core/interfaces/IAllo.sol\":\"IAllo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/contracts/core/interfaces/IAllo.sol\":{\"keccak256\":\"0x7bc06a262ffe042092c58949452b043546788a66616bec2a40f55975fd537c1d\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7420316020e25430b295e876562932810f274c7c651cbda8c09989a3ad9837d2\",\"dweb:/ipfs/QmfNx7MHNK9t4ReeA71CBUXHEhYNj6suDYHY7pjqUDc1T3\"]},\"lib/allo-v2/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"lib/allo-v2/contracts/core/interfaces/IStrategy.sol\":{\"keccak256\":\"0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487\",\"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH\"]},\"lib/allo-v2/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://2cc5507da2550ab9bfa0fbb263e703f9e70b831190bb7b2bcdbb231cab49795c\",\"dweb:/ipfs/QmQXCD8v2HppXAX17aH49JvNyyfDYzGMrg63QNabUEXPpn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"BaseFeePaid(uint256,uint256)": {
								"notice": "Emitted when the base fee is paid"
							},
							"BaseFeeUpdated(uint256)": {
								"notice": "Emitted when the base fee is updated"
							},
							"PercentFeeUpdated(uint256)": {
								"notice": "Emitted when the percent fee is updated"
							},
							"PoolCreated(uint256,bytes32,address,address,uint256,(uint256,string))": {
								"notice": "Event emitted when a new pool is created"
							},
							"PoolFunded(uint256,uint256,uint256)": {
								"notice": "Emitted when a pool is funded"
							},
							"PoolMetadataUpdated(uint256,(uint256,string))": {
								"notice": "Emitted when a pools metadata is updated"
							},
							"RegistryUpdated(address)": {
								"notice": "Emitted when the registry address is updated"
							},
							"TreasuryUpdated(address)": {
								"notice": "Emitted when the treasury address is updated"
							}
						},
						"kind": "user",
						"methods": {
							"addPoolManager(uint256,address)": {
								"notice": "Adds a pool manager to the pool."
							},
							"allocate(uint256,bytes)": {
								"notice": "Allocates funds to a recipient."
							},
							"batchAllocate(uint256[],bytes[])": {
								"notice": "Allocates funds to multiple recipients."
							},
							"batchRegisterRecipient(uint256[],bytes[])": {
								"notice": "Registers a batch of recipients."
							},
							"createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])": {
								"notice": "Creates a new pool (by cloning a deployed strategies)."
							},
							"createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])": {
								"notice": "Creates a new pool (with a custom strategy)"
							},
							"distribute(uint256,address[],bytes)": {
								"notice": "Distributes funds to recipients and emits {Distributed} event if successful"
							},
							"fundPool(uint256,uint256)": {
								"notice": "Funds a pool."
							},
							"getBaseFee()": {
								"notice": "Returns the current base fee"
							},
							"getFeeDenominator()": {
								"notice": "Returns the current fee denominator"
							},
							"getPercentFee()": {
								"notice": "Returns the current percent fee"
							},
							"getPool(uint256)": {
								"notice": "Returns the 'Pool' struct for a given 'poolId'"
							},
							"getRegistry()": {
								"notice": "Returns the current registry address"
							},
							"getStrategy(uint256)": {
								"notice": "Returns the address of the strategy for a given 'poolId'"
							},
							"getTreasury()": {
								"notice": "Returns the current treasury address"
							},
							"initialize(address,address,address,uint256,uint256)": {
								"notice": "Initialize the Allo contract"
							},
							"isPoolAdmin(uint256,address)": {
								"notice": "Checks if an address is a pool admin."
							},
							"isPoolManager(uint256,address)": {
								"notice": "Checks if an address is a pool manager."
							},
							"recoverFunds(address,address)": {
								"notice": "Recovers funds from a pool."
							},
							"registerRecipient(uint256,bytes)": {
								"notice": "Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy."
							},
							"removePoolManager(uint256,address)": {
								"notice": "Removes a pool manager from the pool."
							},
							"updateBaseFee(uint256)": {
								"notice": "Updates the base fee."
							},
							"updatePercentFee(uint256)": {
								"notice": "Updates the percentage for the fee."
							},
							"updatePoolMetadata(uint256,(uint256,string))": {
								"notice": "Updates a pools metadata."
							},
							"updateRegistry(address)": {
								"notice": "Update the registry address."
							},
							"updateTreasury(address)": {
								"notice": "Updates the treasury address."
							}
						},
						"notice": "Interface for the Allo contract. It exposes all functions needed to use the Allo protocol.",
						"version": 1
					}
				}
			},
			"lib/allo-v2/contracts/core/interfaces/IRegistry.sol": {
				"IRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"indexed": false,
									"internalType": "struct Metadata",
									"name": "metadata",
									"type": "tuple"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "anchor",
									"type": "address"
								}
							],
							"name": "ProfileCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"indexed": false,
									"internalType": "struct Metadata",
									"name": "metadata",
									"type": "tuple"
								}
							],
							"name": "ProfileMetadataUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "anchor",
									"type": "address"
								}
							],
							"name": "ProfileNameUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ProfileOwnerUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pendingOwner",
									"type": "address"
								}
							],
							"name": "ProfilePendingOwnerUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								}
							],
							"name": "acceptProfileOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address[]",
									"name": "_members",
									"type": "address[]"
								}
							],
							"name": "addMembers",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_nonce",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "_name",
									"type": "string"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"internalType": "struct Metadata",
									"name": "_metadata",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "_members",
									"type": "address[]"
								}
							],
							"name": "createProfile",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_anchor",
									"type": "address"
								}
							],
							"name": "getProfileByAnchor",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "id",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "name",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "protocol",
													"type": "uint256"
												},
												{
													"internalType": "string",
													"name": "pointer",
													"type": "string"
												}
											],
											"internalType": "struct Metadata",
											"name": "metadata",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "owner",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "anchor",
											"type": "address"
										}
									],
									"internalType": "struct IRegistry.Profile",
									"name": "profile",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								}
							],
							"name": "getProfileById",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "id",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "name",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "protocol",
													"type": "uint256"
												},
												{
													"internalType": "string",
													"name": "pointer",
													"type": "string"
												}
											],
											"internalType": "struct Metadata",
											"name": "metadata",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "owner",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "anchor",
											"type": "address"
										}
									],
									"internalType": "struct IRegistry.Profile",
									"name": "profile",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_member",
									"type": "address"
								}
							],
							"name": "isMemberOfProfile",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isMemberOfProfile",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "isOwnerOfProfile",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isOwnerOfProfile",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_account",
									"type": "address"
								}
							],
							"name": "isOwnerOrMemberOfProfile",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isOwnerOrMemberOfProfile",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_recipient",
									"type": "address"
								}
							],
							"name": "recoverFunds",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address[]",
									"name": "_members",
									"type": "address[]"
								}
							],
							"name": "removeMembers",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"internalType": "struct Metadata",
									"name": "_metadata",
									"type": "tuple"
								}
							],
							"name": "updateProfileMetadata",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "_name",
									"type": "string"
								}
							],
							"name": "updateProfileName",
							"outputs": [
								{
									"internalType": "address",
									"name": "anchor",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_pendingOwner",
									"type": "address"
								}
							],
							"name": "updateProfilePendingOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"details": "The Registry Interface is used to interact with the Allo protocol and create profiles      that can be used to interact with the Allo protocol. The Registry is the main contract      that all other contracts interact with to get the 'Profile' information needed to      interact with the Allo protocol. The Registry is also used to create new profiles      and update existing profiles. The Registry is also used to add and remove members      from a profile. The Registry will not always be used in a strategy and will depend on      the strategy being used.",
						"events": {
							"ProfileCreated(bytes32,uint256,string,(uint256,string),address,address)": {
								"details": "Emitted when a profile is created. This will return your anchor address."
							},
							"ProfileMetadataUpdated(bytes32,(uint256,string))": {
								"details": "Emitted when a profile's metadata is updated."
							},
							"ProfileNameUpdated(bytes32,string,address)": {
								"details": "Emitted when a profile name is updated. This will update the anchor when the name is updated and return it."
							},
							"ProfileOwnerUpdated(bytes32,address)": {
								"details": "Emitted when a profile owner is updated."
							},
							"ProfilePendingOwnerUpdated(bytes32,address)": {
								"details": "Emitted when a profile pending owner is updated."
							}
						},
						"kind": "dev",
						"methods": {
							"acceptProfileOwnership(bytes32)": {
								"details": "Accepts the pending 'owner' of the '_profileId' passed in Requirements: Only the pending owner can accept the ownership",
								"params": {
									"_profileId": "The 'profileId' to accept the ownership for"
								}
							},
							"addMembers(bytes32,address[])": {
								"details": "Adds members to the '_profileId' passed in Requirements: Only the 'Profile' owner can add members",
								"params": {
									"_members": "The members to add to the '_profileId' passed in",
									"_profileId": "The 'profileId' to add members to"
								}
							},
							"createProfile(uint256,string,(uint256,string),address,address[])": {
								"details": "Creates a new 'Profile' and returns the 'profileId' of the new profile Note: The 'name' and 'nonce' are used to generate the 'anchor' address Requirements: None, anyone can create a new profile",
								"params": {
									"_members": "The 'members' to use to generate the 'anchor' address",
									"_metadata": "The 'Metadata' to use to generate the 'anchor' address",
									"_name": "The name to use to generate the 'anchor' address",
									"_nonce": "The nonce to use to generate the 'anchor' address",
									"_owner": "The 'owner' to use to generate the 'anchor' address"
								},
								"returns": {
									"profileId": "The 'profileId' of the new profile"
								}
							},
							"getProfileByAnchor(address)": {
								"details": "Returns the 'Profile' for an '_anchor' passed",
								"params": {
									"_anchor": "The 'anchor' to return the 'Profile' for"
								},
								"returns": {
									"profile": "The 'Profile' for the '_anchor' passed"
								}
							},
							"getProfileById(bytes32)": {
								"details": "Returns the 'Profile' for a '_profileId' passed",
								"params": {
									"_profileId": "The 'profileId' to return the 'Profile' for"
								},
								"returns": {
									"profile": "The 'Profile' for the '_profileId' passed"
								}
							},
							"isMemberOfProfile(bytes32,address)": {
								"details": "Returns a boolean if the '_account' is a member of the '_profileId' passed in",
								"params": {
									"_member": "The 'member' to check if they are a member of the '_profileId' passed in",
									"_profileId": "The 'profileId' to check if the '_account' is a member of"
								},
								"returns": {
									"isMemberOfProfile": "A boolean if the '_account' is a member of the '_profileId' passed in"
								}
							},
							"isOwnerOfProfile(bytes32,address)": {
								"details": "Returns a boolean if the '_account' is an owner of the '_profileId' passed in",
								"params": {
									"_owner": "The 'owner' to check if they are an owner of the '_profileId' passed in",
									"_profileId": "The 'profileId' to check if the '_account' is an owner of"
								},
								"returns": {
									"isOwnerOfProfile": "A boolean if the '_account' is an owner of the '_profileId' passed in"
								}
							},
							"isOwnerOrMemberOfProfile(bytes32,address)": {
								"details": "Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in",
								"params": {
									"_account": "The 'account' to check if they are a member or owner of the '_profileId' passed in",
									"_profileId": "The 'profileId' to check if the '_account' is a member or owner of"
								},
								"returns": {
									"isOwnerOrMemberOfProfile": "A boolean if the '_account' is a member or owner of the '_profileId' passed in"
								}
							},
							"recoverFunds(address,address)": {
								"details": "Recovers funds from the contract Requirements: Must be the Allo owner",
								"params": {
									"_recipient": "The recipient of the recovered funds",
									"_token": "The token you want to use to recover funds"
								}
							},
							"removeMembers(bytes32,address[])": {
								"details": "Removes members from the '_profileId' passed in Requirements: Only the 'Profile' owner can remove members",
								"params": {
									"_members": "The members to remove from the '_profileId' passed in",
									"_profileId": "The 'profileId' to remove members from"
								}
							},
							"updateProfileMetadata(bytes32,(uint256,string))": {
								"details": "Updates the 'Metadata' of the '_profileId' passed in Requirements: Only the 'Profile' owner can update the metadata",
								"params": {
									"_metadata": "The new 'Metadata' value",
									"_profileId": "The 'profileId' to update the metadata for"
								}
							},
							"updateProfileName(bytes32,string)": {
								"details": "Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address Requirements: Only the 'Profile' owner can update the name Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'       so please use caution. You can always recreate your 'anchor' address by updating the name back       to the original name used to create the profile.",
								"params": {
									"_name": "The new 'name' value",
									"_profileId": "The 'profileId' to update the name for"
								},
								"returns": {
									"anchor": "The new 'anchor' address"
								}
							},
							"updateProfilePendingOwner(bytes32,address)": {
								"details": "Updates the pending 'owner' of the '_profileId' passed in Requirements: Only the 'Profile' owner can update the pending owner",
								"params": {
									"_pendingOwner": "The new pending 'owner' value",
									"_profileId": "The 'profileId' to update the pending owner for"
								}
							}
						},
						"title": "IRegistry Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"acceptProfileOwnership(bytes32)": "2497f3c6",
							"addMembers(bytes32,address[])": "5063f361",
							"createProfile(uint256,string,(uint256,string),address,address[])": "3a92f65f",
							"getProfileByAnchor(address)": "dd93da43",
							"getProfileById(bytes32)": "0114cf0a",
							"isMemberOfProfile(bytes32,address)": "0ec1fbac",
							"isOwnerOfProfile(bytes32,address)": "39b86b8c",
							"isOwnerOrMemberOfProfile(bytes32,address)": "5e8a7915",
							"recoverFunds(address,address)": "24ae6a27",
							"removeMembers(bytes32,address[])": "e0cf1e4c",
							"updateProfileMetadata(bytes32,(uint256,string))": "ac402839",
							"updateProfileName(bytes32,string)": "cf189ff2",
							"updateProfilePendingOwner(bytes32,address)": "3b66dacd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"name\":\"ProfileCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"ProfileMetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"name\":\"ProfileNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProfileOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ProfilePendingOwnerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"}],\"name\":\"acceptProfileOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"addMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"createProfile\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anchor\",\"type\":\"address\"}],\"name\":\"getProfileByAnchor\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"internalType\":\"struct IRegistry.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"}],\"name\":\"getProfileById\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"internalType\":\"struct IRegistry.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"isMemberOfProfile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMemberOfProfile\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwnerOfProfile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOwnerOfProfile\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOwnerOrMemberOfProfile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOwnerOrMemberOfProfile\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"removeMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"}],\"name\":\"updateProfileMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateProfileName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_pendingOwner\",\"type\":\"address\"}],\"name\":\"updateProfilePendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"details\":\"The Registry Interface is used to interact with the Allo protocol and create profiles      that can be used to interact with the Allo protocol. The Registry is the main contract      that all other contracts interact with to get the 'Profile' information needed to      interact with the Allo protocol. The Registry is also used to create new profiles      and update existing profiles. The Registry is also used to add and remove members      from a profile. The Registry will not always be used in a strategy and will depend on      the strategy being used.\",\"events\":{\"ProfileCreated(bytes32,uint256,string,(uint256,string),address,address)\":{\"details\":\"Emitted when a profile is created. This will return your anchor address.\"},\"ProfileMetadataUpdated(bytes32,(uint256,string))\":{\"details\":\"Emitted when a profile's metadata is updated.\"},\"ProfileNameUpdated(bytes32,string,address)\":{\"details\":\"Emitted when a profile name is updated. This will update the anchor when the name is updated and return it.\"},\"ProfileOwnerUpdated(bytes32,address)\":{\"details\":\"Emitted when a profile owner is updated.\"},\"ProfilePendingOwnerUpdated(bytes32,address)\":{\"details\":\"Emitted when a profile pending owner is updated.\"}},\"kind\":\"dev\",\"methods\":{\"acceptProfileOwnership(bytes32)\":{\"details\":\"Accepts the pending 'owner' of the '_profileId' passed in Requirements: Only the pending owner can accept the ownership\",\"params\":{\"_profileId\":\"The 'profileId' to accept the ownership for\"}},\"addMembers(bytes32,address[])\":{\"details\":\"Adds members to the '_profileId' passed in Requirements: Only the 'Profile' owner can add members\",\"params\":{\"_members\":\"The members to add to the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to add members to\"}},\"createProfile(uint256,string,(uint256,string),address,address[])\":{\"details\":\"Creates a new 'Profile' and returns the 'profileId' of the new profile Note: The 'name' and 'nonce' are used to generate the 'anchor' address Requirements: None, anyone can create a new profile\",\"params\":{\"_members\":\"The 'members' to use to generate the 'anchor' address\",\"_metadata\":\"The 'Metadata' to use to generate the 'anchor' address\",\"_name\":\"The name to use to generate the 'anchor' address\",\"_nonce\":\"The nonce to use to generate the 'anchor' address\",\"_owner\":\"The 'owner' to use to generate the 'anchor' address\"},\"returns\":{\"profileId\":\"The 'profileId' of the new profile\"}},\"getProfileByAnchor(address)\":{\"details\":\"Returns the 'Profile' for an '_anchor' passed\",\"params\":{\"_anchor\":\"The 'anchor' to return the 'Profile' for\"},\"returns\":{\"profile\":\"The 'Profile' for the '_anchor' passed\"}},\"getProfileById(bytes32)\":{\"details\":\"Returns the 'Profile' for a '_profileId' passed\",\"params\":{\"_profileId\":\"The 'profileId' to return the 'Profile' for\"},\"returns\":{\"profile\":\"The 'Profile' for the '_profileId' passed\"}},\"isMemberOfProfile(bytes32,address)\":{\"details\":\"Returns a boolean if the '_account' is a member of the '_profileId' passed in\",\"params\":{\"_member\":\"The 'member' to check if they are a member of the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to check if the '_account' is a member of\"},\"returns\":{\"isMemberOfProfile\":\"A boolean if the '_account' is a member of the '_profileId' passed in\"}},\"isOwnerOfProfile(bytes32,address)\":{\"details\":\"Returns a boolean if the '_account' is an owner of the '_profileId' passed in\",\"params\":{\"_owner\":\"The 'owner' to check if they are an owner of the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to check if the '_account' is an owner of\"},\"returns\":{\"isOwnerOfProfile\":\"A boolean if the '_account' is an owner of the '_profileId' passed in\"}},\"isOwnerOrMemberOfProfile(bytes32,address)\":{\"details\":\"Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in\",\"params\":{\"_account\":\"The 'account' to check if they are a member or owner of the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to check if the '_account' is a member or owner of\"},\"returns\":{\"isOwnerOrMemberOfProfile\":\"A boolean if the '_account' is a member or owner of the '_profileId' passed in\"}},\"recoverFunds(address,address)\":{\"details\":\"Recovers funds from the contract Requirements: Must be the Allo owner\",\"params\":{\"_recipient\":\"The recipient of the recovered funds\",\"_token\":\"The token you want to use to recover funds\"}},\"removeMembers(bytes32,address[])\":{\"details\":\"Removes members from the '_profileId' passed in Requirements: Only the 'Profile' owner can remove members\",\"params\":{\"_members\":\"The members to remove from the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to remove members from\"}},\"updateProfileMetadata(bytes32,(uint256,string))\":{\"details\":\"Updates the 'Metadata' of the '_profileId' passed in Requirements: Only the 'Profile' owner can update the metadata\",\"params\":{\"_metadata\":\"The new 'Metadata' value\",\"_profileId\":\"The 'profileId' to update the metadata for\"}},\"updateProfileName(bytes32,string)\":{\"details\":\"Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address Requirements: Only the 'Profile' owner can update the name Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'       so please use caution. You can always recreate your 'anchor' address by updating the name back       to the original name used to create the profile.\",\"params\":{\"_name\":\"The new 'name' value\",\"_profileId\":\"The 'profileId' to update the name for\"},\"returns\":{\"anchor\":\"The new 'anchor' address\"}},\"updateProfilePendingOwner(bytes32,address)\":{\"details\":\"Updates the pending 'owner' of the '_profileId' passed in Requirements: Only the 'Profile' owner can update the pending owner\",\"params\":{\"_pendingOwner\":\"The new pending 'owner' value\",\"_profileId\":\"The 'profileId' to update the pending owner for\"}}},\"title\":\"IRegistry Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for the Registry contract and exposes all functions needed to use the Registry         within the Allo protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/contracts/core/interfaces/IRegistry.sol\":\"IRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"lib/allo-v2/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://2cc5507da2550ab9bfa0fbb263e703f9e70b831190bb7b2bcdbb231cab49795c\",\"dweb:/ipfs/QmQXCD8v2HppXAX17aH49JvNyyfDYzGMrg63QNabUEXPpn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Interface for the Registry contract and exposes all functions needed to use the Registry         within the Allo protocol.",
						"version": 1
					}
				}
			},
			"lib/allo-v2/contracts/core/interfaces/IStrategy.sol": {
				"IStrategy": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Allocated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipientAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Distributed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"name": "PoolActive",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Registered",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllo",
							"outputs": [
								{
									"internalType": "contract IAllo",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes[]",
									"name": "_data",
									"type": "bytes[]"
								}
							],
							"name": "getPayouts",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "recipientAddress",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										}
									],
									"internalType": "struct IStrategy.PayoutSummary[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_recipientId",
									"type": "address"
								}
							],
							"name": "getRecipientStatus",
							"outputs": [
								{
									"internalType": "enum IStrategy.Status",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getStrategyId",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "increasePoolAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isPoolActive",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_allocator",
									"type": "address"
								}
							],
							"name": "isValidAllocator",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "registerRecipient",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"events": {
							"Allocated(address,uint256,address,address)": {
								"params": {
									"amount": "The amount allocated",
									"recipientId": "The ID of the recipient",
									"token": "The token allocated"
								}
							},
							"Distributed(address,address,uint256,address)": {
								"params": {
									"amount": "The amount distributed",
									"recipientAddress": "The recipient",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							},
							"Initialized(uint256,bytes)": {
								"params": {
									"data": "The data passed to the 'initialize' function",
									"poolId": "The ID of the pool"
								}
							},
							"PoolActive(bool)": {
								"params": {
									"active": "The status of the pool"
								}
							},
							"Registered(address,bytes,address)": {
								"params": {
									"data": "The data passed to the 'registerRecipient' function",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allocate(bytes,address)": {
								"details": "The encoded '_data' will be determined by the strategy implementation.",
								"params": {
									"_data": "The data to use to allocate to the recipient",
									"_sender": "The address of the sender"
								}
							},
							"distribute(address[],bytes,address)": {
								"details": "most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference this contract will need to track the amount paid already, so that it doesn't double pay."
							},
							"getAllo()": {
								"returns": {
									"_0": "The 'Allo' contract"
								}
							},
							"getPayouts(address[],bytes[])": {
								"details": "Input the values you would send to distribute(), get the amounts each recipient in the array would receive.      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.",
								"params": {
									"_data": "The encoded data",
									"_recipientIds": "The IDs of the recipients"
								}
							},
							"getPoolAmount()": {
								"returns": {
									"_0": "The balance of the pool"
								}
							},
							"getPoolId()": {
								"returns": {
									"_0": "The ID of the pool"
								}
							},
							"getRecipientStatus(address)": {
								"params": {
									"_recipientId": "The ID of the recipient"
								},
								"returns": {
									"_0": "The status of the recipient"
								}
							},
							"getStrategyId()": {
								"returns": {
									"_0": "The ID of the strategy"
								}
							},
							"increasePoolAmount(uint256)": {
								"params": {
									"_amount": "The amount to increase the pool by"
								}
							},
							"initialize(uint256,bytes)": {
								"params": {
									"_data": "The encoded data",
									"_poolId": "The ID of the pool"
								}
							},
							"isPoolActive()": {
								"returns": {
									"_0": "Whether the pool is active or not"
								}
							},
							"isValidAllocator(address)": {
								"params": {
									"_allocator": "The allocator to check"
								},
								"returns": {
									"_0": "Whether the allocator is valid or not"
								}
							},
							"registerRecipient(bytes,address)": {
								"details": "Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional      functions should be added to allow the owner to check this. The owner could also check attestations directly      and then accept for instance. The '_data' will be determined by the strategy implementation.",
								"params": {
									"_data": "The data to use to register the recipient",
									"_sender": "The address of the sender"
								},
								"returns": {
									"_0": "The ID of the recipient"
								}
							}
						},
						"title": "IStrategy Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allocate(bytes,address)": "ef2920fc",
							"distribute(address[],bytes,address)": "0a6f0ee9",
							"getAllo()": "15cc481e",
							"getPayouts(address[],bytes[])": "b2b878d0",
							"getPoolAmount()": "4ab4ba42",
							"getPoolId()": "38fff2d0",
							"getRecipientStatus(address)": "eb11af93",
							"getStrategyId()": "42fda9c7",
							"increasePoolAmount(uint256)": "f5b0dfb7",
							"initialize(uint256,bytes)": "edd146cc",
							"isPoolActive()": "df868ed3",
							"isValidAllocator(address)": "4d31d087",
							"registerRecipient(bytes,address)": "2bbe0cae"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"PoolActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllo\",\"outputs\":[{\"internalType\":\"contract IAllo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"getPayouts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategy.PayoutSummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientId\",\"type\":\"address\"}],\"name\":\"getRecipientStatus\",\"outputs\":[{\"internalType\":\"enum IStrategy.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increasePoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"}],\"name\":\"isValidAllocator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"events\":{\"Allocated(address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount allocated\",\"recipientId\":\"The ID of the recipient\",\"token\":\"The token allocated\"}},\"Distributed(address,address,uint256,address)\":{\"params\":{\"amount\":\"The amount distributed\",\"recipientAddress\":\"The recipient\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}},\"Initialized(uint256,bytes)\":{\"params\":{\"data\":\"The data passed to the 'initialize' function\",\"poolId\":\"The ID of the pool\"}},\"PoolActive(bool)\":{\"params\":{\"active\":\"The status of the pool\"}},\"Registered(address,bytes,address)\":{\"params\":{\"data\":\"The data passed to the 'registerRecipient' function\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}}},\"kind\":\"dev\",\"methods\":{\"allocate(bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to allocate to the recipient\",\"_sender\":\"The address of the sender\"}},\"distribute(address[],bytes,address)\":{\"details\":\"most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference this contract will need to track the amount paid already, so that it doesn't double pay.\"},\"getAllo()\":{\"returns\":{\"_0\":\"The 'Allo' contract\"}},\"getPayouts(address[],bytes[])\":{\"details\":\"Input the values you would send to distribute(), get the amounts each recipient in the array would receive.      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\",\"params\":{\"_data\":\"The encoded data\",\"_recipientIds\":\"The IDs of the recipients\"}},\"getPoolAmount()\":{\"returns\":{\"_0\":\"The balance of the pool\"}},\"getPoolId()\":{\"returns\":{\"_0\":\"The ID of the pool\"}},\"getRecipientStatus(address)\":{\"params\":{\"_recipientId\":\"The ID of the recipient\"},\"returns\":{\"_0\":\"The status of the recipient\"}},\"getStrategyId()\":{\"returns\":{\"_0\":\"The ID of the strategy\"}},\"increasePoolAmount(uint256)\":{\"params\":{\"_amount\":\"The amount to increase the pool by\"}},\"initialize(uint256,bytes)\":{\"params\":{\"_data\":\"The encoded data\",\"_poolId\":\"The ID of the pool\"}},\"isPoolActive()\":{\"returns\":{\"_0\":\"Whether the pool is active or not\"}},\"isValidAllocator(address)\":{\"params\":{\"_allocator\":\"The allocator to check\"},\"returns\":{\"_0\":\"Whether the allocator is valid or not\"}},\"registerRecipient(bytes,address)\":{\"details\":\"Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional      functions should be added to allow the owner to check this. The owner could also check attestations directly      and then accept for instance. The '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to register the recipient\",\"_sender\":\"The address of the sender\"},\"returns\":{\"_0\":\"The ID of the recipient\"}}},\"title\":\"IStrategy Interface\",\"version\":1},\"userdoc\":{\"events\":{\"Allocated(address,uint256,address,address)\":{\"notice\":\"Emitted when a recipient is allocated to.\"},\"Distributed(address,address,uint256,address)\":{\"notice\":\"Emitted when tokens are distributed.\"},\"Initialized(uint256,bytes)\":{\"notice\":\"Emitted when strategy is initialized.\"},\"PoolActive(bool)\":{\"notice\":\"Emitted when pool is set to active status.\"},\"Registered(address,bytes,address)\":{\"notice\":\"Emitted when a recipient is registered.\"}},\"kind\":\"user\",\"methods\":{\"allocate(bytes,address)\":{\"notice\":\"This will allocate to a recipient.\"},\"distribute(address[],bytes,address)\":{\"notice\":\"This will distribute funds (tokens) to recipients.\"},\"getAllo()\":{\"notice\":\"Getter for the address of the Allo contract.\"},\"getPayouts(address[],bytes[])\":{\"notice\":\"Checks the amount allocated to a recipient for distribution.\"},\"getPoolAmount()\":{\"notice\":\"Checks the amount of tokens in the pool.\"},\"getPoolId()\":{\"notice\":\"Getter for the 'poolId' for this strategy.\"},\"getRecipientStatus(address)\":{\"notice\":\"Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those      since there is no need for Pending or Rejected.\"},\"getStrategyId()\":{\"notice\":\"Getter for the 'id' of the strategy.\"},\"increasePoolAmount(uint256)\":{\"notice\":\"Increases the balance of the pool.\"},\"initialize(uint256,bytes)\":{\"notice\":\"@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize().\"},\"isPoolActive()\":{\"notice\":\"whether pool is active.\"},\"isValidAllocator(address)\":{\"notice\":\"Checks whether a allocator is valid or not, will usually be true for all strategies      and will depend on the strategy implementation.\"},\"registerRecipient(bytes,address)\":{\"notice\":\"This will register a recipient, set their status (and any other strategy specific values), and         return the ID of the recipient.\"}},\"notice\":\"BaseStrategy is the base contract that all strategies should inherit from and uses this interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/contracts/core/interfaces/IStrategy.sol\":\"IStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/contracts/core/interfaces/IAllo.sol\":{\"keccak256\":\"0x7bc06a262ffe042092c58949452b043546788a66616bec2a40f55975fd537c1d\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7420316020e25430b295e876562932810f274c7c651cbda8c09989a3ad9837d2\",\"dweb:/ipfs/QmfNx7MHNK9t4ReeA71CBUXHEhYNj6suDYHY7pjqUDc1T3\"]},\"lib/allo-v2/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"lib/allo-v2/contracts/core/interfaces/IStrategy.sol\":{\"keccak256\":\"0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487\",\"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH\"]},\"lib/allo-v2/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://2cc5507da2550ab9bfa0fbb263e703f9e70b831190bb7b2bcdbb231cab49795c\",\"dweb:/ipfs/QmQXCD8v2HppXAX17aH49JvNyyfDYzGMrg63QNabUEXPpn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Allocated(address,uint256,address,address)": {
								"notice": "Emitted when a recipient is allocated to."
							},
							"Distributed(address,address,uint256,address)": {
								"notice": "Emitted when tokens are distributed."
							},
							"Initialized(uint256,bytes)": {
								"notice": "Emitted when strategy is initialized."
							},
							"PoolActive(bool)": {
								"notice": "Emitted when pool is set to active status."
							},
							"Registered(address,bytes,address)": {
								"notice": "Emitted when a recipient is registered."
							}
						},
						"kind": "user",
						"methods": {
							"allocate(bytes,address)": {
								"notice": "This will allocate to a recipient."
							},
							"distribute(address[],bytes,address)": {
								"notice": "This will distribute funds (tokens) to recipients."
							},
							"getAllo()": {
								"notice": "Getter for the address of the Allo contract."
							},
							"getPayouts(address[],bytes[])": {
								"notice": "Checks the amount allocated to a recipient for distribution."
							},
							"getPoolAmount()": {
								"notice": "Checks the amount of tokens in the pool."
							},
							"getPoolId()": {
								"notice": "Getter for the 'poolId' for this strategy."
							},
							"getRecipientStatus(address)": {
								"notice": "Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those      since there is no need for Pending or Rejected."
							},
							"getStrategyId()": {
								"notice": "Getter for the 'id' of the strategy."
							},
							"increasePoolAmount(uint256)": {
								"notice": "Increases the balance of the pool."
							},
							"initialize(uint256,bytes)": {
								"notice": "@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize()."
							},
							"isPoolActive()": {
								"notice": "whether pool is active."
							},
							"isValidAllocator(address)": {
								"notice": "Checks whether a allocator is valid or not, will usually be true for all strategies      and will depend on the strategy implementation."
							},
							"registerRecipient(bytes,address)": {
								"notice": "This will register a recipient, set their status (and any other strategy specific values), and         return the ID of the recipient."
							}
						},
						"notice": "BaseStrategy is the base contract that all strategies should inherit from and uses this interface.",
						"version": 1
					}
				}
			},
			"lib/allo-v2/contracts/core/libraries/Errors.sol": {
				"Errors": {
					"abi": [
						{
							"inputs": [],
							"name": "ALLOCATION_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ALLOCATION_NOT_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ALLOCATION_NOT_ENDED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ALREADY_INITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ANCHOR_ERROR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ARRAY_MISMATCH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_FEE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_METADATA",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_REGISTRATION",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "IS_APPROVED_STRATEGY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MISMATCH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NONCE_NOT_AVAILABLE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NON_ZERO_VALUE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_APPROVED_STRATEGY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_ENOUGH_FUNDS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_IMPLEMENTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_INITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_PENDING_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_INACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RECIPIENT_ALREADY_ACCEPTED",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								}
							],
							"name": "RECIPIENT_ERROR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RECIPIENT_NOT_ACCEPTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "REGISTRATION_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "REGISTRATION_NOT_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "UNAUTHORIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZERO_ADDRESS",
							"type": "error"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @KurtMerbeth <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>",
						"errors": {
							"ANCHOR_ERROR()": [
								{
									"details": "Thrown if the anchor creation fails"
								}
							],
							"NONCE_NOT_AVAILABLE()": [
								{
									"details": "Thrown when the nonce passed has been used or not available"
								}
							],
							"NOT_PENDING_OWNER()": [
								{
									"details": "Thrown when the 'msg.sender' is not the pending owner on ownership transfer"
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "Errors",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/allo-v2/contracts/core/libraries/Errors.sol\":4269:7313  contract Errors {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/allo-v2/contracts/core/libraries/Errors.sol\":4269:7313  contract Errors {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204c6a0481fb255e8f1bde95e0261590c22f80781bcbd6a202b061620bab1e984c64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601357603a908160198239f35b600080fdfe600080fdfea26469706673582212204c6a0481fb255e8f1bde95e0261590c22f80781bcbd6a202b061620bab1e984c64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x13 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x19 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C PUSH11 0x481FB255E8F1BDE95E026 ISZERO SWAP1 0xC2 0x2F DUP1 PUSH25 0x1BCBD6A202B061620BAB1E984C64736F6C6343000813003300 ",
							"sourceMap": "4269:3044:3:-:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea26469706673582212204c6a0481fb255e8f1bde95e0261590c22f80781bcbd6a202b061620bab1e984c64736f6c63430008130033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C PUSH11 0x481FB255E8F1BDE95E026 ISZERO SWAP1 0xC2 0x2F DUP1 PUSH25 0x1BCBD6A202B061620BAB1E984C64736F6C6343000813003300 ",
							"sourceMap": "4269:3044:3:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "69",
								"totalCost": "11669"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 4269,
									"end": 7313,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "RETURN",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 4269,
									"end": 7313,
									"name": "REVERT",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204c6a0481fb255e8f1bde95e0261590c22f80781bcbd6a202b061620bab1e984c64736f6c63430008130033",
									".code": [
										{
											"begin": 4269,
											"end": 7313,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4269,
											"end": 7313,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4269,
											"end": 7313,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"lib/allo-v2/contracts/core/interfaces/IAllo.sol",
								"lib/allo-v2/contracts/core/interfaces/IRegistry.sol",
								"lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
								"lib/allo-v2/contracts/core/libraries/Errors.sol",
								"lib/allo-v2/contracts/core/libraries/Metadata.sol",
								"lib/allo-v2/contracts/core/libraries/Native.sol",
								"lib/allo-v2/contracts/core/libraries/Transfer.sol",
								"lib/allo-v2/contracts/strategies/BaseStrategy.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol",
								"src/SNDRStrategy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ALLOCATION_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ENDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALREADY_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ANCHOR_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ARRAY_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_METADATA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_REGISTRATION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IS_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NONCE_NOT_AVAILABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NON_ZERO_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ENOUGH_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_IMPLEMENTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_PENDING_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_INACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_ALREADY_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"}],\"name\":\"RECIPIENT_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_NOT_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REGISTRATION_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REGISTRATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @KurtMerbeth <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>\",\"errors\":{\"ANCHOR_ERROR()\":[{\"details\":\"Thrown if the anchor creation fails\"}],\"NONCE_NOT_AVAILABLE()\":[{\"details\":\"Thrown when the nonce passed has been used or not available\"}],\"NOT_PENDING_OWNER()\":[{\"details\":\"Thrown when the 'msg.sender' is not the pending owner on ownership transfer\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"Errors\",\"version\":1},\"userdoc\":{\"errors\":{\"ALLOCATION_ACTIVE()\":[{\"notice\":\"Thrown when the allocation is active.\"}],\"ALLOCATION_NOT_ACTIVE()\":[{\"notice\":\"Thrown when the allocation is not active.\"}],\"ALLOCATION_NOT_ENDED()\":[{\"notice\":\"Thrown when the allocation is not ended.\"}],\"ALREADY_INITIALIZED()\":[{\"notice\":\"Thrown when data is already intialized\"}],\"ARRAY_MISMATCH()\":[{\"notice\":\"Thrown when two arrays length are not equal\"}],\"INVALID()\":[{\"notice\":\"Thrown as a general error when input / data is invalid\"}],\"INVALID_ADDRESS()\":[{\"notice\":\"Thrown when an invalid address is used\"}],\"INVALID_FEE()\":[{\"notice\":\"Thrown when the fee is below 1e18 which is the fee percentage denominator\"}],\"INVALID_METADATA()\":[{\"notice\":\"Thrown when the metadata is invalid.\"}],\"INVALID_REGISTRATION()\":[{\"notice\":\"Thrown when the registration is invalid.\"}],\"IS_APPROVED_STRATEGY()\":[{\"notice\":\"Thrown when the strategy is approved and should be cloned\"}],\"MISMATCH()\":[{\"notice\":\"Thrown when mismatch in decoding data\"}],\"NON_ZERO_VALUE()\":[{\"notice\":\"Thrown when the value is non-zero\"}],\"NOT_APPROVED_STRATEGY()\":[{\"notice\":\"Thrown when the strategy is not approved\"}],\"NOT_ENOUGH_FUNDS()\":[{\"notice\":\"Thrown when not enough funds are available\"}],\"NOT_IMPLEMENTED()\":[{\"notice\":\"Thrown when the function is not implemented\"}],\"NOT_INITIALIZED()\":[{\"notice\":\"Thrown when data is yet to be initialized\"}],\"POOL_ACTIVE()\":[{\"notice\":\"Thrown when a pool is already active\"}],\"POOL_INACTIVE()\":[{\"notice\":\"Thrown when a pool is inactive\"}],\"RECIPIENT_ALREADY_ACCEPTED()\":[{\"notice\":\"Thrown when recipient is already accepted.\"}],\"RECIPIENT_ERROR(address)\":[{\"notice\":\"Thrown when there is an error in recipient.\"}],\"RECIPIENT_NOT_ACCEPTED()\":[{\"notice\":\"Thrown when the recipient is not accepted.\"}],\"REGISTRATION_ACTIVE()\":[{\"notice\":\"Thrown when registration is active.\"}],\"REGISTRATION_NOT_ACTIVE()\":[{\"notice\":\"Thrown when registration is not active.\"}],\"UNAUTHORIZED()\":[{\"notice\":\"Thrown when user is not authorized\"}],\"ZERO_ADDRESS()\":[{\"notice\":\"Thrown when address is the zero address\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Library containing all custom errors the protocol may revert with.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/contracts/core/libraries/Errors.sol\":\"Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/contracts/core/libraries/Errors.sol\":{\"keccak256\":\"0x67e3c1109948a92cb3a01e8c2325c5f1b748ecbd4c9cd5bee34e81fa737f77ea\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://9603d3f1c4bb4b44a55663e71688a9d10786038e5dfa5039aa354572af1a53c3\",\"dweb:/ipfs/QmWNxsPH9YaJJkFiiU6oJ642i5kHxPzpRYfR5H8zSH4KaP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"ALLOCATION_ACTIVE()": [
								{
									"notice": "Thrown when the allocation is active."
								}
							],
							"ALLOCATION_NOT_ACTIVE()": [
								{
									"notice": "Thrown when the allocation is not active."
								}
							],
							"ALLOCATION_NOT_ENDED()": [
								{
									"notice": "Thrown when the allocation is not ended."
								}
							],
							"ALREADY_INITIALIZED()": [
								{
									"notice": "Thrown when data is already intialized"
								}
							],
							"ARRAY_MISMATCH()": [
								{
									"notice": "Thrown when two arrays length are not equal"
								}
							],
							"INVALID()": [
								{
									"notice": "Thrown as a general error when input / data is invalid"
								}
							],
							"INVALID_ADDRESS()": [
								{
									"notice": "Thrown when an invalid address is used"
								}
							],
							"INVALID_FEE()": [
								{
									"notice": "Thrown when the fee is below 1e18 which is the fee percentage denominator"
								}
							],
							"INVALID_METADATA()": [
								{
									"notice": "Thrown when the metadata is invalid."
								}
							],
							"INVALID_REGISTRATION()": [
								{
									"notice": "Thrown when the registration is invalid."
								}
							],
							"IS_APPROVED_STRATEGY()": [
								{
									"notice": "Thrown when the strategy is approved and should be cloned"
								}
							],
							"MISMATCH()": [
								{
									"notice": "Thrown when mismatch in decoding data"
								}
							],
							"NON_ZERO_VALUE()": [
								{
									"notice": "Thrown when the value is non-zero"
								}
							],
							"NOT_APPROVED_STRATEGY()": [
								{
									"notice": "Thrown when the strategy is not approved"
								}
							],
							"NOT_ENOUGH_FUNDS()": [
								{
									"notice": "Thrown when not enough funds are available"
								}
							],
							"NOT_IMPLEMENTED()": [
								{
									"notice": "Thrown when the function is not implemented"
								}
							],
							"NOT_INITIALIZED()": [
								{
									"notice": "Thrown when data is yet to be initialized"
								}
							],
							"POOL_ACTIVE()": [
								{
									"notice": "Thrown when a pool is already active"
								}
							],
							"POOL_INACTIVE()": [
								{
									"notice": "Thrown when a pool is inactive"
								}
							],
							"RECIPIENT_ALREADY_ACCEPTED()": [
								{
									"notice": "Thrown when recipient is already accepted."
								}
							],
							"RECIPIENT_ERROR(address)": [
								{
									"notice": "Thrown when there is an error in recipient."
								}
							],
							"RECIPIENT_NOT_ACCEPTED()": [
								{
									"notice": "Thrown when the recipient is not accepted."
								}
							],
							"REGISTRATION_ACTIVE()": [
								{
									"notice": "Thrown when registration is active."
								}
							],
							"REGISTRATION_NOT_ACTIVE()": [
								{
									"notice": "Thrown when registration is not active."
								}
							],
							"UNAUTHORIZED()": [
								{
									"notice": "Thrown when user is not authorized"
								}
							],
							"ZERO_ADDRESS()": [
								{
									"notice": "Thrown when address is the zero address"
								}
							]
						},
						"kind": "user",
						"methods": {},
						"notice": "Library containing all custom errors the protocol may revert with.",
						"version": 1
					}
				}
			},
			"lib/allo-v2/contracts/core/libraries/Native.sol": {
				"Native": {
					"abi": [
						{
							"inputs": [],
							"name": "NATIVE",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"kind": "dev",
						"methods": {},
						"title": "Native token information",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/allo-v2/contracts/core/libraries/Native.sol\":4346:4490  contract Native {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/allo-v2/contracts/core/libraries/Native.sol\":4346:4490  contract Native {... */\n      0x80\n      dup1\n      0x40\n      mstore\n      jumpi(tag_1, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_1:\n      0x00\n      swap1\n      dup2\n      calldataload\n      0xe0\n      shr\n      0xa0cf0aea\n      eq\n      tag_3\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_3:\n      jumpi(tag_7, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_7\n      jumpi\n      dup1\n        /* \"lib/allo-v2/contracts/core/libraries/Native.sol\":4445:4487  0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE */\n      0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n        /* \"lib/allo-v2/contracts/core/libraries/Native.sol\":4346:4490  contract Native {... */\n      0x20\n      swap3\n      mstore\n      return\n    tag_7:\n      pop\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220eb9add5951ad461207cde1165c1d9595442bbd11f8fb1f8354dfb460e59e826964736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601457608c908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63a0cf0aea14602857600080fd5b34605257816003193601126052578073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60209252f35b5080fdfea2646970667358221220eb9add5951ad461207cde1165c1d9595442bbd11f8fb1f8354dfb460e59e826964736f6c63430008130033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x14 JUMPI PUSH1 0x8C SWAP1 DUP2 PUSH2 0x1A DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA0CF0AEA EQ PUSH1 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x52 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH1 0x52 JUMPI DUP1 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x20 SWAP3 MSTORE RETURN JUMPDEST POP DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB SWAP11 0xDD MSIZE MLOAD 0xAD CHAINID SLT SMOD 0xCD 0xE1 AND 0x5C SAR SWAP6 SWAP6 PREVRANDAO 0x2B 0xBD GT 0xF8 0xFB 0x1F DUP4 SLOAD 0xDF 0xB4 PUSH1 0xE5 SWAP15 DUP3 PUSH10 0x64736F6C634300081300 CALLER ",
							"sourceMap": "4346:144:5:-:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080806040526004361015601257600080fd5b600090813560e01c63a0cf0aea14602857600080fd5b34605257816003193601126052578073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60209252f35b5080fdfea2646970667358221220eb9add5951ad461207cde1165c1d9595442bbd11f8fb1f8354dfb460e59e826964736f6c63430008130033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA0CF0AEA EQ PUSH1 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x52 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH1 0x52 JUMPI DUP1 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x20 SWAP3 MSTORE RETURN JUMPDEST POP DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB SWAP11 0xDD MSIZE MLOAD 0xAD CHAINID SLT SMOD 0xCD 0xE1 AND 0x5C SAR SWAP6 SWAP6 PREVRANDAO 0x2B 0xBD GT 0xF8 0xFB 0x1F DUP4 SLOAD 0xDF 0xB4 PUSH1 0xE5 SWAP15 DUP3 PUSH10 0x64736F6C634300081300 CALLER ",
							"sourceMap": "4346:144:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4445:42;4346:144;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "28000",
								"executionCost": "87",
								"totalCost": "28087"
							},
							"external": {
								"NATIVE()": "150"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 4346,
									"end": 4490,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "RETURN",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4346,
									"end": 4490,
									"name": "REVERT",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220eb9add5951ad461207cde1165c1d9595442bbd11f8fb1f8354dfb460e59e826964736f6c63430008130033",
									".code": [
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "A0CF0AEA"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4445,
											"end": 4487,
											"name": "PUSH",
											"source": 5,
											"value": "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4346,
											"end": 4490,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"lib/allo-v2/contracts/core/interfaces/IAllo.sol",
								"lib/allo-v2/contracts/core/interfaces/IRegistry.sol",
								"lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
								"lib/allo-v2/contracts/core/libraries/Errors.sol",
								"lib/allo-v2/contracts/core/libraries/Metadata.sol",
								"lib/allo-v2/contracts/core/libraries/Native.sol",
								"lib/allo-v2/contracts/core/libraries/Transfer.sol",
								"lib/allo-v2/contracts/strategies/BaseStrategy.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol",
								"src/SNDRStrategy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"NATIVE()": "a0cf0aea"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Native token information\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"NATIVE()\":{\"notice\":\"Address of the native token\"}},\"notice\":\"This is used to define the address of the native token for the protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/contracts/core/libraries/Native.sol\":\"Native\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/contracts/core/libraries/Native.sol\":{\"keccak256\":\"0x23dacace24a8c570a659dcc7e52fca2d39cc7577c6cfa674820cafaf194b29d5\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0727880a600b1803f02b58ad002938462dc61aacf841f5e1ee38f296fdd67e8a\",\"dweb:/ipfs/QmdrEiJxFFnUfn2QUNxRAUMS1qwCnRtGeWPChaGzhAkRnv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"NATIVE()": {
								"notice": "Address of the native token"
							}
						},
						"notice": "This is used to define the address of the native token for the protocol",
						"version": 1
					}
				}
			},
			"lib/allo-v2/contracts/core/libraries/Transfer.sol": {
				"Transfer": {
					"abi": [
						{
							"inputs": [],
							"name": "AMOUNT_MISMATCH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NATIVE",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"details": "Handles the transfer of tokens to an address",
						"kind": "dev",
						"methods": {},
						"title": "Transfer contract",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/allo-v2/contracts/core/libraries/Transfer.sol\":4513:7537  contract Transfer is Native {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/allo-v2/contracts/core/libraries/Transfer.sol\":4513:7537  contract Transfer is Native {... */\n      0x80\n      dup1\n      0x40\n      mstore\n      jumpi(tag_1, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_1:\n      0x00\n      swap1\n      dup2\n      calldataload\n      0xe0\n      shr\n      0xa0cf0aea\n      eq\n      tag_3\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_3:\n      jumpi(tag_7, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_7\n      jumpi\n      dup1\n        /* \"lib/allo-v2/contracts/core/libraries/Native.sol\":4445:4487  0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE */\n      0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n        /* \"lib/allo-v2/contracts/core/libraries/Transfer.sol\":4513:7537  contract Transfer is Native {... */\n      0x20\n      swap3\n      mstore\n      return\n    tag_7:\n      pop\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cc22f875fd56462a4d9dbd9a8f1efb295b6614975dbf8005886771deb0f8290c64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601457608c908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63a0cf0aea14602857600080fd5b34605257816003193601126052578073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60209252f35b5080fdfea2646970667358221220cc22f875fd56462a4d9dbd9a8f1efb295b6614975dbf8005886771deb0f8290c64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x14 JUMPI PUSH1 0x8C SWAP1 DUP2 PUSH2 0x1A DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA0CF0AEA EQ PUSH1 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x52 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH1 0x52 JUMPI DUP1 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x20 SWAP3 MSTORE RETURN JUMPDEST POP DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x22 0xF8 PUSH22 0xFD56462A4D9DBD9A8F1EFB295B6614975DBF80058867 PUSH18 0xDEB0F8290C64736F6C634300081300330000 ",
							"sourceMap": "4513:3024:6:-:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080806040526004361015601257600080fd5b600090813560e01c63a0cf0aea14602857600080fd5b34605257816003193601126052578073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60209252f35b5080fdfea2646970667358221220cc22f875fd56462a4d9dbd9a8f1efb295b6614975dbf8005886771deb0f8290c64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA0CF0AEA EQ PUSH1 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x52 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH1 0x52 JUMPI DUP1 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x20 SWAP3 MSTORE RETURN JUMPDEST POP DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x22 0xF8 PUSH22 0xFD56462A4D9DBD9A8F1EFB295B6614975DBF80058867 PUSH18 0xDEB0F8290C64736F6C634300081300330000 ",
							"sourceMap": "4513:3024:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4445:42:5;4513:3024:6;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "28000",
								"executionCost": "87",
								"totalCost": "28087"
							},
							"external": {
								"NATIVE()": "150"
							},
							"internal": {
								"_getBalance(address,address)": "infinite",
								"_transferAmount(address,address,uint256)": "infinite",
								"_transferAmountFrom(address,struct Transfer.TransferData memory)": "infinite",
								"_transferAmountsFrom(address,struct Transfer.TransferData memory[] memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 4513,
									"end": 7537,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "RETURN",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 4513,
									"end": 7537,
									"name": "REVERT",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cc22f875fd56462a4d9dbd9a8f1efb295b6614975dbf8005886771deb0f8290c64736f6c63430008130033",
									".code": [
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "A0CF0AEA"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4445,
											"end": 4487,
											"name": "PUSH",
											"source": 5,
											"value": "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4513,
											"end": 7537,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"lib/allo-v2/contracts/core/interfaces/IAllo.sol",
								"lib/allo-v2/contracts/core/interfaces/IRegistry.sol",
								"lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
								"lib/allo-v2/contracts/core/libraries/Errors.sol",
								"lib/allo-v2/contracts/core/libraries/Metadata.sol",
								"lib/allo-v2/contracts/core/libraries/Native.sol",
								"lib/allo-v2/contracts/core/libraries/Transfer.sol",
								"lib/allo-v2/contracts/strategies/BaseStrategy.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol",
								"src/SNDRStrategy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"NATIVE()": "a0cf0aea"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AMOUNT_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"details\":\"Handles the transfer of tokens to an address\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Transfer contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AMOUNT_MISMATCH()\":[{\"notice\":\"Thrown when the amount of tokens sent does not match the amount of tokens expected\"}]},\"kind\":\"user\",\"methods\":{\"NATIVE()\":{\"notice\":\"Address of the native token\"}},\"notice\":\"A helper contract to transfer tokens within Allo protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/contracts/core/libraries/Transfer.sol\":\"Transfer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/contracts/core/libraries/Native.sol\":{\"keccak256\":\"0x23dacace24a8c570a659dcc7e52fca2d39cc7577c6cfa674820cafaf194b29d5\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0727880a600b1803f02b58ad002938462dc61aacf841f5e1ee38f296fdd67e8a\",\"dweb:/ipfs/QmdrEiJxFFnUfn2QUNxRAUMS1qwCnRtGeWPChaGzhAkRnv\"]},\"lib/allo-v2/contracts/core/libraries/Transfer.sol\":{\"keccak256\":\"0x99f4e3bfd5cea354c2ef9e9774d7bdb2310faec5e7a21a619d87377b40eba135\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://f84412d189fa7c6ea3656409af156fad084b1a541850798da3e76549e3124588\",\"dweb:/ipfs/QmT3roFjt41PX7zgjT7KdThFU37Fh7F6vEyKooSzpfTBvq\"]},\"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0x06d3261d13cf5a08f9bcda05e17be0a6a0380193116298fdf8eabf9bf80d3624\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96965a8a2b1bd2d6cff4a8f78bcb33b0de8848834f8e4be28c03609ae08e9298\",\"dweb:/ipfs/QmSoNDxaEozMZgNdVEygfEvnk26Tu4UeFeapvtMsoUFftt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"AMOUNT_MISMATCH()": [
								{
									"notice": "Thrown when the amount of tokens sent does not match the amount of tokens expected"
								}
							]
						},
						"kind": "user",
						"methods": {
							"NATIVE()": {
								"notice": "Address of the native token"
							}
						},
						"notice": "A helper contract to transfer tokens within Allo protocol",
						"version": 1
					}
				}
			},
			"lib/allo-v2/contracts/strategies/BaseStrategy.sol": {
				"BaseStrategy": {
					"abi": [
						{
							"inputs": [],
							"name": "ALLOCATION_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ALLOCATION_NOT_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ALLOCATION_NOT_ENDED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ALREADY_INITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "AMOUNT_MISMATCH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ANCHOR_ERROR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ARRAY_MISMATCH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_FEE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_METADATA",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_REGISTRATION",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "IS_APPROVED_STRATEGY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MISMATCH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NONCE_NOT_AVAILABLE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NON_ZERO_VALUE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_APPROVED_STRATEGY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_ENOUGH_FUNDS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_IMPLEMENTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_INITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_PENDING_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_INACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RECIPIENT_ALREADY_ACCEPTED",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								}
							],
							"name": "RECIPIENT_ERROR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RECIPIENT_NOT_ACCEPTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "REGISTRATION_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "REGISTRATION_NOT_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "UNAUTHORIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Allocated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipientAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Distributed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"name": "PoolActive",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Registered",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "NATIVE",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllo",
							"outputs": [
								{
									"internalType": "contract IAllo",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes[]",
									"name": "_data",
									"type": "bytes[]"
								}
							],
							"name": "getPayouts",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "recipientAddress",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										}
									],
									"internalType": "struct IStrategy.PayoutSummary[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_recipientId",
									"type": "address"
								}
							],
							"name": "getRecipientStatus",
							"outputs": [
								{
									"internalType": "enum IStrategy.Status",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getStrategyId",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "increasePoolAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isPoolActive",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_allocator",
									"type": "address"
								}
							],
							"name": "isValidAllocator",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "registerRecipient",
							"outputs": [
								{
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"details": "This contract is implemented by all strategies.",
						"errors": {
							"ANCHOR_ERROR()": [
								{
									"details": "Thrown if the anchor creation fails"
								}
							],
							"NONCE_NOT_AVAILABLE()": [
								{
									"details": "Thrown when the nonce passed has been used or not available"
								}
							],
							"NOT_PENDING_OWNER()": [
								{
									"details": "Thrown when the 'msg.sender' is not the pending owner on ownership transfer"
								}
							]
						},
						"events": {
							"Allocated(address,uint256,address,address)": {
								"params": {
									"amount": "The amount allocated",
									"recipientId": "The ID of the recipient",
									"token": "The token allocated"
								}
							},
							"Distributed(address,address,uint256,address)": {
								"params": {
									"amount": "The amount distributed",
									"recipientAddress": "The recipient",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							},
							"Initialized(uint256,bytes)": {
								"params": {
									"data": "The data passed to the 'initialize' function",
									"poolId": "The ID of the pool"
								}
							},
							"PoolActive(bool)": {
								"params": {
									"active": "The status of the pool"
								}
							},
							"Registered(address,bytes,address)": {
								"params": {
									"data": "The data passed to the 'registerRecipient' function",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allocate(bytes,address)": {
								"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
								"params": {
									"_data": "The data to use to allocate to the recipient",
									"_sender": "The address of the sender"
								}
							},
							"constructor": {
								"params": {
									"_allo": "Address of the Allo contract.",
									"_name": "Name of the strategy"
								}
							},
							"distribute(address[],bytes,address)": {
								"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
								"params": {
									"_data": "The data to use to distribute to the recipients",
									"_recipientIds": "The IDs of the recipients",
									"_sender": "The address of the sender"
								}
							},
							"getAllo()": {
								"returns": {
									"_0": "The Allo contract"
								}
							},
							"getPayouts(address[],bytes[])": {
								"details": "The encoded '_data' will be determined by the strategy implementation.",
								"params": {
									"_data": "The data to use to get the payout summary for the recipients",
									"_recipientIds": "The IDs of the recipients"
								},
								"returns": {
									"_0": "The payout summary for the recipients"
								}
							},
							"getPoolAmount()": {
								"returns": {
									"_0": "The balance of the pool"
								}
							},
							"getPoolId()": {
								"returns": {
									"_0": "The ID of the pool"
								}
							},
							"getRecipientStatus(address)": {
								"params": {
									"_recipientId": "The ID of the recipient"
								},
								"returns": {
									"_0": "The status of the recipient"
								}
							},
							"getStrategyId()": {
								"returns": {
									"_0": "The ID of the strategy"
								}
							},
							"increasePoolAmount(uint256)": {
								"details": "Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.",
								"params": {
									"_amount": "The amount to increase the pool by"
								}
							},
							"initialize(uint256,bytes)": {
								"params": {
									"_data": "The encoded data",
									"_poolId": "The ID of the pool"
								}
							},
							"isPoolActive()": {
								"returns": {
									"_0": "'true' if the pool is active, otherwise 'false'"
								}
							},
							"isValidAllocator(address)": {
								"details": "How the allocator is determined is up to the strategy implementation.",
								"params": {
									"_allocator": "The address to check if it is a valid allocator for the strategy."
								},
								"returns": {
									"_0": "'true' if the address is a valid allocator, 'false' otherwise"
								}
							},
							"registerRecipient(bytes,address)": {
								"details": "Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.",
								"params": {
									"_data": "The data to use to register the recipient",
									"_sender": "The address of the sender"
								},
								"returns": {
									"recipientId": "The recipientId"
								}
							}
						},
						"title": "BaseStrategy Contract",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"NATIVE()": "a0cf0aea",
							"allocate(bytes,address)": "ef2920fc",
							"distribute(address[],bytes,address)": "0a6f0ee9",
							"getAllo()": "15cc481e",
							"getPayouts(address[],bytes[])": "b2b878d0",
							"getPoolAmount()": "4ab4ba42",
							"getPoolId()": "38fff2d0",
							"getRecipientStatus(address)": "eb11af93",
							"getStrategyId()": "42fda9c7",
							"increasePoolAmount(uint256)": "f5b0dfb7",
							"initialize(uint256,bytes)": "edd146cc",
							"isPoolActive()": "df868ed3",
							"isValidAllocator(address)": "4d31d087",
							"registerRecipient(bytes,address)": "2bbe0cae"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ALLOCATION_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ENDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALREADY_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMOUNT_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ANCHOR_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ARRAY_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_METADATA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_REGISTRATION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IS_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NONCE_NOT_AVAILABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NON_ZERO_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ENOUGH_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_IMPLEMENTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_PENDING_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_INACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_ALREADY_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"}],\"name\":\"RECIPIENT_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_NOT_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REGISTRATION_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REGISTRATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"PoolActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllo\",\"outputs\":[{\"internalType\":\"contract IAllo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"getPayouts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategy.PayoutSummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientId\",\"type\":\"address\"}],\"name\":\"getRecipientStatus\",\"outputs\":[{\"internalType\":\"enum IStrategy.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increasePoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"}],\"name\":\"isValidAllocator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"details\":\"This contract is implemented by all strategies.\",\"errors\":{\"ANCHOR_ERROR()\":[{\"details\":\"Thrown if the anchor creation fails\"}],\"NONCE_NOT_AVAILABLE()\":[{\"details\":\"Thrown when the nonce passed has been used or not available\"}],\"NOT_PENDING_OWNER()\":[{\"details\":\"Thrown when the 'msg.sender' is not the pending owner on ownership transfer\"}]},\"events\":{\"Allocated(address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount allocated\",\"recipientId\":\"The ID of the recipient\",\"token\":\"The token allocated\"}},\"Distributed(address,address,uint256,address)\":{\"params\":{\"amount\":\"The amount distributed\",\"recipientAddress\":\"The recipient\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}},\"Initialized(uint256,bytes)\":{\"params\":{\"data\":\"The data passed to the 'initialize' function\",\"poolId\":\"The ID of the pool\"}},\"PoolActive(bool)\":{\"params\":{\"active\":\"The status of the pool\"}},\"Registered(address,bytes,address)\":{\"params\":{\"data\":\"The data passed to the 'registerRecipient' function\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}}},\"kind\":\"dev\",\"methods\":{\"allocate(bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to allocate to the recipient\",\"_sender\":\"The address of the sender\"}},\"constructor\":{\"params\":{\"_allo\":\"Address of the Allo contract.\",\"_name\":\"Name of the strategy\"}},\"distribute(address[],bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to distribute to the recipients\",\"_recipientIds\":\"The IDs of the recipients\",\"_sender\":\"The address of the sender\"}},\"getAllo()\":{\"returns\":{\"_0\":\"The Allo contract\"}},\"getPayouts(address[],bytes[])\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to get the payout summary for the recipients\",\"_recipientIds\":\"The IDs of the recipients\"},\"returns\":{\"_0\":\"The payout summary for the recipients\"}},\"getPoolAmount()\":{\"returns\":{\"_0\":\"The balance of the pool\"}},\"getPoolId()\":{\"returns\":{\"_0\":\"The ID of the pool\"}},\"getRecipientStatus(address)\":{\"params\":{\"_recipientId\":\"The ID of the recipient\"},\"returns\":{\"_0\":\"The status of the recipient\"}},\"getStrategyId()\":{\"returns\":{\"_0\":\"The ID of the strategy\"}},\"increasePoolAmount(uint256)\":{\"details\":\"Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.\",\"params\":{\"_amount\":\"The amount to increase the pool by\"}},\"initialize(uint256,bytes)\":{\"params\":{\"_data\":\"The encoded data\",\"_poolId\":\"The ID of the pool\"}},\"isPoolActive()\":{\"returns\":{\"_0\":\"'true' if the pool is active, otherwise 'false'\"}},\"isValidAllocator(address)\":{\"details\":\"How the allocator is determined is up to the strategy implementation.\",\"params\":{\"_allocator\":\"The address to check if it is a valid allocator for the strategy.\"},\"returns\":{\"_0\":\"'true' if the address is a valid allocator, 'false' otherwise\"}},\"registerRecipient(bytes,address)\":{\"details\":\"Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to register the recipient\",\"_sender\":\"The address of the sender\"},\"returns\":{\"recipientId\":\"The recipientId\"}}},\"title\":\"BaseStrategy Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ALLOCATION_ACTIVE()\":[{\"notice\":\"Thrown when the allocation is active.\"}],\"ALLOCATION_NOT_ACTIVE()\":[{\"notice\":\"Thrown when the allocation is not active.\"}],\"ALLOCATION_NOT_ENDED()\":[{\"notice\":\"Thrown when the allocation is not ended.\"}],\"ALREADY_INITIALIZED()\":[{\"notice\":\"Thrown when data is already intialized\"}],\"AMOUNT_MISMATCH()\":[{\"notice\":\"Thrown when the amount of tokens sent does not match the amount of tokens expected\"}],\"ARRAY_MISMATCH()\":[{\"notice\":\"Thrown when two arrays length are not equal\"}],\"INVALID()\":[{\"notice\":\"Thrown as a general error when input / data is invalid\"}],\"INVALID_ADDRESS()\":[{\"notice\":\"Thrown when an invalid address is used\"}],\"INVALID_FEE()\":[{\"notice\":\"Thrown when the fee is below 1e18 which is the fee percentage denominator\"}],\"INVALID_METADATA()\":[{\"notice\":\"Thrown when the metadata is invalid.\"}],\"INVALID_REGISTRATION()\":[{\"notice\":\"Thrown when the registration is invalid.\"}],\"IS_APPROVED_STRATEGY()\":[{\"notice\":\"Thrown when the strategy is approved and should be cloned\"}],\"MISMATCH()\":[{\"notice\":\"Thrown when mismatch in decoding data\"}],\"NON_ZERO_VALUE()\":[{\"notice\":\"Thrown when the value is non-zero\"}],\"NOT_APPROVED_STRATEGY()\":[{\"notice\":\"Thrown when the strategy is not approved\"}],\"NOT_ENOUGH_FUNDS()\":[{\"notice\":\"Thrown when not enough funds are available\"}],\"NOT_IMPLEMENTED()\":[{\"notice\":\"Thrown when the function is not implemented\"}],\"NOT_INITIALIZED()\":[{\"notice\":\"Thrown when data is yet to be initialized\"}],\"POOL_ACTIVE()\":[{\"notice\":\"Thrown when a pool is already active\"}],\"POOL_INACTIVE()\":[{\"notice\":\"Thrown when a pool is inactive\"}],\"RECIPIENT_ALREADY_ACCEPTED()\":[{\"notice\":\"Thrown when recipient is already accepted.\"}],\"RECIPIENT_ERROR(address)\":[{\"notice\":\"Thrown when there is an error in recipient.\"}],\"RECIPIENT_NOT_ACCEPTED()\":[{\"notice\":\"Thrown when the recipient is not accepted.\"}],\"REGISTRATION_ACTIVE()\":[{\"notice\":\"Thrown when registration is active.\"}],\"REGISTRATION_NOT_ACTIVE()\":[{\"notice\":\"Thrown when registration is not active.\"}],\"UNAUTHORIZED()\":[{\"notice\":\"Thrown when user is not authorized\"}],\"ZERO_ADDRESS()\":[{\"notice\":\"Thrown when address is the zero address\"}]},\"events\":{\"Allocated(address,uint256,address,address)\":{\"notice\":\"Emitted when a recipient is allocated to.\"},\"Distributed(address,address,uint256,address)\":{\"notice\":\"Emitted when tokens are distributed.\"},\"Initialized(uint256,bytes)\":{\"notice\":\"Emitted when strategy is initialized.\"},\"PoolActive(bool)\":{\"notice\":\"Emitted when pool is set to active status.\"},\"Registered(address,bytes,address)\":{\"notice\":\"Emitted when a recipient is registered.\"}},\"kind\":\"user\",\"methods\":{\"NATIVE()\":{\"notice\":\"Address of the native token\"},\"allocate(bytes,address)\":{\"notice\":\"Allocates to a recipient.\"},\"constructor\":{\"notice\":\"Constructor to set the Allo contract and \\\"strategyId'.\"},\"distribute(address[],bytes,address)\":{\"notice\":\"Distributes funds (tokens) to recipients.\"},\"getAllo()\":{\"notice\":\"Getter for the 'Allo' contract.\"},\"getPayouts(address[],bytes[])\":{\"notice\":\"Gets the payout summary for recipients.\"},\"getPoolAmount()\":{\"notice\":\"Getter for the 'poolAmount'.\"},\"getPoolId()\":{\"notice\":\"Getter for the 'poolId'.\"},\"getRecipientStatus(address)\":{\"notice\":\"Getter for the status of a recipient.\"},\"getStrategyId()\":{\"notice\":\"Getter for the 'strategyId'.\"},\"increasePoolAmount(uint256)\":{\"notice\":\"Increases the pool amount.\"},\"initialize(uint256,bytes)\":{\"notice\":\"@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize().\"},\"isPoolActive()\":{\"notice\":\"Getter for whether or not the pool is active.\"},\"isValidAllocator(address)\":{\"notice\":\"Checks if the '_allocator' is a valid allocator.\"},\"registerRecipient(bytes,address)\":{\"notice\":\"Registers a recipient.\"}},\"notice\":\"This contract is the base contract for all strategies\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":\"BaseStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/contracts/core/interfaces/IAllo.sol\":{\"keccak256\":\"0x7bc06a262ffe042092c58949452b043546788a66616bec2a40f55975fd537c1d\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7420316020e25430b295e876562932810f274c7c651cbda8c09989a3ad9837d2\",\"dweb:/ipfs/QmfNx7MHNK9t4ReeA71CBUXHEhYNj6suDYHY7pjqUDc1T3\"]},\"lib/allo-v2/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"lib/allo-v2/contracts/core/interfaces/IStrategy.sol\":{\"keccak256\":\"0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487\",\"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH\"]},\"lib/allo-v2/contracts/core/libraries/Errors.sol\":{\"keccak256\":\"0x67e3c1109948a92cb3a01e8c2325c5f1b748ecbd4c9cd5bee34e81fa737f77ea\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://9603d3f1c4bb4b44a55663e71688a9d10786038e5dfa5039aa354572af1a53c3\",\"dweb:/ipfs/QmWNxsPH9YaJJkFiiU6oJ642i5kHxPzpRYfR5H8zSH4KaP\"]},\"lib/allo-v2/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://2cc5507da2550ab9bfa0fbb263e703f9e70b831190bb7b2bcdbb231cab49795c\",\"dweb:/ipfs/QmQXCD8v2HppXAX17aH49JvNyyfDYzGMrg63QNabUEXPpn\"]},\"lib/allo-v2/contracts/core/libraries/Native.sol\":{\"keccak256\":\"0x23dacace24a8c570a659dcc7e52fca2d39cc7577c6cfa674820cafaf194b29d5\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0727880a600b1803f02b58ad002938462dc61aacf841f5e1ee38f296fdd67e8a\",\"dweb:/ipfs/QmdrEiJxFFnUfn2QUNxRAUMS1qwCnRtGeWPChaGzhAkRnv\"]},\"lib/allo-v2/contracts/core/libraries/Transfer.sol\":{\"keccak256\":\"0x99f4e3bfd5cea354c2ef9e9774d7bdb2310faec5e7a21a619d87377b40eba135\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://f84412d189fa7c6ea3656409af156fad084b1a541850798da3e76549e3124588\",\"dweb:/ipfs/QmT3roFjt41PX7zgjT7KdThFU37Fh7F6vEyKooSzpfTBvq\"]},\"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":{\"keccak256\":\"0x3f1382dc6c35d50545e327e7ed6016f2bd752357d446bd698014073f0b812873\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://99500abcd617fa43f6dde49e2c7802821ceaf54a65a8055cbbf2695ecd107974\",\"dweb:/ipfs/QmUktZkWuu3GCMEijY1fqt7NMy7BzpTvEtcmpB1fuoa7zt\"]},\"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0x06d3261d13cf5a08f9bcda05e17be0a6a0380193116298fdf8eabf9bf80d3624\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96965a8a2b1bd2d6cff4a8f78bcb33b0de8848834f8e4be28c03609ae08e9298\",\"dweb:/ipfs/QmSoNDxaEozMZgNdVEygfEvnk26Tu4UeFeapvtMsoUFftt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1030,
								"contract": "lib/allo-v2/contracts/strategies/BaseStrategy.sol:BaseStrategy",
								"label": "poolActive",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1032,
								"contract": "lib/allo-v2/contracts/strategies/BaseStrategy.sol:BaseStrategy",
								"label": "poolId",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1034,
								"contract": "lib/allo-v2/contracts/strategies/BaseStrategy.sol:BaseStrategy",
								"label": "poolAmount",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"ALLOCATION_ACTIVE()": [
								{
									"notice": "Thrown when the allocation is active."
								}
							],
							"ALLOCATION_NOT_ACTIVE()": [
								{
									"notice": "Thrown when the allocation is not active."
								}
							],
							"ALLOCATION_NOT_ENDED()": [
								{
									"notice": "Thrown when the allocation is not ended."
								}
							],
							"ALREADY_INITIALIZED()": [
								{
									"notice": "Thrown when data is already intialized"
								}
							],
							"AMOUNT_MISMATCH()": [
								{
									"notice": "Thrown when the amount of tokens sent does not match the amount of tokens expected"
								}
							],
							"ARRAY_MISMATCH()": [
								{
									"notice": "Thrown when two arrays length are not equal"
								}
							],
							"INVALID()": [
								{
									"notice": "Thrown as a general error when input / data is invalid"
								}
							],
							"INVALID_ADDRESS()": [
								{
									"notice": "Thrown when an invalid address is used"
								}
							],
							"INVALID_FEE()": [
								{
									"notice": "Thrown when the fee is below 1e18 which is the fee percentage denominator"
								}
							],
							"INVALID_METADATA()": [
								{
									"notice": "Thrown when the metadata is invalid."
								}
							],
							"INVALID_REGISTRATION()": [
								{
									"notice": "Thrown when the registration is invalid."
								}
							],
							"IS_APPROVED_STRATEGY()": [
								{
									"notice": "Thrown when the strategy is approved and should be cloned"
								}
							],
							"MISMATCH()": [
								{
									"notice": "Thrown when mismatch in decoding data"
								}
							],
							"NON_ZERO_VALUE()": [
								{
									"notice": "Thrown when the value is non-zero"
								}
							],
							"NOT_APPROVED_STRATEGY()": [
								{
									"notice": "Thrown when the strategy is not approved"
								}
							],
							"NOT_ENOUGH_FUNDS()": [
								{
									"notice": "Thrown when not enough funds are available"
								}
							],
							"NOT_IMPLEMENTED()": [
								{
									"notice": "Thrown when the function is not implemented"
								}
							],
							"NOT_INITIALIZED()": [
								{
									"notice": "Thrown when data is yet to be initialized"
								}
							],
							"POOL_ACTIVE()": [
								{
									"notice": "Thrown when a pool is already active"
								}
							],
							"POOL_INACTIVE()": [
								{
									"notice": "Thrown when a pool is inactive"
								}
							],
							"RECIPIENT_ALREADY_ACCEPTED()": [
								{
									"notice": "Thrown when recipient is already accepted."
								}
							],
							"RECIPIENT_ERROR(address)": [
								{
									"notice": "Thrown when there is an error in recipient."
								}
							],
							"RECIPIENT_NOT_ACCEPTED()": [
								{
									"notice": "Thrown when the recipient is not accepted."
								}
							],
							"REGISTRATION_ACTIVE()": [
								{
									"notice": "Thrown when registration is active."
								}
							],
							"REGISTRATION_NOT_ACTIVE()": [
								{
									"notice": "Thrown when registration is not active."
								}
							],
							"UNAUTHORIZED()": [
								{
									"notice": "Thrown when user is not authorized"
								}
							],
							"ZERO_ADDRESS()": [
								{
									"notice": "Thrown when address is the zero address"
								}
							]
						},
						"events": {
							"Allocated(address,uint256,address,address)": {
								"notice": "Emitted when a recipient is allocated to."
							},
							"Distributed(address,address,uint256,address)": {
								"notice": "Emitted when tokens are distributed."
							},
							"Initialized(uint256,bytes)": {
								"notice": "Emitted when strategy is initialized."
							},
							"PoolActive(bool)": {
								"notice": "Emitted when pool is set to active status."
							},
							"Registered(address,bytes,address)": {
								"notice": "Emitted when a recipient is registered."
							}
						},
						"kind": "user",
						"methods": {
							"NATIVE()": {
								"notice": "Address of the native token"
							},
							"allocate(bytes,address)": {
								"notice": "Allocates to a recipient."
							},
							"constructor": {
								"notice": "Constructor to set the Allo contract and \"strategyId'."
							},
							"distribute(address[],bytes,address)": {
								"notice": "Distributes funds (tokens) to recipients."
							},
							"getAllo()": {
								"notice": "Getter for the 'Allo' contract."
							},
							"getPayouts(address[],bytes[])": {
								"notice": "Gets the payout summary for recipients."
							},
							"getPoolAmount()": {
								"notice": "Getter for the 'poolAmount'."
							},
							"getPoolId()": {
								"notice": "Getter for the 'poolId'."
							},
							"getRecipientStatus(address)": {
								"notice": "Getter for the status of a recipient."
							},
							"getStrategyId()": {
								"notice": "Getter for the 'strategyId'."
							},
							"increasePoolAmount(uint256)": {
								"notice": "Increases the pool amount."
							},
							"initialize(uint256,bytes)": {
								"notice": "@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize()."
							},
							"isPoolActive()": {
								"notice": "Getter for whether or not the pool is active."
							},
							"isValidAllocator(address)": {
								"notice": "Checks if the '_allocator' is a valid allocator."
							},
							"registerRecipient(bytes,address)": {
								"notice": "Registers a recipient."
							}
						},
						"notice": "This contract is the base contract for all strategies",
						"version": 1
					}
				}
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1622,
								"contract": "lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1738,
								"contract": "lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a\",\"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":701:6935  library SafeERC20 {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":701:6935  library SafeERC20 {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bc1f4130aab88e89b0f8abe4b3d88712d613a920c5998dd11a829010600cb80064736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220bc1f4130aab88e89b0f8abe4b3d88712d613a920c5998dd11a829010600cb80064736f6c63430008130033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0x1F COINBASE ADDRESS 0xAA 0xB8 DUP15 DUP10 0xB0 0xF8 0xAB 0xE4 0xB3 0xD8 DUP8 SLT 0xD6 SGT 0xA9 KECCAK256 0xC5 SWAP10 DUP14 0xD1 BYTE DUP3 SWAP1 LT PUSH1 0xC 0xB8 STOP PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "701:6234:12:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220bc1f4130aab88e89b0f8abe4b3d88712d613a920c5998dd11a829010600cb80064736f6c63430008130033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0x1F COINBASE ADDRESS 0xAA 0xB8 DUP15 DUP10 0xB0 0xF8 0xAB 0xE4 0xB3 0xD8 DUP8 SLT 0xD6 SGT 0xA9 KECCAK256 0xC5 SWAP10 DUP14 0xD1 BYTE DUP3 SWAP1 LT PUSH1 0xC 0xB8 STOP PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "701:6234:12:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 701,
									"end": 6935,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "ASSIGNIMMUTABLE",
									"source": 12,
									"value": "library_deploy_address"
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "RETURN",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 701,
									"end": 6935,
									"name": "REVERT",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bc1f4130aab88e89b0f8abe4b3d88712d613a920c5998dd11a829010600cb80064736f6c63430008130033",
									".code": [
										{
											"begin": 701,
											"end": 6935,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 701,
											"end": 6935,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 701,
											"end": 6935,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"lib/allo-v2/contracts/core/interfaces/IAllo.sol",
								"lib/allo-v2/contracts/core/interfaces/IRegistry.sol",
								"lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
								"lib/allo-v2/contracts/core/libraries/Errors.sol",
								"lib/allo-v2/contracts/core/libraries/Metadata.sol",
								"lib/allo-v2/contracts/core/libraries/Native.sol",
								"lib/allo-v2/contracts/core/libraries/Transfer.sol",
								"lib/allo-v2/contracts/strategies/BaseStrategy.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol",
								"src/SNDRStrategy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a\",\"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68\",\"dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":194:9363  library Address {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":194:9363  library Address {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ff1244344e9efbb18a3a672fa31a44f64e679a151ac13d00aca7bc7eb4f8283f64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220ff1244344e9efbb18a3a672fa31a44f64e679a151ac13d00aca7bc7eb4f8283f64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT SLT PREVRANDAO CALLVALUE 0x4E SWAP15 0xFB 0xB1 DUP11 GASPRICE PUSH8 0x2FA31A44F64E679A ISZERO BYTE 0xC1 RETURNDATASIZE STOP 0xAC 0xA7 0xBC PUSH31 0xB4F8283F64736F6C6343000813003300000000000000000000000000000000 ",
							"sourceMap": "194:9169:13:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220ff1244344e9efbb18a3a672fa31a44f64e679a151ac13d00aca7bc7eb4f8283f64736f6c63430008130033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT SLT PREVRANDAO CALLVALUE 0x4E SWAP15 0xFB 0xB1 DUP11 GASPRICE PUSH8 0x2FA31A44F64E679A ISZERO BYTE 0xC1 RETURNDATASIZE STOP 0xAC 0xA7 0xBC PUSH31 0xB4F8283F64736F6C6343000813003300000000000000000000000000000000 ",
							"sourceMap": "194:9169:13:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "CALLVALUE",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "ASSIGNIMMUTABLE",
									"source": 13,
									"value": "library_deploy_address"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "RETURN",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "REVERT",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ff1244344e9efbb18a3a672fa31a44f64e679a151ac13d00aca7bc7eb4f8283f64736f6c63430008130033",
									".code": [
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"lib/allo-v2/contracts/core/interfaces/IAllo.sol",
								"lib/allo-v2/contracts/core/interfaces/IRegistry.sol",
								"lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
								"lib/allo-v2/contracts/core/libraries/Errors.sol",
								"lib/allo-v2/contracts/core/libraries/Metadata.sol",
								"lib/allo-v2/contracts/core/libraries/Native.sol",
								"lib/allo-v2/contracts/core/libraries/Transfer.sol",
								"lib/allo-v2/contracts/strategies/BaseStrategy.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol",
								"src/SNDRStrategy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol": {
				"SafeTransferLib": {
					"abi": [
						{
							"inputs": [],
							"name": "ApproveFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ETHTransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromFailed",
							"type": "error"
						}
					],
					"devdoc": {
						"author": "Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)",
						"details": "Note: - For ETH transfers, please use `forceSafeTransferETH` for gas griefing protection. - For ERC20s, this implementation won't check that a token has code, responsibility is delegated to the caller.",
						"errors": {
							"ApproveFailed()": [
								{
									"details": "The ERC20 `approve` has failed."
								}
							],
							"ETHTransferFailed()": [
								{
									"details": "The ETH transfer has failed."
								}
							],
							"TransferFailed()": [
								{
									"details": "The ERC20 `transfer` has failed."
								}
							],
							"TransferFromFailed()": [
								{
									"details": "The ERC20 `transferFrom` has failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"GAS_STIPEND_NO_GRIEF": {
								"details": "Suggested gas stipend for contract receiving ETH to perform a few storage reads and writes, but low enough to prevent griefing. Multiply by a small constant (e.g. 2), if needed."
							},
							"GAS_STIPEND_NO_STORAGE_WRITES": {
								"details": "Suggested gas stipend for contract receiving ETH that disallows any storage writes."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol\":596:19023  library SafeTransferLib {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol\":596:19023  library SafeTransferLib {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122098a531fabec0818100e62c6cd6f65f1cdc0db1d3b606284ac5725d70cc9fb61864736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122098a531fabec0818100e62c6cd6f65f1cdc0db1d3b606284ac5725d70cc9fb61864736f6c63430008130033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xA5 BALANCE STATICCALL 0xBE 0xC0 DUP2 DUP2 STOP 0xE6 0x2C PUSH13 0xD6F65F1CDC0DB1D3B606284AC5 PUSH19 0x5D70CC9FB61864736F6C634300081300330000 ",
							"sourceMap": "596:18427:15:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea264697066735822122098a531fabec0818100e62c6cd6f65f1cdc0db1d3b606284ac5725d70cc9fb61864736f6c63430008130033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xA5 BALANCE STATICCALL 0xBE 0xC0 DUP2 DUP2 STOP 0xE6 0x2C PUSH13 0xD6F65F1CDC0DB1D3B606284AC5 PUSH19 0x5D70CC9FB61864736F6C634300081300330000 ",
							"sourceMap": "596:18427:15:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"balanceOf(address,address)": "infinite",
								"forceSafeTransferETH(address,uint256)": "infinite",
								"forceSafeTransferETH(address,uint256,uint256)": "infinite",
								"safeApprove(address,address,uint256)": "infinite",
								"safeApproveWithRetry(address,address,uint256)": "infinite",
								"safeTransfer(address,address,uint256)": "infinite",
								"safeTransferAll(address,address)": "infinite",
								"safeTransferAllFrom(address,address,address)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite",
								"trySafeTransferETH(address,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 596,
									"end": 19023,
									"name": "PUSH",
									"source": 15,
									"value": "80"
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "CALLVALUE",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "ASSIGNIMMUTABLE",
									"source": 15,
									"value": "library_deploy_address"
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "RETURN",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 596,
									"end": 19023,
									"name": "REVERT",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122098a531fabec0818100e62c6cd6f65f1cdc0db1d3b606284ac5725d70cc9fb61864736f6c63430008130033",
									".code": [
										{
											"begin": 596,
											"end": 19023,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 596,
											"end": 19023,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 596,
											"end": 19023,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"lib/allo-v2/contracts/core/interfaces/IAllo.sol",
								"lib/allo-v2/contracts/core/interfaces/IRegistry.sol",
								"lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
								"lib/allo-v2/contracts/core/libraries/Errors.sol",
								"lib/allo-v2/contracts/core/libraries/Metadata.sol",
								"lib/allo-v2/contracts/core/libraries/Native.sol",
								"lib/allo-v2/contracts/core/libraries/Transfer.sol",
								"lib/allo-v2/contracts/strategies/BaseStrategy.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol",
								"src/SNDRStrategy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApproveFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\",\"details\":\"Note: - For ETH transfers, please use `forceSafeTransferETH` for gas griefing protection. - For ERC20s, this implementation won't check that a token has code, responsibility is delegated to the caller.\",\"errors\":{\"ApproveFailed()\":[{\"details\":\"The ERC20 `approve` has failed.\"}],\"ETHTransferFailed()\":[{\"details\":\"The ETH transfer has failed.\"}],\"TransferFailed()\":[{\"details\":\"The ERC20 `transfer` has failed.\"}],\"TransferFromFailed()\":[{\"details\":\"The ERC20 `transferFrom` has failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"GAS_STIPEND_NO_GRIEF\":{\"details\":\"Suggested gas stipend for contract receiving ETH to perform a few storage reads and writes, but low enough to prevent griefing. Multiply by a small constant (e.g. 2), if needed.\"},\"GAS_STIPEND_NO_STORAGE_WRITES\":{\"details\":\"Suggested gas stipend for contract receiving ETH that disallows any storage writes.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Safe ETH and ERC20 transfer library that gracefully handles missing return values.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol\":\"SafeTransferLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0x06d3261d13cf5a08f9bcda05e17be0a6a0380193116298fdf8eabf9bf80d3624\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96965a8a2b1bd2d6cff4a8f78bcb33b0de8848834f8e4be28c03609ae08e9298\",\"dweb:/ipfs/QmSoNDxaEozMZgNdVEygfEvnk26Tu4UeFeapvtMsoUFftt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Safe ETH and ERC20 transfer library that gracefully handles missing return values.",
						"version": 1
					}
				}
			},
			"src/SNDRStrategy.sol": {
				"ISNDRCore": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "recipients",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "allocations",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "duration",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "whitelistedCollectors",
									"type": "address[]"
								}
							],
							"name": "handleDistribution",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"handleDistribution(uint256,address,address[],uint256[],uint256,address[])": "23358940"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelistedCollectors\",\"type\":\"address[]\"}],\"name\":\"handleDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SNDRStrategy.sol\":\"ISNDRCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/contracts/core/interfaces/IAllo.sol\":{\"keccak256\":\"0x7bc06a262ffe042092c58949452b043546788a66616bec2a40f55975fd537c1d\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7420316020e25430b295e876562932810f274c7c651cbda8c09989a3ad9837d2\",\"dweb:/ipfs/QmfNx7MHNK9t4ReeA71CBUXHEhYNj6suDYHY7pjqUDc1T3\"]},\"lib/allo-v2/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"lib/allo-v2/contracts/core/interfaces/IStrategy.sol\":{\"keccak256\":\"0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487\",\"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH\"]},\"lib/allo-v2/contracts/core/libraries/Errors.sol\":{\"keccak256\":\"0x67e3c1109948a92cb3a01e8c2325c5f1b748ecbd4c9cd5bee34e81fa737f77ea\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://9603d3f1c4bb4b44a55663e71688a9d10786038e5dfa5039aa354572af1a53c3\",\"dweb:/ipfs/QmWNxsPH9YaJJkFiiU6oJ642i5kHxPzpRYfR5H8zSH4KaP\"]},\"lib/allo-v2/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://2cc5507da2550ab9bfa0fbb263e703f9e70b831190bb7b2bcdbb231cab49795c\",\"dweb:/ipfs/QmQXCD8v2HppXAX17aH49JvNyyfDYzGMrg63QNabUEXPpn\"]},\"lib/allo-v2/contracts/core/libraries/Native.sol\":{\"keccak256\":\"0x23dacace24a8c570a659dcc7e52fca2d39cc7577c6cfa674820cafaf194b29d5\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0727880a600b1803f02b58ad002938462dc61aacf841f5e1ee38f296fdd67e8a\",\"dweb:/ipfs/QmdrEiJxFFnUfn2QUNxRAUMS1qwCnRtGeWPChaGzhAkRnv\"]},\"lib/allo-v2/contracts/core/libraries/Transfer.sol\":{\"keccak256\":\"0x99f4e3bfd5cea354c2ef9e9774d7bdb2310faec5e7a21a619d87377b40eba135\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://f84412d189fa7c6ea3656409af156fad084b1a541850798da3e76549e3124588\",\"dweb:/ipfs/QmT3roFjt41PX7zgjT7KdThFU37Fh7F6vEyKooSzpfTBvq\"]},\"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":{\"keccak256\":\"0x3f1382dc6c35d50545e327e7ed6016f2bd752357d446bd698014073f0b812873\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://99500abcd617fa43f6dde49e2c7802821ceaf54a65a8055cbbf2695ecd107974\",\"dweb:/ipfs/QmUktZkWuu3GCMEijY1fqt7NMy7BzpTvEtcmpB1fuoa7zt\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a\",\"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68\",\"dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0x06d3261d13cf5a08f9bcda05e17be0a6a0380193116298fdf8eabf9bf80d3624\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96965a8a2b1bd2d6cff4a8f78bcb33b0de8848834f8e4be28c03609ae08e9298\",\"dweb:/ipfs/QmSoNDxaEozMZgNdVEygfEvnk26Tu4UeFeapvtMsoUFftt\"]},\"src/SNDRStrategy.sol\":{\"keccak256\":\"0x79d0341cb7bab9713e47e4a4036435b19ab471a4924b7265e40f804a1f113470\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d079cb89bf9bb1a4d6a11b03c4f9c5b6e46a4b8b42c8dff1a0ad18f5496ade77\",\"dweb:/ipfs/QmWqeViEkpFRx4TqZ83RavYHrivyhnGyoNUW2j9FiNVHGV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SNDRStrategy": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_allo",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_sndrCore",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ALLOCATION_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ALLOCATION_NOT_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ALLOCATION_NOT_ENDED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ALREADY_INITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "AMOUNT_MISMATCH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ANCHOR_ERROR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ARRAY_MISMATCH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_FEE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_METADATA",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "INVALID_REGISTRATION",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "IS_APPROVED_STRATEGY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MISMATCH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NONCE_NOT_AVAILABLE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NON_ZERO_VALUE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_APPROVED_STRATEGY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_ENOUGH_FUNDS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_IMPLEMENTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_INITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NOT_PENDING_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_INACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RECIPIENT_ALREADY_ACCEPTED",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								}
							],
							"name": "RECIPIENT_ERROR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RECIPIENT_NOT_ACCEPTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "REGISTRATION_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "REGISTRATION_NOT_ACTIVE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "UNAUTHORIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Allocated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newAllocation",
									"type": "uint256"
								}
							],
							"name": "AllocationUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "allocationsCount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalAllocated",
									"type": "uint256"
								}
							],
							"name": "BatchAllocationCompleted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipientAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Distributed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address[]",
									"name": "recipientIds",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalAllocation",
									"type": "uint256"
								}
							],
							"name": "DistributionExecuted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"name": "PoolActive",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "initialAllocation",
									"type": "uint256"
								}
							],
							"name": "RecipientRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "enum IStrategy.Status",
									"name": "status",
									"type": "uint8"
								}
							],
							"name": "RecipientStatusUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Registered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "registrationStartTime",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "registrationEndTime",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "allocationStartTime",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "allocationEndTime",
									"type": "uint64"
								}
							],
							"name": "TimestampsUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address[]",
									"name": "newWhitelistedCollectors",
									"type": "address[]"
								}
							],
							"name": "WhitelistedCollectorsUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "NATIVE",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "allocationEndTime",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "allocationStartTime",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllo",
							"outputs": [
								{
									"internalType": "contract IAllo",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes[]",
									"name": "_data",
									"type": "bytes[]"
								}
							],
							"name": "getPayouts",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "recipientAddress",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										}
									],
									"internalType": "struct IStrategy.PayoutSummary[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_recipientAddress",
									"type": "address"
								}
							],
							"name": "getRecipientDetails",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "recipientAddress",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "totalAllocation",
											"type": "uint256"
										},
										{
											"internalType": "enum IStrategy.Status",
											"name": "status",
											"type": "uint8"
										}
									],
									"internalType": "struct SNDRStrategy.Recipient",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_recipientId",
									"type": "address"
								}
							],
							"name": "getRecipientStatus",
							"outputs": [
								{
									"internalType": "enum IStrategy.Status",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getStrategyId",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTotalRecipients",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "increasePoolAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isPoolActive",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_allocator",
									"type": "address"
								}
							],
							"name": "isValidAllocator",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "recipientList",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "recipients",
							"outputs": [
								{
									"internalType": "address",
									"name": "recipientAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "totalAllocation",
									"type": "uint256"
								},
								{
									"internalType": "enum IStrategy.Status",
									"name": "status",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "registerRecipient",
							"outputs": [
								{
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "registrationEndTime",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "registrationStartTime",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sndrCore",
							"outputs": [
								{
									"internalType": "contract ISNDRCore",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_registrationStartTime",
									"type": "uint64"
								},
								{
									"internalType": "uint64",
									"name": "_registrationEndTime",
									"type": "uint64"
								},
								{
									"internalType": "uint64",
									"name": "_allocationStartTime",
									"type": "uint64"
								},
								{
									"internalType": "uint64",
									"name": "_allocationEndTime",
									"type": "uint64"
								}
							],
							"name": "updatePoolTimestamps",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_recipientAddress",
									"type": "address"
								},
								{
									"internalType": "enum IStrategy.Status",
									"name": "_newStatus",
									"type": "uint8"
								}
							],
							"name": "updateRecipientStatus",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_newWhitelistedCollectors",
									"type": "address[]"
								}
							],
							"name": "updateWhitelistedCollectors",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "whitelistedCollectors",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawRemainingTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Inherits from BaseStrategy, Ownable, and ReentrancyGuard",
						"errors": {
							"ANCHOR_ERROR()": [
								{
									"details": "Thrown if the anchor creation fails"
								}
							],
							"NONCE_NOT_AVAILABLE()": [
								{
									"details": "Thrown when the nonce passed has been used or not available"
								}
							],
							"NOT_PENDING_OWNER()": [
								{
									"details": "Thrown when the 'msg.sender' is not the pending owner on ownership transfer"
								}
							]
						},
						"events": {
							"Allocated(address,uint256,address,address)": {
								"params": {
									"amount": "The amount allocated",
									"recipientId": "The ID of the recipient",
									"token": "The token allocated"
								}
							},
							"Distributed(address,address,uint256,address)": {
								"params": {
									"amount": "The amount distributed",
									"recipientAddress": "The recipient",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							},
							"Initialized(uint256,bytes)": {
								"params": {
									"data": "The data passed to the 'initialize' function",
									"poolId": "The ID of the pool"
								}
							},
							"PoolActive(bool)": {
								"params": {
									"active": "The status of the pool"
								}
							},
							"Registered(address,bytes,address)": {
								"params": {
									"data": "The data passed to the 'registerRecipient' function",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allocate(bytes,address)": {
								"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
								"params": {
									"_data": "The data to use to allocate to the recipient",
									"_sender": "The address of the sender"
								}
							},
							"constructor": {
								"params": {
									"_allo": "Address of the Allo contract",
									"_sndrCore": "Address of the SNDR core contract",
									"_token": "Address of the ERC20 token used for distributions"
								}
							},
							"distribute(address[],bytes,address)": {
								"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
								"params": {
									"_data": "The data to use to distribute to the recipients",
									"_recipientIds": "The IDs of the recipients",
									"_sender": "The address of the sender"
								}
							},
							"getAllo()": {
								"returns": {
									"_0": "The Allo contract"
								}
							},
							"getPayouts(address[],bytes[])": {
								"details": "The encoded '_data' will be determined by the strategy implementation.",
								"params": {
									"_data": "The data to use to get the payout summary for the recipients",
									"_recipientIds": "The IDs of the recipients"
								},
								"returns": {
									"_0": "The payout summary for the recipients"
								}
							},
							"getPoolAmount()": {
								"returns": {
									"_0": "The balance of the pool"
								}
							},
							"getPoolId()": {
								"returns": {
									"_0": "The ID of the pool"
								}
							},
							"getRecipientDetails(address)": {
								"params": {
									"_recipientAddress": "Address of the recipient"
								},
								"returns": {
									"_0": "Recipient struct containing recipient details"
								}
							},
							"getRecipientStatus(address)": {
								"params": {
									"_recipientId": "The ID of the recipient"
								},
								"returns": {
									"_0": "The status of the recipient"
								}
							},
							"getStrategyId()": {
								"returns": {
									"_0": "The ID of the strategy"
								}
							},
							"getTotalRecipients()": {
								"returns": {
									"_0": "uint256 Total number of recipients"
								}
							},
							"increasePoolAmount(uint256)": {
								"details": "Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.",
								"params": {
									"_amount": "The amount to increase the pool by"
								}
							},
							"initialize(uint256,bytes)": {
								"details": "Overrides BaseStrategy's initialize function",
								"params": {
									"_data": "Encoded initialization parameters",
									"_poolId": "ID of the pool"
								}
							},
							"isPoolActive()": {
								"returns": {
									"_0": "'true' if the pool is active, otherwise 'false'"
								}
							},
							"isValidAllocator(address)": {
								"details": "How the allocator is determined is up to the strategy implementation.",
								"params": {
									"_allocator": "The address to check if it is a valid allocator for the strategy."
								},
								"returns": {
									"_0": "'true' if the address is a valid allocator, 'false' otherwise"
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"registerRecipient(bytes,address)": {
								"details": "Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.",
								"params": {
									"_data": "The data to use to register the recipient",
									"_sender": "The address of the sender"
								},
								"returns": {
									"recipientId": "The recipientId"
								}
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"updatePoolTimestamps(uint64,uint64,uint64,uint64)": {
								"params": {
									"_allocationEndTime": "New allocation end time",
									"_allocationStartTime": "New allocation start time",
									"_registrationEndTime": "New registration end time",
									"_registrationStartTime": "New registration start time"
								}
							},
							"updateRecipientStatus(address,uint8)": {
								"params": {
									"_newStatus": "New status to set",
									"_recipientAddress": "Address of the recipient"
								}
							},
							"updateWhitelistedCollectors(address[])": {
								"params": {
									"_newWhitelistedCollectors": "Address of the collector"
								}
							},
							"withdrawRemainingTokens()": {
								"details": "Can only be called by the owner"
							}
						},
						"title": "SNDRStrategy Contract",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  0xc0\n  0x40\n  dup2\n  dup2\n  mstore\n  jumpi(tag_6, callvalue)\n  dup2\n  bytecodeSize\n  dup1\n  codesize\n  sub\n  dup1\n  swap2\n  tag_5\n  dup3\n  dup6\n  tag_1\n  jump\t// in\ntag_5:\n  dup4\n  codecopy\n  0x60\n  swap2\n  dup3\n  swap2\n  dup2\n  add\n  sub\n  slt\n  tag_6\n  jumpi\n  tag_8\n  dup4\n  tag_2\n  jump\t// in\ntag_8:\n  swap1\n  0x20\n  tag_9\n  dup5\n  tag_10\n  dup4\n  dup9\n  add\n  tag_2\n  jump\t// in\ntag_10:\n  swap7\n  add\n  tag_2\n  jump\t// in\ntag_9:\n  dup5\n  mload\n  swap1\n  swap3\n  dup2\n  dup7\n  add\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  dup4\n  dup3\n  lt\n  or\n  tag_11\n  jumpi\n  dup7\n  mstore\n  0x0c\n  dup3\n  mstore\n  shl(0xa0, 0x534e44525374726174656779)\n  dup4\n  dup4\n  add\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n  swap5\n  dup6\n  and\n    /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5268:5287  allo = IAllo(_allo) */\n  0x80\n  mstore\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  dup6\n  mload\n    /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5320:5337  abi.encode(_name) */\n  dup1\n  dup5\n  add\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  dup5\n  dup2\n  mstore\n  dup4\n  mload\n  dup3\n  dup10\n  add\n  dup2\n  swap1\n  mstore\n    /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5320:5337  abi.encode(_name) */\n  swap1\n  swap5\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  swap2\n  swap4\n  0x00\n  swap4\n  swap3\n  dup6\n  swap3\n  swap2\ntag_13:\n  dup3\n  dup7\n  lt\n  tag_14\n  jumpi\n  pop\n  pop\n  0x00\n  dup3\n  dup3\n  add\n  dup5\n  add\n  mstore\n  0x1f\n  add\n  not(0x1f)\n  and\n  dup2\n  add\n    /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5320:5337  abi.encode(_name) */\n  sub\n  dup8\n  dup2\n  add\n  dup5\n  mstore\n  tag_16\n  swap3\n  pop\n  add\n  dup3\n  tag_1\n  jump\t// in\ntag_16:\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  mload\n    /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5310:5338  keccak256(abi.encode(_name)) */\n  swap1\n  keccak256\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  0xa0\n    /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5297:5338  strategyId = keccak256(abi.encode(_name)) */\n  mstore\n    /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2518:2524  _owner */\n  0x03\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup1\n  dup3\n  and\n    /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  swap1\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n  swap5\n  mload\n  swap6\n  dup5\n  swap3\n  swap1\n  swap2\n  dup4\n  and\n    /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  0x00\n  dup1\n  log3\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  0x01\n    /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  0x04\n    /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n  sstore\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  and\n  dup4\n    /* \"src/SNDRStrategy.sol\":2624:2655  sndrCore = ISNDRCore(_sndrCore) */\n  0x05\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  sload\n  and\n  or\n    /* \"src/SNDRStrategy.sol\":2624:2655  sndrCore = ISNDRCore(_sndrCore) */\n  0x05\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  sstore\n  and\n  swap1\n    /* \"src/SNDRStrategy.sol\":2665:2687  token = IERC20(_token) */\n  0x06\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  sload\n  and\n  or\n    /* \"src/SNDRStrategy.sol\":2665:2687  token = IERC20(_token) */\n  0x06\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  sstore\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n    /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5268:5287  allo = IAllo(_allo) */\n  0x80\n    /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n  mload\n  dup2\n  assignImmutable(\"0xbd0af7246ac7aa3e59281abc6e001c8d20085f3ebd8f2bcaf145913d94136a44\")\n  mload(0xa0)\n  dup2\n  assignImmutable(\"0x5d41b7f7850dfd9d2127fd7df8bb3dcd76be1dc8040e2470c8576cf5ab9832e3\")\n  return\ntag_14:\n  dup6\n  dup2\n  add\n  dup3\n  add\n  mload\n  dup8\n  dup8\n  add\n  dup7\n  add\n  mstore\n  swap5\n  dup2\n  add\n  swap5\n  dup7\n  swap4\n  pop\n  jump(tag_13)\ntag_11:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\ntag_6:\n  0x00\n  dup1\n  revert\ntag_1:\n  0x1f\n  swap1\n  swap2\n  add\n  not(0x1f)\n  and\n  dup2\n  add\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  swap1\n  dup3\n  lt\n  or\n  tag_11\n  jumpi\n  0x40\n  mstore\n  jump\t// out\ntag_2:\n  mload\n  swap1\n  sub(shl(0xa0, 0x01), 0x01)\n  dup3\n  and\n  dup3\n  sub\n  tag_6\n  jumpi\n  jump\t// out\nstop\n\nsub_0: assembly {\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_28, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_28:\n      0x00\n      dup1\n      calldataload\n      0xe0\n      shr\n      dup1\n      0x912917\n      eq\n      tag_30\n      jumpi\n      dup1\n      0x0a6f0ee9\n      eq\n      tag_32\n      jumpi\n      dup1\n      0x14f20ef9\n      eq\n      tag_34\n      jumpi\n      dup1\n      0x15cc481e\n      eq\n      tag_36\n      jumpi\n      dup1\n      0x19220dbc\n      eq\n      tag_38\n      jumpi\n      dup1\n      0x2143e92f\n      eq\n      tag_40\n      jumpi\n      dup1\n      0x2bbe0cae\n      eq\n      tag_42\n      jumpi\n        /* \"src/SNDRStrategy.sol\":5279:5350  abi.decode(... */\n      dup1\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x2cb5b5ed\n        /* \"src/SNDRStrategy.sol\":5279:5350  abi.decode(... */\n      eq\n      tag_44\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n      0x2d30e6bf\n      eq\n      tag_46\n      jumpi\n      dup1\n      0x38fff2d0\n      eq\n      tag_48\n      jumpi\n      dup1\n      0x42fda9c7\n      eq\n      tag_50\n      jumpi\n      dup1\n      0x4533d678\n      eq\n      tag_52\n      jumpi\n      dup1\n      0x4ab4ba42\n      eq\n      tag_54\n      jumpi\n      dup1\n      0x4d31d087\n      eq\n      tag_56\n      jumpi\n      dup1\n      0x6d40f85b\n      eq\n      tag_58\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_60\n      jumpi\n      dup1\n      0x8afbf669\n      eq\n      tag_62\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_64\n      jumpi\n      dup1\n      0x9af5c09d\n      eq\n      tag_66\n      jumpi\n      dup1\n      0xa0cf0aea\n      eq\n      tag_68\n      jumpi\n      dup1\n      0xb2b878d0\n      eq\n      tag_70\n      jumpi\n      dup1\n      0xb9bd12e4\n      eq\n      tag_72\n      jumpi\n      dup1\n      0xd2e17f59\n      eq\n      tag_74\n      jumpi\n      dup1\n      0xdf868ed3\n      eq\n      tag_76\n      jumpi\n      dup1\n      0xdff7d2c7\n      eq\n      tag_78\n      jumpi\n      dup1\n      0xeb11af93\n      eq\n      tag_80\n      jumpi\n      dup1\n      0xeb820312\n      eq\n      tag_82\n      jumpi\n      dup1\n      0xedd146cc\n      eq\n      tag_84\n      jumpi\n      dup1\n      0xef2920fc\n      eq\n      tag_86\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_88\n      jumpi\n      dup1\n      0xf5b0dfb7\n      eq\n      tag_90\n      jumpi\n      0xfc0c546a\n      eq\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n        /* \"src/SNDRStrategy.sol\":959:978  IERC20 public token */\n      0x06\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_96:\n      dup1\n      revert\n    tag_90:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x20))\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5630:5694  modifier onlyAllo() {... */\n      tag_102\n      tag_14\n      jump\t// in\n    tag_102:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8942:8963  poolAmount += _amount */\n      tag_103\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      calldataload(0x04)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8942:8963  poolAmount += _amount */\n      0x02\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8942:8963  poolAmount += _amount */\n      tag_12\n      jump\t// in\n    tag_103:\n      0x02\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sstore\n      dup1\n      return\n    tag_88:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x20))\n      tag_108\n      tag_5\n      jump\t// in\n    tag_108:\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_109\n      tag_16\n      jump\t// in\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap1\n      dup2\n      and\n      swap1\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2162:2184  newOwner != address(0) */\n      dup2\n      iszero\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_110\n      jumpi\n      sload(0x03)\n      dup3\n      shl(0xa0, 0xffffffffffffffffffffffff)\n      dup3\n      and\n      or\n      0x03\n      sstore\n      and\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      dup1\n      log3\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_110:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd0, 0x646472657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_86:\n      pop\n      tag_112\n      calldatasize\n      tag_10\n      jump\t// in\n    tag_112:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5630:5694  modifier onlyAllo() {... */\n      swap1\n      swap2\n      tag_113\n      tag_14\n      jump\t// in\n    tag_113:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":6495:6573  modifier onlyInitialized() {... */\n      tag_114\n      tag_15\n      jump\t// in\n    tag_114:\n        /* \"src/SNDRStrategy.sol\":13444:13463  allocationStartTime */\n      0x0a\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      swap2\n      sub(shl(0x40, 0x01), 0x01)\n      swap3\n      dup4\n      dup2\n      0x80\n      shr\n      and\n        /* \"src/SNDRStrategy.sol\":13425:13440  block.timestamp */\n      timestamp\n        /* \"src/SNDRStrategy.sol\":13425:13463  block.timestamp >= allocationStartTime */\n      lt\n      iszero\n        /* \"src/SNDRStrategy.sol\":13425:13519  block.timestamp >= allocationStartTime &&... */\n      swap1\n      dup2\n      tag_115\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_116:\n      pop\n      iszero\n      tag_117\n      jumpi\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5976:5983  _sender */\n      tag_119\n      swap1\n      tag_24\n      jump\t// in\n    tag_119:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup3\n      mload\n        /* \"src/SNDRStrategy.sol\":6337:6391  abi... */\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x40\n        /* \"src/SNDRStrategy.sol\":6337:6391  abi... */\n      dup3\n      dup6\n      dup8\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap7\n      sub\n      slt\n      tag_135\n      jumpi\n        /* \"src/SNDRStrategy.sol\":6337:6391  abi... */\n      dup4\n      dup3\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload\n      dup2\n      dup2\n      gt\n      tag_133\n      jumpi\n      dup3\n      add\n      swap2\n      dup6\n      0x3f\n      dup5\n      add\n      slt\n      iszero\n      tag_133\n      jumpi\n      dup5\n      dup4\n      add\n      mload\n      swap3\n      tag_126\n      dup5\n      tag_4\n      jump\t// in\n    tag_126:\n      swap4\n      tag_127\n      mload(0x40)\n      swap6\n      dup7\n      tag_3\n      jump\t// in\n    tag_127:\n      dup1\n      dup6\n      mstore\n      0x40\n      dup8\n      dup7\n      add\n      swap2\n      0x05\n      shl\n      dup4\n      add\n      add\n      swap2\n      dup9\n      dup4\n      gt\n      tag_128\n      jumpi\n      0x40\n      add\n      swap1\n    tag_130:\n      dup3\n      dup3\n      lt\n      tag_131\n      jumpi\n      pop\n      pop\n      pop\n      0x40\n      dup2\n      add\n      mload\n      swap2\n      dup3\n      gt\n      tag_133\n      jumpi\n      add\n      swap4\n      dup1\n      0x3f\n      dup7\n      add\n      slt\n      iszero\n      tag_135\n      jumpi\n      dup4\n      dup6\n      add\n      mload\n      tag_137\n      dup2\n      tag_4\n      jump\t// in\n    tag_137:\n      swap6\n      tag_138\n      mload(0x40)\n      swap8\n      dup9\n      tag_3\n      jump\t// in\n    tag_138:\n      dup2\n      dup8\n      mstore\n      0x40\n      dup7\n      dup9\n      add\n      swap3\n      0x05\n      shl\n      dup3\n      add\n      add\n      swap3\n      dup4\n      gt\n      tag_139\n      jumpi\n      0x40\n      dup7\n      swap2\n      add\n      swap2\n    tag_141:\n      dup4\n      dup4\n      lt\n      tag_142\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      dup1\n      mload\n      dup5\n      mload\n        /* \"src/SNDRStrategy.sol\":6422:6465  recipientAddresses.length == amounts.length */\n      sub\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_144\n      jumpi\n        /* \"src/SNDRStrategy.sol\":6572:6585  uint256 i = 0 */\n      dup2\n        /* \"src/SNDRStrategy.sol\":6618:6621  i++ */\n    tag_146:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup2\n      mload\n        /* \"src/SNDRStrategy.sol\":6587:6616  i < recipientAddresses.length */\n      dup2\n      lt\n      iszero\n      tag_147\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n        /* \"src/SNDRStrategy.sol\":6664:6685  recipientAddresses[i] */\n      tag_149\n      dup4\n      dup6\n      tag_13\n      jump\t// in\n    tag_149:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload\n      and\n      dup1\n      dup6\n      mstore\n        /* \"src/SNDRStrategy.sol\":6699:6841  require(... */\n      tag_150\n        /* \"src/SNDRStrategy.sol\":6724:6734  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap3\n      dup4\n      dup9\n      mstore\n      0x40\n      dup8\n      keccak256\n      sload\n      and\n        /* \"src/SNDRStrategy.sol\":6724:6783  recipients[recipientAddress].recipientAddress != address(0) */\n      iszero\n      iszero\n        /* \"src/SNDRStrategy.sol\":6699:6841  require(... */\n      tag_22\n      jump\t// in\n    tag_150:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup5\n      mstore\n      dup1\n      dup6\n      mstore\n        /* \"src/SNDRStrategy.sol\":6880:6915  recipients[recipientAddress].status */\n      0x02\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap1\n      0xff\n      dup3\n      0x40\n      dup8\n      keccak256\n        /* \"src/SNDRStrategy.sol\":6880:6915  recipients[recipientAddress].status */\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      and\n      swap1\n      dup2\n      lt\n      iszero\n      tag_151\n      jumpi\n        /* \"src/SNDRStrategy.sol\":6880:6934  recipients[recipientAddress].status == Status.Accepted */\n      sub\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_153\n      jumpi\n        /* \"src/SNDRStrategy.sol\":6618:6621  i++ */\n      tag_155\n      swap1\n      tag_21\n      jump\t// in\n    tag_155:\n        /* \"src/SNDRStrategy.sol\":6572:6585  uint256 i = 0 */\n      jump(tag_146)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_153:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n      dup6\n      swap1\n      mstore\n      0x16\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x52, 0x149958da5c1a595b9d081b9bdd081858d8d95c1d1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_151:\n      shl(0xe0, 0x4e487b71)\n      dup6\n      mstore\n      mstore(0x04, 0x21)\n      0x24\n      dup6\n      revert\n        /* \"src/SNDRStrategy.sol\":6587:6616  i < recipientAddresses.length */\n    tag_147:\n      pop\n      dup4\n      dup4\n        /* \"src/SNDRStrategy.sol\":7071:7097  uint256 totalAllocated = 0 */\n      dup4\n        /* \"src/SNDRStrategy.sol\":7112:7125  uint256 i = 0 */\n      dup5\n        /* \"src/SNDRStrategy.sol\":7158:7161  i++ */\n    tag_156:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup5\n      mload\n        /* \"src/SNDRStrategy.sol\":7127:7156  i < recipientAddresses.length */\n      dup2\n      lt\n      iszero\n      tag_157\n      jumpi\n        /* \"src/SNDRStrategy.sol\":7158:7161  i++ */\n      tag_159\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":7204:7225  recipientAddresses[i] */\n      tag_160\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup3\n        /* \"src/SNDRStrategy.sol\":7204:7225  recipientAddresses[i] */\n      dup9\n      tag_13\n      jump\t// in\n    tag_160:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload\n      and\n        /* \"src/SNDRStrategy.sol\":7393:7520  AllocationUpdated(... */\n      0x183f2ce0b749ed46549cb16586af0c501abab8d242cc4b2076aec30d2dd9c4bc\n        /* \"src/SNDRStrategy.sol\":7256:7266  amounts[i] */\n      dup6\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x40\n        /* \"src/SNDRStrategy.sol\":7349:7373  totalAllocated += amount */\n      tag_161\n        /* \"src/SNDRStrategy.sol\":7256:7266  amounts[i] */\n      tag_162\n      dup7\n      dup12\n      tag_13\n      jump\t// in\n    tag_162:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload\n      dup6\n      dup14\n      mstore\n        /* \"src/SNDRStrategy.sol\":6724:6734  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap9\n      dup10\n      dup6\n      mstore\n      dup14\n      0x01\n      swap5\n      dup6\n      swap2\n      keccak256\n        /* \"src/SNDRStrategy.sol\":7281:7325  recipients[recipientAddress].totalAllocation */\n      add\n        /* \"src/SNDRStrategy.sol\":7281:7335  recipients[recipientAddress].totalAllocation += amount */\n      tag_163\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup4\n      dup3\n      sload\n        /* \"src/SNDRStrategy.sol\":7281:7335  recipients[recipientAddress].totalAllocation += amount */\n      tag_12\n      jump\t// in\n    tag_163:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap1\n      sstore\n        /* \"src/SNDRStrategy.sol\":7349:7373  totalAllocated += amount */\n      tag_12\n      jump\t// in\n    tag_161:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap7\n      dup5\n      dup13\n      mstore\n      dup3\n      mstore\n      0x40\n      dup12\n      keccak256\n        /* \"src/SNDRStrategy.sol\":7462:7506  recipients[recipientAddress].totalAllocation */\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":7393:7520  AllocationUpdated(... */\n      log2\n        /* \"src/SNDRStrategy.sol\":7158:7161  i++ */\n      tag_21\n      jump\t// in\n    tag_159:\n        /* \"src/SNDRStrategy.sol\":7112:7125  uint256 i = 0 */\n      jump(tag_156)\n        /* \"src/SNDRStrategy.sol\":7127:7156  i < recipientAddresses.length */\n    tag_157:\n      pop\n      swap2\n      pop\n      swap2\n        /* \"src/SNDRStrategy.sol\":7549:7567  totalAllocated > 0 */\n      dup2\n      iszero\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_164\n      jumpi\n      swap2\n      0x40\n      swap2\n        /* \"src/SNDRStrategy.sol\":7606:7707  BatchAllocationCompleted(... */\n      0xb41462b4bb729cf768173ceba7cc740624558176f07a40ac23a5f8fcdb6c4abd\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap4\n      mload\n      swap2\n      dup4\n      mload\n      swap3\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n        /* \"src/SNDRStrategy.sol\":7606:7707  BatchAllocationCompleted(... */\n      log1\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_164:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x72, 0x139bc8199d5b991cc8185b1b1bd8d85d1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_144:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      0x17\n      0x24\n      dup3\n      add\n      mstore\n      0x4d69736d61746368656420696e70757420617272617973000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_142:\n      dup3\n      mload\n      dup2\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      dup7\n      swap2\n      add\n      jump(tag_141)\n    tag_139:\n      dup5\n      dup1\n      revert\n    tag_135:\n      dup3\n      dup1\n      revert\n    tag_133:\n      dup4\n      dup1\n      revert\n    tag_131:\n      dup2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_166\n      jumpi\n      dup2\n      mstore\n      swap1\n      dup8\n      add\n      swap1\n      dup8\n      add\n      jump(tag_130)\n    tag_166:\n      dup8\n      dup1\n      revert\n    tag_128:\n      dup7\n      dup1\n      revert\n    tag_117:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x18\n      0x24\n      dup3\n      add\n      mstore\n      0x416c6c6f636174696f6e206973206e6f74206163746976650000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"src/SNDRStrategy.sol\":13425:13519  block.timestamp >= allocationStartTime &&... */\n    tag_115:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap1\n      pop\n      0xc0\n      shr\n        /* \"src/SNDRStrategy.sol\":13425:13440  block.timestamp */\n      timestamp\n        /* \"src/SNDRStrategy.sol\":13483:13519  block.timestamp <= allocationEndTime */\n      gt\n      iszero\n        /* \"src/SNDRStrategy.sol\":13425:13519  block.timestamp >= allocationStartTime &&... */\n      codesize\n      jump(tag_116)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_84:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x40))\n      calldataload(0x04)\n      calldataload(0x24)\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_135\n      jumpi\n      tag_174\n      swap1\n      calldatasize\n      swap1\n      0x04\n      add\n      tag_8\n      jump\t// in\n    tag_174:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5630:5694  modifier onlyAllo() {... */\n      swap1\n      tag_175\n      tag_14\n      jump\t// in\n    tag_175:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload(0x01)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8424:8469  if (poolId != 0) revert ALREADY_INITIALIZED() */\n      tag_176\n      jumpi\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8556:8568  _poolId == 0 */\n      dup1\n      iszero\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8552:8586  if (_poolId == 0) revert INVALID() */\n      tag_178\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x01\n      sstore\n      0x80\n      dup2\n      dup1\n      mload\n        /* \"src/SNDRStrategy.sol\":3223:3274  abi.decode(_data, (uint64, uint64, uint64, uint64)) */\n      dup2\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sub\n      slt\n      tag_180\n      jumpi\n        /* \"src/SNDRStrategy.sol\":3223:3274  abi.decode(_data, (uint64, uint64, uint64, uint64)) */\n      dup1\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_182\n      0x20\n        /* \"src/SNDRStrategy.sol\":3424:3442  _allocationEndTime */\n      tag_183\n        /* \"src/SNDRStrategy.sol\":3223:3274  abi.decode(_data, (uint64, uint64, uint64, uint64)) */\n      swap4\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_17\n      jump\t// in\n    tag_182:\n      swap1\n      tag_184\n      0x40\n      dup3\n      add\n      tag_17\n      jump\t// in\n    tag_184:\n      tag_185\n      0x80\n      tag_186\n      0x60\n      dup6\n      add\n      tag_17\n      jump\t// in\n    tag_186:\n      swap4\n      add\n      tag_17\n      jump\t// in\n    tag_185:\n        /* \"src/SNDRStrategy.sol\":3424:3442  _allocationEndTime */\n      swap3\n      tag_18\n      jump\t// in\n    tag_183:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_180:\n      pop\n      dup1\n      revert\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8552:8586  if (_poolId == 0) revert INVALID() */\n    tag_178:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x7fcce2a9)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8577:8586  INVALID() */\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x04\n      swap1\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8577:8586  INVALID() */\n      revert\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8424:8469  if (poolId != 0) revert ALREADY_INITIALIZED() */\n    tag_176:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x439a74c9)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8448:8469  ALREADY_INITIALIZED() */\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x04\n      swap1\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":8448:8469  ALREADY_INITIALIZED() */\n      revert\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_82:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x20))\n      0x60\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      tag_191\n      swap1\n      0x40\n      swap1\n      dup4\n      tag_192\n      tag_5\n      jump\t// in\n    tag_192:\n      and\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":1105:1152  mapping(address => Recipient) public recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256\n      swap2\n      dup3\n      sload\n      and\n        /* \"src/SNDRStrategy.sol\":1105:1152  mapping(address => Recipient) public recipients */\n      swap2\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0xff\n        /* \"src/SNDRStrategy.sol\":1105:1152  mapping(address => Recipient) public recipients */\n      0x02\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"src/SNDRStrategy.sol\":1105:1152  mapping(address => Recipient) public recipients */\n      dup4\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"src/SNDRStrategy.sol\":1105:1152  mapping(address => Recipient) public recipients */\n      swap3\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      and\n      swap1\n      mload(0x40)\n      swap4\n      dup5\n      mstore\n      0x20\n      dup5\n      add\n      mstore\n      0x40\n      dup4\n      add\n      swap1\n      tag_11\n      jump\t// in\n    tag_191:\n      return\n    tag_80:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap1\n      0xff\n      swap1\n        /* \"src/SNDRStrategy.sol\":10148:10179  recipients[_recipientId].status */\n      0x02\n      swap1\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x40\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_197\n      tag_5\n      jump\t// in\n    tag_197:\n      and\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":10148:10158  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup6\n      mstore\n      keccak256\n        /* \"src/SNDRStrategy.sol\":10148:10179  recipients[_recipientId].status */\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      and\n      tag_191\n      mload(0x40)\n      dup1\n      swap3\n      tag_11\n      jump\t// in\n    tag_78:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0x20\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":1308:1341  uint64 public registrationEndTime */\n      0x0a\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      0x40\n      shr\n      and\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_76:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0xff\n      0x20\n      swap2\n      sload\n      and\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_74:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0x20\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":1347:1380  uint64 public allocationStartTime */\n      0x0a\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      0x80\n      shr\n      and\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_72:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x20))\n      0x40\n      tag_215\n      tag_5\n      jump\t// in\n    tag_215:\n      swap2\n      dup1\n      dup3\n      dup1\n      mload\n      tag_216\n      dup2\n      tag_1\n      jump\t// in\n    tag_216:\n      dup3\n      dup2\n      mstore\n      dup3\n      0x20\n      dup3\n      add\n      mstore\n      add\n      mstore\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup1\n      swap4\n      and\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":12323:12333  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256\n      mload(0x40)\n      swap1\n      tag_217\n      dup3\n      tag_1\n      jump\t// in\n    tag_217:\n      dup3\n      dup2\n      sload\n      and\n      dup3\n      mstore\n      0xff\n      0x02\n      0x01\n      dup4\n      add\n      sload\n      swap3\n      0x20\n      dup6\n      add\n      swap4\n      dup5\n      mstore\n      add\n      sload\n      and\n      swap1\n      0x40\n      dup4\n      add\n      swap1\n        /* \"src/SNDRStrategy.sol\":12323:12333  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup4\n      lt\n      iszero\n      tag_218\n      jumpi\n      0x60\n      swap5\n      tag_191\n      swap4\n      dup4\n      mstore\n      mload(0x40)\n      swap5\n      mload\n      and\n      dup5\n      mstore\n      mload\n      0x20\n      dup5\n      add\n      mstore\n      mload\n      0x40\n      dup4\n      add\n      swap1\n      tag_11\n      jump\t// in\n    tag_218:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n    tag_70:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x40))\n      sub(shl(0x40, 0x01), 0x01)\n      calldataload(0x04)\n      dup2\n      dup2\n      gt\n      tag_135\n      jumpi\n      tag_227\n      swap1\n      calldatasize\n      swap1\n      0x04\n      add\n      tag_6\n      jump\t// in\n    tag_227:\n      swap2\n      0x24\n      swap2\n      dup3\n      calldataload\n      swap1\n      dup1\n      dup3\n      gt\n      tag_135\n      jumpi\n      calldatasize\n      0x23\n      dup4\n      add\n      slt\n      iszero\n      tag_135\n      jumpi\n      dup2\n      0x04\n      add\n      calldataload\n      tag_232\n      dup2\n      tag_4\n      jump\t// in\n    tag_232:\n      swap3\n      tag_233\n      mload(0x40)\n      swap5\n      dup6\n      tag_3\n      jump\t// in\n    tag_233:\n      dup2\n      dup5\n      mstore\n      0x20\n      swap6\n      dup1\n      dup8\n      dup7\n      add\n      swap4\n      0x05\n      shl\n      dup4\n      add\n      add\n      swap4\n      calldatasize\n      dup6\n      gt\n      tag_128\n      jumpi\n      dup2\n      dup4\n      add\n      swap4\n    tag_236:\n      dup6\n      dup6\n      lt\n      tag_237\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup4\n      mload\n      swap1\n      dup1\n      mload\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11722:11753  recipientLength != _data.length */\n      dup3\n      sub\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11718:11778  if (recipientLength != _data.length) revert ARRAY_MISMATCH() */\n      tag_239\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_241\n      dup3\n      swap6\n      swap4\n      swap6\n      tag_4\n      jump\t// in\n    tag_241:\n      swap3\n      tag_242\n      mload(0x40)\n      swap5\n      dup6\n      tag_3\n      jump\t// in\n    tag_242:\n      dup3\n      dup5\n      mstore\n      not(0x1f)\n      tag_243\n      dup5\n      tag_4\n      jump\t// in\n    tag_243:\n      add\n      dup7\n    tag_244:\n      dup2\n      dup2\n      lt\n      tag_245\n      jumpi\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11873:11882  uint256 i */\n      pop\n      pop\n      dup6\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11884:11903  i < recipientLength */\n    tag_247:\n      dup4\n      dup2\n      lt\n      tag_248\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      swap2\n      dup1\n      dup4\n      add\n      swap1\n      dup1\n      dup5\n      mstore\n      dup3\n      mload\n      dup1\n      swap3\n      mstore\n      dup1\n      0x40\n      dup6\n      add\n      swap4\n      add\n      swap5\n    tag_250:\n      dup3\n      dup2\n      lt\n      tag_251\n      jumpi\n      dup5\n      dup5\n      sub\n      dup6\n      return\n    tag_251:\n      dup6\n      mload\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup6\n      mstore\n      dup3\n      add\n      mload\n      dup5\n      dup4\n      add\n      mstore\n      swap5\n      dup2\n      add\n      swap5\n      0x40\n      swap1\n      swap4\n      add\n      swap3\n      0x01\n      add\n      jump(tag_250)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11873:11882  uint256 i */\n    tag_248:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap4\n      swap6\n      swap4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11944:11960  _recipientIds[i] */\n      tag_253\n      dup3\n      dup5\n      tag_13\n      jump\t// in\n    tag_253:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload\n      and\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11962:11970  _data[i] */\n      swap1\n      tag_254\n      dup2\n      dup6\n      tag_13\n      jump\t// in\n    tag_254:\n      pop\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x00\n      dup8\n      mload(0x40)\n      tag_255\n      dup2\n      tag_2\n      jump\t// in\n    tag_255:\n      dup3\n      dup2\n      mstore\n      add\n      mstore\n      dup2\n      dup7\n      mstore\n        /* \"src/SNDRStrategy.sol\":9748:9758  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup8\n      mstore\n      0x01\n      swap2\n      dup3\n      0x40\n      dup9\n      keccak256\n        /* \"src/SNDRStrategy.sol\":9748:9788  recipients[_recipientId].totalAllocation */\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap2\n      tag_256\n      dup4\n      tag_2\n      jump\t// in\n    tag_256:\n      dup3\n      mstore\n        /* \"src/SNDRStrategy.sol\":9660:9803  PayoutSummary({... */\n      dup9\n      dup3\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11920:11971  payouts[i] = _getPayout(_recipientIds[i], _data[i]) */\n      tag_257\n      dup3\n      dup11\n      tag_13\n      jump\t// in\n    tag_257:\n      mstore\n      tag_258\n      dup2\n      dup10\n      tag_13\n      jump\t// in\n    tag_258:\n      pop\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      add\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11873:11882  uint256 i */\n      swap6\n      swap4\n      swap6\n      jump(tag_247)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_245:\n      dup7\n      swap1\n      0x40\n      swap9\n      swap7\n      swap9\n      mload\n      tag_259\n      dup2\n      tag_2\n      jump\t// in\n    tag_259:\n      0x00\n      dup2\n      mstore\n      0x00\n      dup4\n      dup3\n      add\n      mstore\n      dup3\n      dup3\n      dup12\n      add\n      add\n      mstore\n      add\n      swap7\n      swap5\n      swap7\n      jump(tag_244)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11718:11778  if (recipientLength != _data.length) revert ARRAY_MISMATCH() */\n    tag_239:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe1, 0x3da4c02b)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11762:11778  ARRAY_MISMATCH() */\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x04\n      swap1\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":11762:11778  ARRAY_MISMATCH() */\n      revert\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_237:\n      dup5\n      calldataload\n      dup3\n      dup2\n      gt\n      tag_260\n      jumpi\n      dup10\n      swap2\n      tag_262\n      dup4\n      swap3\n      dup7\n      calldatasize\n      swap2\n      dup10\n      add\n      add\n      tag_8\n      jump\t// in\n    tag_262:\n      dup2\n      mstore\n      add\n      swap5\n      add\n      swap4\n      jump(tag_236)\n    tag_260:\n      dup9\n      dup1\n      revert\n    tag_68:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0x20\n      mload(0x40)\n        /* \"lib/allo-v2/contracts/core/libraries/Native.sol\":4445:4487  0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE */\n      0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_66:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0x20\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":1267:1302  uint64 public registrationStartTime */\n      0x0a\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      and\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_64:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      sload(0x03)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_62:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_279\n      tag_16\n      jump\t// in\n    tag_279:\n        /* \"src/SNDRStrategy.sol\":12566:12571  token */\n      0x06\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n        /* \"src/SNDRStrategy.sol\":12566:12596  token.balanceOf(address(this)) */\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":12590:12594  this */\n      address\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x04\n        /* \"src/SNDRStrategy.sol\":12566:12596  token.balanceOf(address(this)) */\n      dup3\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      swap2\n      dup3\n      and\n        /* \"src/SNDRStrategy.sol\":12566:12596  token.balanceOf(address(this)) */\n      0x20\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup3\n      0x24\n      dup2\n      dup5\n        /* \"src/SNDRStrategy.sol\":12566:12596  token.balanceOf(address(this)) */\n      gas\n      staticcall\n      swap2\n      dup3\n      iszero\n      tag_280\n      jumpi\n      dup5\n      swap3\n      tag_282\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_283:\n        /* \"src/SNDRStrategy.sol\":12610:12630  remainingBalance > 0 */\n      pop\n      dup2\n        /* \"src/SNDRStrategy.sol\":12606:12702  if (remainingBalance > 0) {... */\n      tag_284\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup4\n      dup1\n      return\n        /* \"src/SNDRStrategy.sol\":12606:12702  if (remainingBalance > 0) {... */\n    tag_284:\n        /* \"src/SNDRStrategy.sol\":12674:12690  remainingBalance */\n      tag_286\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap3\n      sload(0x03)\n      and\n        /* \"src/SNDRStrategy.sol\":12674:12690  remainingBalance */\n      swap1\n      tag_26\n      jump\t// in\n    tag_286:\n        /* \"src/SNDRStrategy.sol\":12606:12702  if (remainingBalance > 0) {... */\n      codesize\n      dup1\n      dup1\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup4\n      dup1\n      return\n        /* \"src/SNDRStrategy.sol\":12566:12596  token.balanceOf(address(this)) */\n    tag_282:\n      swap1\n      swap2\n      pop\n      0x20\n      dup2\n      returndatasize\n      dup3\n      gt\n      tag_287\n      jumpi\n    tag_288:\n      dup2\n      tag_289\n      0x20\n      swap4\n      dup4\n      tag_3\n      jump\t// in\n    tag_289:\n      dup2\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sub\n      slt\n      tag_290\n      jumpi\n      mload\n        /* \"src/SNDRStrategy.sol\":12566:12596  token.balanceOf(address(this)) */\n      swap1\n      codesize\n      jump(tag_283)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_290:\n      0x00\n      dup1\n      revert\n        /* \"src/SNDRStrategy.sol\":12566:12596  token.balanceOf(address(this)) */\n    tag_287:\n      returndatasize\n      swap2\n      pop\n      jump(tag_288)\n    tag_280:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      returndatasize\n      dup7\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_60:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_296\n      tag_16\n      jump\t// in\n    tag_296:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x03\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      swap1\n      swap2\n      sstore\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup3\n      dup1\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_58:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x20))\n      calldataload(0x04)\n      swap1\n        /* \"src/SNDRStrategy.sol\":1158:1188  address[] public recipientList */\n      0x08\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"src/SNDRStrategy.sol\":1158:1188  address[] public recipientList */\n      dup3\n      lt\n      iszero\n      tag_96\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"src/SNDRStrategy.sol\":1158:1188  address[] public recipientList */\n      tag_303\n      dup4\n      tag_9\n      jump\t// in\n    tag_303:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap1\n      sload\n      mload(0x40)\n      0x03\n      swap3\n      swap1\n      swap3\n      shl\n      shr\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      return\n    tag_56:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x20))\n      tag_308\n      tag_5\n      jump\t// in\n    tag_308:\n      pop\n      0x20\n      mload(0x40)\n        /* \"src/SNDRStrategy.sol\":12916:12920  true */\n      0x01\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_54:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0x20\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":7417:7427  poolAmount */\n      0x02\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_52:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0x20\n        /* \"src/SNDRStrategy.sol\":1386:1417  uint64 public allocationEndTime */\n      0x0a\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      0xc0\n      shr\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_50:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0x20\n      mload(0x40)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":7218:7228  strategyId */\n      immutable(\"0x5d41b7f7850dfd9d2127fd7df8bb3dcd76be1dc8040e2470c8576cf5ab9832e3\")\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_48:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0x20\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":7032:7038  poolId */\n      0x01\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_46:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      0x20\n        /* \"src/SNDRStrategy.sol\":11991:12004  recipientList */\n      0x08\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_44:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x40))\n      tag_333\n      tag_5\n      jump\t// in\n    tag_333:\n      calldataload(0x24)\n      0x07\n      dup2\n      lt\n      iszero\n      tag_135\n      jumpi\n      0x20\n        /* \"src/SNDRStrategy.sol\":10677:10730  RecipientStatusUpdated(_recipientAddress, _newStatus) */\n      0x256c90eeec0565314afb6bdf67c3a909a88bd142e40d03c91a1f68e2a6bc35db\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      swap2\n      tag_336\n      tag_16\n      jump\t// in\n    tag_336:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap4\n      dup5\n      and\n      dup1\n      dup7\n      mstore\n      0x07\n      dup4\n      mstore\n      0x40\n      dup7\n      keccak256\n      sload\n      swap1\n      swap5\n        /* \"src/SNDRStrategy.sol\":10472:10603  require(... */\n      tag_337\n      swap2\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      and\n        /* \"src/SNDRStrategy.sol\":10493:10553  recipients[_recipientAddress].recipientAddress != address(0) */\n      iszero\n      iszero\n        /* \"src/SNDRStrategy.sol\":10472:10603  require(... */\n      tag_22\n      jump\t// in\n    tag_337:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup4\n      dup6\n      mstore\n      0x07\n      dup3\n      mstore\n        /* \"src/SNDRStrategy.sol\":10613:10662  recipients[_recipientAddress].status = _newStatus */\n      tag_338\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup2\n        /* \"src/SNDRStrategy.sol\":10613:10649  recipients[_recipientAddress].status */\n      0x02\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x40\n      dup9\n      keccak256\n        /* \"src/SNDRStrategy.sol\":10613:10649  recipients[_recipientAddress].status */\n      add\n        /* \"src/SNDRStrategy.sol\":10613:10662  recipients[_recipientAddress].status = _newStatus */\n      tag_19\n      jump\t// in\n    tag_338:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_339\n      mload(0x40)\n      dup1\n      swap3\n      tag_11\n      jump\t// in\n    tag_339:\n        /* \"src/SNDRStrategy.sol\":10677:10730  RecipientStatusUpdated(_recipientAddress, _newStatus) */\n      log2\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_42:\n      pop\n      tag_340\n      calldatasize\n      tag_10\n      jump\t// in\n    tag_340:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5630:5694  modifier onlyAllo() {... */\n      pop\n      tag_341\n      tag_14\n      jump\t// in\n    tag_341:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":6495:6573  modifier onlyInitialized() {... */\n      tag_342\n      tag_15\n      jump\t// in\n    tag_342:\n        /* \"src/SNDRStrategy.sol\":13113:13134  registrationStartTime */\n      0x0a\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0x40, 0x01), 0x01)\n      dup1\n      dup3\n      and\n        /* \"src/SNDRStrategy.sol\":13094:13109  block.timestamp */\n      timestamp\n        /* \"src/SNDRStrategy.sol\":13094:13134  block.timestamp >= registrationStartTime */\n      lt\n      iszero\n        /* \"src/SNDRStrategy.sol\":13094:13192  block.timestamp >= registrationStartTime &&... */\n      swap2\n      dup3\n      tag_343\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_344:\n      pop\n      pop\n      iszero\n      tag_345\n      jumpi\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_347\n      tag_20\n      jump\t// in\n    tag_347:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x40\n      dup2\n      dup1\n      mload\n        /* \"src/SNDRStrategy.sol\":5279:5350  abi.decode(... */\n      dup2\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sub\n      slt\n      tag_180\n      jumpi\n        /* \"src/SNDRStrategy.sol\":5279:5350  abi.decode(... */\n      0x20\n      swap2\n      dup3\n      dup3\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload\n      swap2\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      swap1\n      dup2\n      dup5\n      and\n      dup1\n      swap5\n      sub\n      tag_135\n      jumpi\n      0x40\n      add\n      mload\n      swap2\n      dup4\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":5382:5392  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup6\n      mstore\n      dup2\n      0x40\n      dup3\n      keccak256\n      sload\n      and\n      tag_352\n      jumpi\n      mload(0x40)\n      tag_354\n      dup2\n      tag_1\n      jump\t// in\n    tag_354:\n      dup5\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":5537:5690  Recipient({... */\n      dup6\n      dup2\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup5\n      dup2\n      mstore\n      0x40\n        /* \"src/SNDRStrategy.sol\":5537:5690  Recipient({... */\n      dup3\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap1\n      0x01\n      dup3\n      mstore\n      dup7\n      dup5\n      mstore\n        /* \"src/SNDRStrategy.sol\":5382:5392  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup9\n      mstore\n      dup5\n      0x40\n      dup6\n      keccak256\n      swap4\n      mload\n      and\n      shl(0xa0, 0xffffffffffffffffffffffff)\n      dup5\n      sload\n      and\n      or\n      dup4\n      sstore\n      mload\n      0x01\n      dup4\n      add\n      sstore\n      mload\n      swap1\n        /* \"src/SNDRStrategy.sol\":5382:5392  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup3\n      lt\n      iszero\n      tag_355\n      jumpi\n      swap1\n      0x02\n      tag_357\n      swap3\n      add\n      tag_19\n      jump\t// in\n    tag_357:\n        /* \"src/SNDRStrategy.sol\":5700:5713  recipientList */\n      0x08\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      swap1\n      shl(0x40, 0x01)\n      dup3\n      lt\n      iszero\n      tag_358\n      jumpi\n      pop\n      dup4\n      swap3\n        /* \"src/SNDRStrategy.sol\":5752:5808  RecipientRegistered(recipientAddress, initialAllocation) */\n      0x0695e999be8100bdb5bee8612337296508d527eae78c65b8f170eacb5a3b439d\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap3\n      tag_360\n      dup4\n      0x01\n      dup10\n      swap6\n      add\n        /* \"src/SNDRStrategy.sol\":5700:5713  recipientList */\n      0x08\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sstore\n      tag_9\n      jump\t// in\n    tag_360:\n      dup2\n      swap3\n      swap2\n      sload\n      swap1\n      0x03\n      shl\n      swap2\n      dup8\n      dup4\n      shl\n      swap3\n      shl\n      not\n      and\n      or\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":5752:5808  RecipientRegistered(recipientAddress, initialAllocation) */\n      log2\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n        /* \"src/SNDRStrategy.sol\":5823:5879  RecipientStatusUpdated(recipientAddress, Status.Pending) */\n      0x256c90eeec0565314afb6bdf67c3a909a88bd142e40d03c91a1f68e2a6bc35db\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup4\n      mload(0x40)\n      0x01\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":5823:5879  RecipientStatusUpdated(recipientAddress, Status.Pending) */\n      log2\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sstore(0x04, 0x01)\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_358:\n      shl(0xe0, 0x4e487b71)\n      dup2\n      mstore\n      mstore(0x04, 0x41)\n      0x24\n      swap1\n      revert\n    tag_355:\n      shl(0xe0, 0x4e487b71)\n      dup4\n      mstore\n      mstore(0x04, 0x21)\n      0x24\n      dup4\n      revert\n    tag_352:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n      dup7\n      swap1\n      mstore\n      0x1c\n      0x24\n      dup3\n      add\n      mstore\n      0x526563697069656e7420616c7265616479207265676973746572656400000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_345:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1a\n      0x24\n      dup3\n      add\n      mstore\n      0x526567697374726174696f6e206973206e6f7420616374697665000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"src/SNDRStrategy.sol\":13094:13192  block.timestamp >= registrationStartTime &&... */\n    tag_343:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x40\n      shr\n      and\n        /* \"src/SNDRStrategy.sol\":13094:13109  block.timestamp */\n      timestamp\n        /* \"src/SNDRStrategy.sol\":13154:13192  block.timestamp <= registrationEndTime */\n      gt\n      iszero\n      swap1\n      pop\n        /* \"src/SNDRStrategy.sol\":13094:13192  block.timestamp >= registrationStartTime &&... */\n      codesize\n      dup1\n      jump(tag_344)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_40:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x80))\n      calldataload(0x04)\n      sub(shl(0x40, 0x01), 0x01)\n      dup1\n      dup3\n      and\n      dup3\n      sub\n      tag_290\n      jumpi\n      calldataload(0x24)\n      dup2\n      dup2\n      and\n      dup2\n      sub\n      tag_290\n      jumpi\n      calldataload(0x44)\n      swap1\n      dup3\n      dup3\n      and\n      dup3\n      sub\n      tag_290\n      jumpi\n      calldataload(0x64)\n      swap3\n      dup4\n      and\n      dup4\n      sub\n      tag_290\n      jumpi\n        /* \"src/SNDRStrategy.sol\":11754:11772  _allocationEndTime */\n      tag_183\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      swap4\n      tag_374\n      tag_16\n      jump\t// in\n    tag_374:\n        /* \"src/SNDRStrategy.sol\":11754:11772  _allocationEndTime */\n      tag_18\n      jump\t// in\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_38:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n        /* \"src/SNDRStrategy.sol\":928:953  ISNDRCore public sndrCore */\n      0x05\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_36:\n      pop\n      jumpi(tag_96, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      mload(0x40)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":6860:6864  allo */\n      immutable(\"0xbd0af7246ac7aa3e59281abc6e001c8d20085f3ebd8f2bcaf145913d94136a44\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_34:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x20))\n      calldataload(0x04)\n        /* \"src/SNDRStrategy.sol\":1194:1232  address[] public whitelistedCollectors */\n      0x09\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"src/SNDRStrategy.sol\":1194:1232  address[] public whitelistedCollectors */\n      dup2\n      lt\n      iszero\n      tag_180\n      jumpi\n      0x09\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x00\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_aef723aaf2a9471d0444688035cd22ee9e9408f4d3390ce0a2a80b76aeab390a\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      add\n      sload\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_32:\n      pop\n      jumpi(tag_96, callvalue)\n      jumpi(tag_96, slt(add(not(0x03), calldatasize), 0x60))\n      calldataload(0x04)\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_180\n      jumpi\n      tag_395\n      swap1\n      calldatasize\n      swap1\n      0x04\n      add\n      tag_6\n      jump\t// in\n    tag_395:\n      calldataload(0x24)\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_135\n      jumpi\n      tag_398\n      swap1\n      calldatasize\n      swap1\n      0x04\n      add\n      tag_8\n      jump\t// in\n    tag_398:\n      calldataload(0x44)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_133\n      jumpi\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5630:5694  modifier onlyAllo() {... */\n      tag_401\n      tag_14\n      jump\t// in\n    tag_401:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":6495:6573  modifier onlyInitialized() {... */\n      tag_402\n      tag_15\n      jump\t// in\n    tag_402:\n        /* \"src/SNDRStrategy.sol\":13769:13786  allocationEndTime */\n      0x0a\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      0xc0\n      shr\n        /* \"src/SNDRStrategy.sol\":13751:13766  block.timestamp */\n      timestamp\n        /* \"src/SNDRStrategy.sol\":13751:13786  block.timestamp > allocationEndTime */\n      gt\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      iszero\n      tag_403\n      jumpi\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5976:5983  _sender */\n      tag_405\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      swap1\n      tag_406\n      tag_20\n      jump\t// in\n    tag_406:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":5976:5983  _sender */\n      tag_24\n      jump\t// in\n    tag_405:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x20\n      dup2\n      dup1\n      mload\n        /* \"src/SNDRStrategy.sol\":8321:8349  abi.decode(_data, (uint256)) */\n      dup2\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sub\n      slt\n      tag_135\n      jumpi\n      0x20\n        /* \"src/SNDRStrategy.sol\":8321:8349  abi.decode(_data, (uint256)) */\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload\n      swap1\n      dup1\n      mload\n      tag_409\n      dup2\n      tag_4\n      jump\t// in\n    tag_409:\n      swap1\n      tag_410\n      mload(0x40)\n      swap3\n      dup4\n      tag_3\n      jump\t// in\n    tag_410:\n      dup1\n      dup3\n      mstore\n      tag_411\n      not(0x1f)\n      swap2\n      tag_4\n      jump\t// in\n    tag_411:\n      add\n      calldatasize\n      0x20\n      dup4\n      add\n      calldatacopy\n        /* \"src/SNDRStrategy.sol\":8471:8498  uint256 totalAllocation = 0 */\n      dup4\n      swap2\n      dup3\n        /* \"src/SNDRStrategy.sol\":8554:8557  i++ */\n    tag_412:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup2\n      mload\n        /* \"src/SNDRStrategy.sol\":8528:8552  i < _recipientIds.length */\n      dup5\n      lt\n      iszero\n      tag_413\n      jumpi\n        /* \"src/SNDRStrategy.sol\":8554:8557  i++ */\n      tag_416\n      swap1\n        /* \"src/SNDRStrategy.sol\":8648:8681  totalAllocation += allocations[i] */\n      tag_415\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":8601:8617  _recipientIds[i] */\n      tag_417\n      dup8\n      dup7\n      tag_13\n      jump\t// in\n    tag_417:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload\n      and\n      dup9\n      mstore\n        /* \"src/SNDRStrategy.sol\":8590:8600  recipients */\n      0x07\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x01\n      0x40\n      dup10\n      keccak256\n        /* \"src/SNDRStrategy.sol\":8590:8634  recipients[_recipientIds[i]].totalAllocation */\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"src/SNDRStrategy.sol\":8573:8634  allocations[i] = recipients[_recipientIds[i]].totalAllocation */\n      tag_418\n      dup8\n      dup8\n      tag_13\n      jump\t// in\n    tag_418:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"src/SNDRStrategy.sol\":8667:8681  allocations[i] */\n      tag_419\n      dup7\n      dup7\n      tag_13\n      jump\t// in\n    tag_419:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload\n        /* \"src/SNDRStrategy.sol\":8648:8681  totalAllocation += allocations[i] */\n      swap1\n      tag_12\n      jump\t// in\n    tag_415:\n        /* \"src/SNDRStrategy.sol\":8554:8557  i++ */\n      swap4\n      tag_21\n      jump\t// in\n    tag_416:\n        /* \"src/SNDRStrategy.sol\":8513:8526  uint256 i = 0 */\n      swap3\n      jump(tag_412)\n        /* \"src/SNDRStrategy.sol\":8528:8552  i < _recipientIds.length */\n    tag_413:\n      dup5\n      dup7\n      swap4\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup3\n        /* \"src/SNDRStrategy.sol\":8709:8719  poolAmount */\n      0x02\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"src/SNDRStrategy.sol\":8709:8738  poolAmount >= totalAllocation */\n      lt\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_420\n      jumpi\n        /* \"src/SNDRStrategy.sol\":8870:8875  token */\n      0x06\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"src/SNDRStrategy.sol\":8897:8905  sndrCore */\n      0x05\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"src/SNDRStrategy.sol\":8908:8923  totalAllocation */\n      tag_422\n      swap2\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup6\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      swap2\n      and\n        /* \"src/SNDRStrategy.sol\":8908:8923  totalAllocation */\n      tag_26\n      jump\t// in\n    tag_422:\n        /* \"src/SNDRStrategy.sol\":8897:8905  sndrCore */\n      0x05\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      sload(0x01)\n        /* \"src/SNDRStrategy.sol\":8870:8875  token */\n      0x06\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      swap1\n      swap4\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      swap4\n      swap3\n      swap1\n      swap2\n      and\n        /* \"src/SNDRStrategy.sol\":8982:9167  sndrCore.handleDistribution(... */\n      dup4\n      extcodesize\n      iszero\n      tag_166\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe6, 0x8cd625)\n        /* \"src/SNDRStrategy.sol\":8982:9167  sndrCore.handleDistribution(... */\n      dup2\n      mstore\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x04\n        /* \"src/SNDRStrategy.sol\":8982:9167  sndrCore.handleDistribution(... */\n      dup2\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap6\n      swap1\n      swap6\n      mstore\n      0x24\n      dup6\n      add\n      mstore\n      0xc0\n      0x44\n      dup6\n      add\n      mstore\n      dup7\n      swap3\n      dup5\n      swap3\n      swap1\n      swap2\n      tag_425\n      0xc4\n      dup6\n      add\n      dup10\n      tag_25\n      jump\t// in\n    tag_425:\n      not(0x03)\n      dup6\n      dup3\n      sub\n      add\n      0x64\n      dup7\n      add\n      mstore\n      0x20\n      dup1\n      dup5\n      mload\n      swap3\n      dup4\n      dup2\n      mstore\n      add\n      swap4\n      add\n      swap1\n      dup7\n    tag_426:\n      dup2\n      dup2\n      lt\n      tag_427\n      jumpi\n      pop\n      pop\n      pop\n      0x84\n      dup5\n      add\n      mstore\n      not(0x03)\n      dup4\n      dup3\n      sub\n      add\n      0xa4\n      dup5\n      add\n      mstore\n      0x20\n        /* \"src/SNDRStrategy.sol\":9136:9157  whitelistedCollectors */\n      0x09\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      swap2\n      dup3\n      dup2\n      mstore\n      add\n      swap1\n        /* \"src/SNDRStrategy.sol\":9136:9157  whitelistedCollectors */\n      0x09\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup6\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_aef723aaf2a9471d0444688035cd22ee9e9408f4d3390ce0a2a80b76aeab390a\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap1\n      dup6\n    tag_429:\n      dup2\n      dup2\n      lt\n      tag_430\n      jumpi\n        /* \"src/SNDRStrategy.sol\":8982:9167  sndrCore.handleDistribution(... */\n      pop\n      pop\n      pop\n      dup4\n      dup4\n      dup1\n      swap3\n      sub\n      swap3\n      gas\n      call\n      dup1\n      iszero\n      tag_280\n      jumpi\n      tag_434\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_435:\n      pop\n        /* \"src/SNDRStrategy.sol\":9183:9235  DistributionExecuted(_recipientIds, totalAllocation) */\n      0x6215df0421b8b71ffbc92898b478b5ad9520ec5034d7c686bbdc7afdfad068e8\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap2\n      tag_436\n      swap2\n      mload(0x40)\n      swap3\n      dup4\n      swap3\n      0x40\n      dup5\n      mstore\n      0x40\n      dup5\n      add\n      swap1\n      tag_25\n      jump\t// in\n    tag_436:\n      swap1\n      0x20\n      dup4\n      add\n      mstore\n        /* \"src/SNDRStrategy.sol\":9183:9235  DistributionExecuted(_recipientIds, totalAllocation) */\n      sub\n      swap1\n      log1\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sstore(0x04, 0x01)\n      dup1\n      return\n        /* \"src/SNDRStrategy.sol\":8982:9167  sndrCore.handleDistribution(... */\n    tag_434:\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup2\n      swap5\n      swap3\n      swap5\n      gt\n      tag_437\n      jumpi\n      0x40\n      mstore\n      swap2\n        /* \"src/SNDRStrategy.sol\":9183:9235  DistributionExecuted(_recipientIds, totalAllocation) */\n      0x6215df0421b8b71ffbc92898b478b5ad9520ec5034d7c686bbdc7afdfad068e8\n        /* \"src/SNDRStrategy.sol\":8982:9167  sndrCore.handleDistribution(... */\n      jump(tag_435)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_437:\n      shl(0xe0, 0x4e487b71)\n      dup3\n      mstore\n      mstore(0x04, 0x41)\n      0x24\n      dup3\n      revert\n    tag_430:\n      dup3\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup5\n      mstore\n      dup11\n      swap7\n      pop\n      dup8\n      swap6\n      pop\n      0x20\n      swap1\n      swap4\n      add\n      swap3\n      0x01\n      swap3\n      dup4\n      add\n      swap3\n      add\n      jump(tag_429)\n    tag_427:\n      dup3\n      mload\n      dup6\n      mstore\n      dup12\n      swap8\n      pop\n      dup9\n      swap7\n      pop\n      0x20\n      swap5\n      dup6\n      add\n      swap5\n      swap1\n      swap3\n      add\n      swap2\n      0x01\n      add\n      jump(tag_426)\n    tag_420:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x506f6f6c20616c6c6f636174696f6e2066756e647320746f6f206c6f77000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_403:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n      mstore\n      0x416c6c6f636174696f6e20706572696f6420686173206e6f7420656e64656400\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_30:\n      pop\n      jumpi(tag_96, callvalue)\n      0x20\n      swap1\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_96\n      jumpi\n      sub(shl(0x40, 0x01), 0x01)\n      calldataload(0x04)\n      dup2\n      dup2\n      gt\n      tag_135\n      jumpi\n      tag_445\n      swap1\n      calldatasize\n      swap1\n      0x04\n      add\n      tag_6\n      jump\t// in\n    tag_445:\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      swap1\n      tag_446\n      tag_16\n      jump\t// in\n    tag_446:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup2\n      mload\n      swap1\n      dup2\n      gt\n      tag_449\n      jumpi\n      shl(0x40, 0x01)\n      dup2\n      gt\n      tag_449\n      jumpi\n        /* \"src/SNDRStrategy.sol\":10980:11029  whitelistedCollectors = _newWhitelistedCollectors */\n      0x09\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      dup2\n        /* \"src/SNDRStrategy.sol\":10980:11029  whitelistedCollectors = _newWhitelistedCollectors */\n      0x09\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sstore\n      dup1\n      dup3\n      lt\n      tag_451\n      jumpi\n    tag_452:\n      pop\n      dup4\n      dup3\n      add\n        /* \"src/SNDRStrategy.sol\":10980:11029  whitelistedCollectors = _newWhitelistedCollectors */\n      0x09\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup5\n      mstore\n      dup4\n    tag_453:\n      dup3\n      dup2\n      lt\n      tag_454\n      jumpi\n      mload(0x40)\n      dup7\n      dup2\n      mstore\n      dup6\n      swap1\n        /* \"src/SNDRStrategy.sol\":11044:11099  WhitelistedCollectorsUpdated(_newWhitelistedCollectors) */\n      0x0ba55fca14ca25313d8196abbee269381ad67be27729f5073609a3eb9318391a\n      swap1\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n      tag_456\n      dup2\n      dup12\n      add\n      dup10\n      tag_25\n      jump\t// in\n    tag_456:\n        /* \"src/SNDRStrategy.sol\":11044:11099  WhitelistedCollectorsUpdated(_newWhitelistedCollectors) */\n      sub\n      swap1\n      log1\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_454:\n      dup2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      0x00\n      dup1\n      mload\n      0x20\n      data_aef723aaf2a9471d0444688035cd22ee9e9408f4d3390ce0a2a80b76aeab390a\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      dup3\n      add\n      sstore\n      swap1\n      dup6\n      add\n      swap1\n      0x01\n      add\n      jump(tag_453)\n    tag_451:\n      dup2\n      0x00\n      dup1\n      mload\n      0x20\n      data_aef723aaf2a9471d0444688035cd22ee9e9408f4d3390ce0a2a80b76aeab390a\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      dup3\n      add\n      swap2\n      add\n    tag_457:\n      dup2\n      dup2\n      lt\n      tag_458\n      jumpi\n      pop\n      jump(tag_452)\n    tag_458:\n      dup5\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_457)\n    tag_449:\n      shl(0xe0, 0x4e487b71)\n      dup4\n      mstore\n      mstore(0x04, 0x41)\n      0x24\n      dup4\n      revert\n    tag_1:\n      0x60\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      sub(shl(0x40, 0x01), 0x01)\n      dup3\n      gt\n      or\n      tag_460\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_460:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_2:\n      0x40\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      sub(shl(0x40, 0x01), 0x01)\n      dup3\n      gt\n      or\n      tag_460\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_3:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      sub(shl(0x40, 0x01), 0x01)\n      dup3\n      gt\n      or\n      tag_460\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_4:\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_460\n      jumpi\n      0x05\n      shl\n      0x20\n      add\n      swap1\n      jump\t// out\n    tag_5:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_290\n      jumpi\n      jump\t// out\n    tag_6:\n      dup2\n      0x1f\n      dup3\n      add\n      slt\n      iszero\n      tag_290\n      jumpi\n      dup1\n      calldataload\n      swap2\n      tag_472\n      dup4\n      tag_4\n      jump\t// in\n    tag_472:\n      swap3\n      tag_473\n      mload(0x40)\n      swap5\n      dup6\n      tag_3\n      jump\t// in\n    tag_473:\n      dup1\n      dup5\n      mstore\n      0x20\n      swap3\n      dup4\n      dup1\n      dup7\n      add\n      swap3\n      0x05\n      shl\n      dup3\n      add\n      add\n      swap3\n      dup4\n      gt\n      tag_290\n      jumpi\n      dup4\n      add\n      swap1\n    tag_476:\n      dup3\n      dup3\n      lt\n      tag_477\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      swap1\n      jump\t// out\n    tag_477:\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_290\n      jumpi\n      dup2\n      mstore\n      swap1\n      dup4\n      add\n      swap1\n      dup4\n      add\n      jump(tag_476)\n    tag_7:\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_460\n      jumpi\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      swap1\n      jump\t// out\n    tag_8:\n      dup2\n      0x1f\n      dup3\n      add\n      slt\n      iszero\n      tag_290\n      jumpi\n      dup1\n      calldataload\n      swap1\n      tag_485\n      dup3\n      tag_7\n      jump\t// in\n    tag_485:\n      swap3\n      tag_486\n      mload(0x40)\n      swap5\n      dup6\n      tag_3\n      jump\t// in\n    tag_486:\n      dup3\n      dup5\n      mstore\n      0x20\n      dup4\n      dup4\n      add\n      add\n      gt\n      tag_290\n      jumpi\n      dup2\n      0x00\n      swap3\n      0x20\n      dup1\n      swap4\n      add\n      dup4\n      dup7\n      add\n      calldatacopy\n      dup4\n      add\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_9:\n        /* \"src/SNDRStrategy.sol\":5700:5713  recipientList */\n      0x08\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      dup2\n      lt\n      iszero\n      tag_489\n      jumpi\n        /* \"src/SNDRStrategy.sol\":5700:5713  recipientList */\n      0x08\n      0x00\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mstore\n      0xf3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3\n      add\n      swap1\n      0x00\n      swap1\n      jump\t// out\n    tag_489:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_10:\n      0x40\n      not(0x03)\n      dup3\n      add\n      slt\n      tag_290\n      jumpi\n      calldataload(0x04)\n      swap1\n      sub(shl(0x40, 0x01), 0x01)\n      dup3\n      gt\n      tag_290\n      jumpi\n      tag_495\n      swap2\n      0x04\n      add\n      tag_8\n      jump\t// in\n    tag_495:\n      swap1\n      calldataload(0x24)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_290\n      jumpi\n      swap1\n      jump\t// out\n    tag_11:\n      swap1\n      0x07\n      dup3\n      lt\n      iszero\n      tag_218\n      jumpi\n      mstore\n      jump\t// out\n    tag_12:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_500\n      jumpi\n      jump\t// out\n    tag_500:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_13:\n      dup1\n      mload\n      dup3\n      lt\n      iszero\n      tag_489\n      jumpi\n      0x20\n      swap2\n      0x05\n      shl\n      add\n      add\n      swap1\n      jump\t// out\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":12814:12925  function _checkOnlyAllo() internal view {... */\n    tag_14:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":12890:12894  allo */\n      immutable(\"0xbd0af7246ac7aa3e59281abc6e001c8d20085f3ebd8f2bcaf145913d94136a44\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      and\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":12868:12878  msg.sender */\n      caller\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":12868:12895  msg.sender != address(allo) */\n      sub\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":12864:12918  if (msg.sender != address(allo)) revert UNAUTHORIZED() */\n      tag_504\n      jumpi\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":12814:12925  function _checkOnlyAllo() internal view {... */\n      jump\t// out\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":12864:12918  if (msg.sender != address(allo)) revert UNAUTHORIZED() */\n    tag_504:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x075fd2b1)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":12904:12918  UNAUTHORIZED() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13771:13876  function _checkOnlyInitialized() internal view {... */\n    tag_15:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13832:13838  poolId */\n      0x01\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13832:13843  poolId == 0 */\n      iszero\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13828:13869  if (poolId == 0) revert NOT_INITIALIZED() */\n      tag_506\n      jumpi\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13771:13876  function _checkOnlyInitialized() internal view {... */\n      jump\t// out\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13828:13869  if (poolId == 0) revert NOT_INITIALIZED() */\n    tag_506:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe2, 0x0f68fe63)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13852:13869  NOT_INITIALIZED() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_16:\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x03\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      sub\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_508\n      jumpi\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_508:\n      0x64\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x20\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_17:\n      mload\n      swap1\n      sub(shl(0x40, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_290\n      jumpi\n      jump\t// out\n        /* \"src/SNDRStrategy.sol\":3757:4739  function _updatePoolTimestamps(... */\n    tag_18:\n      swap2\n      swap3\n      swap2\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap1\n      dup2\n      and\n      swap2\n      dup2\n      dup2\n      and\n        /* \"src/SNDRStrategy.sol\":3982:4027  _registrationStartTime < _registrationEndTime */\n      dup1\n      dup5\n      lt\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      iszero\n      tag_512\n      jumpi\n      dup3\n      dup7\n      and\n      swap1\n      dup4\n      dup7\n      and\n        /* \"src/SNDRStrategy.sol\":4110:4151  _allocationStartTime < _allocationEndTime */\n      dup3\n      lt\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      iszero\n      tag_514\n      jumpi\n        /* \"src/SNDRStrategy.sol\":4232:4276  _registrationEndTime <= _allocationStartTime */\n      gt\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_516\n      jumpi\n        /* \"src/SNDRStrategy.sol\":4573:4732  TimestampsUpdated(... */\n      0x5be4d64080f489b6fef34a2d8ac3084c5735e83b3789aabc4e6aeab193e7967f\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap5\n      dup4\n      0xffffffffffffffff0000000000000000\n      0x80\n      swap7\n      shl(0xc0, sub(shl(0x40, 0x01), 0x01))\n      swap1\n      0xc0\n      shl\n      and\n      swap4\n      0x40\n      shl\n      and\n      or\n      swap1\n      sub(shl(0x40, 0x01), 0x01)\n      dup7\n      shl\n      swap1\n      dup7\n      shl\n      and\n      or\n      or\n      swap1\n      dup2\n        /* \"src/SNDRStrategy.sol\":4359:4405  registrationStartTime = _registrationStartTime */\n      0x0a\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sstore\n      mload(0x40)\n      swap3\n      dup4\n      mstore\n      dup1\n      dup3\n      0x40\n      shr\n      and\n      0x20\n      dup5\n      add\n      mstore\n      dup2\n      dup5\n      shr\n      and\n      0x40\n      dup4\n      add\n      mstore\n      0xc0\n      shr\n      0x60\n      dup3\n      add\n      mstore\n        /* \"src/SNDRStrategy.sol\":4573:4732  TimestampsUpdated(... */\n      log1\n        /* \"src/SNDRStrategy.sol\":3757:4739  function _updatePoolTimestamps(... */\n      jump\t// out\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_516:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x2e\n      0x24\n      dup3\n      add\n      mstore\n      0x526567697374726174696f6e206d75737420656e64206265666f726520616c6c\n      0x44\n      dup3\n      add\n      mstore\n      shl(0x90, 0x6f636174696f6e20737461727473)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_514:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x18\n      0x24\n      dup3\n      add\n      mstore\n      0x496e76616c696420616c6c6f636174696f6e2074696d65730000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_512:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1a\n      0x24\n      dup3\n      add\n      mstore\n      0x496e76616c696420726567697374726174696f6e2074696d6573000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_19:\n      swap1\n      0x07\n      dup2\n      lt\n      iszero\n      tag_218\n      jumpi\n      0xff\n      dup1\n      not\n      dup4\n      sload\n      and\n      swap2\n      and\n      or\n      swap1\n      sstore\n      jump\t// out\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_20:\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x04\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      eq\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      tag_520\n      jumpi\n      0x02\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x04\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sstore\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n    tag_520:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup2\n      mstore\n      0x20\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x04\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x44\n      dup3\n      add\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_21:\n      not(0x00)\n      dup2\n      eq\n      tag_500\n      jumpi\n      0x01\n      add\n      swap1\n      jump\t// out\n    tag_22:\n      iszero\n      tag_524\n      jumpi\n      jump\t// out\n    tag_524:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x18\n      0x24\n      dup3\n      add\n      mstore\n      0x526563697069656e74206e6f7420726567697374657265640000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_23:\n      swap1\n      dup2\n      0x20\n      swap2\n      sub\n      slt\n      tag_290\n      jumpi\n      mload\n      dup1\n      iszero\n      iszero\n      dup2\n      sub\n      tag_290\n      jumpi\n      swap1\n      jump\t// out\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13122:13264  function _checkOnlyPoolManager(address _sender) internal view {... */\n    tag_24:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13199:13234  allo.isPoolManager(poolId, _sender) */\n      0x20\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      sload(0x01)\n      0x44\n      mload(0x40)\n      dup1\n      swap5\n      dup2\n      swap4\n      shl(0xe0, 0x29e40d4b)\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13199:13234  allo.isPoolManager(poolId, _sender) */\n      dup4\n      mstore\n      0x04\n      dup4\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mstore\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup1\n      swap2\n      and\n      0x24\n      dup4\n      add\n      mstore\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13199:13203  allo */\n      immutable(\"0xbd0af7246ac7aa3e59281abc6e001c8d20085f3ebd8f2bcaf145913d94136a44\")\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      and\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13199:13234  allo.isPoolManager(poolId, _sender) */\n      gas\n      staticcall\n      swap1\n      dup2\n      iszero\n      tag_530\n      jumpi\n      0x00\n      swap2\n      tag_532\n      jumpi\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13122:13264  function _checkOnlyPoolManager(address _sender) internal view {... */\n    tag_533:\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13198:13234  !allo.isPoolManager(poolId, _sender) */\n      pop\n      iszero\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13194:13257  if (!allo.isPoolManager(poolId, _sender)) revert UNAUTHORIZED() */\n      tag_504\n      jumpi\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13122:13264  function _checkOnlyPoolManager(address _sender) internal view {... */\n      jump\t// out\n        /* \"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":13199:13234  allo.isPoolManager(poolId, _sender) */\n    tag_532:\n      tag_536\n      swap2\n      pop\n      0x20\n      returndatasize\n      dup2\n      gt\n      tag_537\n      jumpi\n    tag_538:\n      tag_539\n      dup2\n      dup4\n      tag_3\n      jump\t// in\n    tag_539:\n      dup2\n      add\n      swap1\n      tag_23\n      jump\t// in\n    tag_536:\n      codesize\n      jump(tag_533)\n    tag_537:\n      pop\n      returndatasize\n      jump(tag_538)\n    tag_530:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_25:\n      swap1\n      dup2\n      mload\n      dup1\n      dup3\n      mstore\n      0x20\n      dup1\n      dup1\n      swap4\n      add\n      swap4\n      add\n      swap2\n      0x00\n    tag_540:\n      dup3\n      dup2\n      lt\n      tag_541\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      swap1\n      jump\t// out\n    tag_541:\n      dup4\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup6\n      mstore\n      swap4\n      dup2\n      add\n      swap4\n      swap3\n      dup2\n      add\n      swap3\n      0x01\n      add\n      jump(tag_540)\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":941:1116  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_26:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1108  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x20\n      dup1\n      dup4\n      add\n      swap2\n      dup3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap5\n      dup6\n      and\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1108  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup5\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mstore\n      0x44\n      dup1\n      dup5\n      add\n      swap7\n      swap1\n      swap7\n      mstore\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1108  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      swap5\n      dup3\n      mstore\n      swap3\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      0x80\n      dup3\n      add\n      swap3\n      sub(shl(0x40, 0x01), 0x01)\n      dup5\n      gt\n      dup4\n      dup6\n      lt\n      or\n      tag_460\n      jumpi\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":5535:5604  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_545\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap5\n      0x00\n      swap3\n      dup4\n      swap3\n      dup7\n      0x40\n      mstore\n      and\n      swap4\n      tag_546\n      dup7\n      tag_2\n      jump\t// in\n    tag_546:\n      dup8\n      dup7\n      mstore\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      0xa0\n      dup3\n      add\n      mstore\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":5487:5518  target.call{value: value}(data) */\n      mload\n      swap1\n      dup3\n      dup6\n      gas\n      call\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      jumpi(tag_547, iszero(returndatasize))\n      returndatasize\n      swap2\n      tag_549\n      dup4\n      tag_7\n      jump\t// in\n    tag_549:\n      swap3\n      tag_550\n      mload(0x40)\n      swap5\n      dup6\n      tag_3\n      jump\t// in\n    tag_550:\n      dup4\n      mstore\n      returndatasize\n      0x00\n      dup8\n      dup6\n      add\n      returndatacopy\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":5535:5604  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_27\n      jump\t// in\n    tag_545:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup1\n      mload\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5728:5750  returndata.length == 0 */\n      swap1\n      dup3\n      dup3\n      iszero\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5728:5784  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      swap3\n      dup4\n      iszero\n      tag_552\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_553:\n      pop\n      pop\n      pop\n      iszero\n      tag_554\n      jumpi\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":941:1116  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      jump\t// out\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_554:\n      0x84\n      swap1\n      mload(0x40)\n      swap1\n      shl(0xe5, 0x461bcd)\n      dup3\n      mstore\n      0x04\n      dup3\n      add\n      mstore\n      0x2a\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1108  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup3\n      add\n      mstore\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5728:5784  returndata.length == 0 || abi.decode(returndata, (bool)) */\n    tag_552:\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5754:5784  abi.decode(returndata, (bool)) */\n      tag_556\n      swap4\n      pop\n      dup3\n      add\n      dup2\n      add\n      swap2\n      add\n      tag_23\n      jump\t// in\n    tag_556:\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5728:5784  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      codesize\n      dup3\n      dup2\n      jump(tag_553)\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_547:\n      0x60\n      swap2\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":7671:8299  function verifyCallResultFromTarget(... */\n    tag_27:\n      swap2\n      swap3\n      swap1\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":7875:8293  if (success) {... */\n      iszero\n      tag_557\n      jumpi\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      pop\n      dup2\n      mload\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":7906:7928  returndata.length == 0 */\n      iszero\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":7902:8188  if (returndata.length == 0) {... */\n      tag_559\n      jumpi\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":8201:8218  return returndata */\n      pop\n      swap1\n      jump\t// out\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":7902:8188  if (returndata.length == 0) {... */\n    tag_559:\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":1702:1721  account.code.length */\n      extcodesize\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":1702:1725  account.code.length > 0 */\n      iszero\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      tag_561\n      jumpi\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":8201:8218  return returndata */\n      swap1\n      jump\t// out\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_561:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":7875:8293  if (success) {... */\n    tag_557:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup3\n      mload\n      swap1\n      swap2\n      pop\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":8980:9001  returndata.length > 0 */\n      iszero\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":8980:8997  returndata.length */\n      tag_563\n      jumpi\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":9152:9294  assembly {... */\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      revert\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":8976:9355  if (returndata.length > 0) {... */\n    tag_563:\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      swap1\n      shl(0xe5, 0x461bcd)\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":9324:9344  revert(errorMessage) */\n      dup3\n      mstore\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup2\n      0x20\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":9324:9344  revert(errorMessage) */\n      dup1\n      0x04\n      dup4\n      add\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      mstore\n      dup3\n      mload\n      swap1\n      dup2\n      0x24\n      dup5\n      add\n      mstore\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":9000:9001  0 */\n      0x00\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      swap4\n    tag_565:\n      dup3\n      dup6\n      lt\n      tag_566\n      jumpi\n      pop\n      pop\n      0x44\n      swap3\n      pop\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":9000:9001  0 */\n      0x00\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n      dup4\n      dup3\n      dup5\n      add\n      add\n      mstore\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n        /* \"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":9324:9344  revert(errorMessage) */\n      sub\n      add\n      swap1\n      revert\n        /* \"src/SNDRStrategy.sol\":825:13863  contract SNDRStrategy is BaseStrategy, Ownable, ReentrancyGuard {... */\n    tag_566:\n      dup5\n      dup2\n      add\n      dup3\n      add\n      mload\n      dup7\n      dup7\n      add\n      0x44\n      add\n      mstore\n      swap4\n      dup2\n      add\n      swap4\n      dup6\n      swap4\n      pop\n      jump(tag_565)\n    stop\n    data_aef723aaf2a9471d0444688035cd22ee9e9408f4d3390ce0a2a80b76aeab390a 6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af\n\n    auxdata: 0xa264697066735822122090d57829fe22720b659ebc0ff14ec39fbe61326eb258525353f5844a3cf18c8b64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"abi_decode_address_fromMemory": {
									"entryPoint": 464,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 428,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60c0604081815234620001a75781620020fb8038038091620000228285620001ac565b8339606091829181010312620001a7576200003d83620001d0565b9060206200005a8462000052838801620001d0565b9601620001d0565b845190928186016001600160401b0381118382101762000191578652600c82526b534e4452537472617465677960a01b838301526001600160a01b039485166080528551808401848152835182890181905290949193600093928592915b828610620001785750506000828201840152601f01601f19168101038781018452620000e792500182620001ac565b51902060a052600380546001600160a01b0319808216339081179093559451958492909183167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360016004551683600554161760055516906006541617600655611f159081620001e68239608051818181611125015281816118800152611bf4015260a05181610d510152f35b85810182015187870186015294810194869350620000b8565b634e487b7160e01b600052604160045260246000fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200019157604052565b51906001600160a01b0382168203620001a75756fe6080604052600436101561001257600080fd5b6000803560e01c8062912917146115295780630a6f0ee91461119e57806314f20ef91461115457806315cc481e1461110f57806319220dbc146110e65780632143e92f1461108a5780632bbe0cae14610e4f5780632cb5b5ed14610db05780632d30e6bf14610d9257806338fff2d014610d7457806342fda9c714610d395780634533d67814610d185780634ab4ba4214610cfa5780634d31d08714610cd45780636d40f85b14610c90578063715018a614610c325780638afbf66914610b7f5780638da5cb5b14610b565780639af5c09d14610b2f578063a0cf0aea14610b00578063b2b878d0146108f3578063b9bd12e41461083e578063d2e17f5914610814578063df868ed3146107f2578063dff7d2c7146107c8578063eb11af9314610782578063eb82031214610721578063edd146cc14610661578063ef2920fc146102a0578063f2fde38b146101d5578063f5b0dfb7146101a75763fc0c546a1461017c57600080fd5b346101a457806003193601126101a4576006546040516001600160a01b039091168152602090f35b80fd5b50346101a45760203660031901126101a4576101c161187e565b6101cf600435600254611847565b60025580f35b50346101a45760203660031901126101a4576101ef6116c6565b6101f76118de565b6001600160a01b0390811690811561024c57600354826bffffffffffffffffffffffff60a01b821617600355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b506102aa366117f9565b90916102b461187e565b6102bc6118c2565b600a54916001600160401b0392838160801c164210159081610653575b501561060e576102e890611bc6565b82518301926020926040828587019603126105df57838201518181116105e35782019185603f840112156105e3578483015192610324846116af565b93610332604051958661168e565b80855260408786019160051b8301019188831161060a57604001905b8282106105e75750505060408101519182116105e357019380603f860112156105df578385015161037e816116af565b9561038c604051978861168e565b81875260408688019260051b8201019283116105db576040869101915b8383106105cb5750505050805184510361058657815b8151811015610475576001600160a01b03806103db838561186a565b51168085526103f66007928388526040872054161515611b62565b845280855260029060ff82604087200154169081101561046157036104235761041e90611b53565b6103bf565b60405162461bcd60e51b8152600481018590526016602482015275149958da5c1a595b9d081b9bdd081858d8d95c1d195960521b6044820152606490fd5b634e487b7160e01b85526021600452602485fd5b50838383845b845181101561050e57610509906001600160a01b0361049a828861186a565b51167f183f2ce0b749ed46549cb16586af0c501abab8d242cc4b2076aec30d2dd9c4bc8560406104f16104cd868b61186a565b51858d526007988985528d600194859120016104ea838254611847565b9055611847565b96848c52825260408b200154604051908152a2611b53565b61047b565b50915091811561054c57916040917fb41462b4bb729cf768173ceba7cc740624558176f07a40ac23a5f8fcdb6c4abd9351918351928352820152a180f35b60405162461bcd60e51b8152600481018490526012602482015271139bc8199d5b991cc8185b1b1bd8d85d195960721b6044820152606490fd5b60405162461bcd60e51b815260048101849052601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b82518152918101918691016103a9565b8480fd5b8280fd5b8380fd5b81516001600160a01b038116810361060657815290870190870161034e565b8780fd5b8680fd5b60405162461bcd60e51b815260206004820152601860248201527f416c6c6f636174696f6e206973206e6f742061637469766500000000000000006044820152606490fd5b905060c01c421115386102d9565b50346101a45760403660031901126101a4576004356024356001600160401b0381116105df57610695903690600401611765565b9061069e61187e565b60015461070f5780156106fd576001556080818051810103126106f957806106cb60206106f69301611936565b906106d860408201611936565b6106f060806106e960608501611936565b9301611936565b9261194a565b80f35b5080fd5b604051637fcce2a960e01b8152600490fd5b60405163439a74c960e01b8152600490fd5b50346101a45760203660031901126101a4576060906001600160a01b0390610780906040908361074f6116c6565b168152600760205220918254169160ff6002600183015492015416906040519384526020840152604083019061183a565bf35b50346101a45760203660031901126101a45760209060ff906002906040906001600160a01b036107b06116c6565b1681526007855220015416610780604051809261183a565b50346101a457806003193601126101a45760206001600160401b03600a5460401c16604051908152f35b50346101a457806003193601126101a45760ff60209154166040519015158152f35b50346101a457806003193601126101a45760206001600160401b03600a5460801c16604051908152f35b50346101a45760203660031901126101a457604061085a6116c6565b918082805161086881611642565b828152826020820152015260018060a01b0380931681526007602052206040519061089282611642565b82815416825260ff60026001830154926020850193845201541690604083019060078310156108dd57606094610780938352604051945116845251602084015251604083019061183a565b634e487b7160e01b600052602160045260246000fd5b50346101a45760403660031901126101a4576001600160401b036004358181116105df576109259036906004016116dc565b916024918235908082116105df57366023830112156105df57816004013561094c816116af565b9261095a604051948561168e565b818452602095808786019360051b8301019336851161060a57818301935b858510610ad65750505050505083519080518203610ac45761099c829593956116af565b926109aa604051948561168e565b828452601f196109b9846116af565b01865b818110610a9a575050855b838110610a2057505050506040519180830190808452825180925280604085019301945b8281106109f85784840385f35b855180516001600160a01b0316855282015184830152948101946040909301926001016109eb565b9395936001600160a01b03610a35828461186a565b511690610a42818561186a565b50600087604051610a5281611673565b8281520152818652600787526001918260408820015460405191610a7583611673565b825288820152610a85828a61186a565b52610a90818961186a565b50019593956109c7565b8690604098969851610aab81611673565b6000815260008382015282828b010152019694966109bc565b604051633da4c02b60e11b8152600490fd5b8435828111610afc578991610af18392863691890101611765565b815201940193610978565b8880fd5b50346101a457806003193601126101a457602060405173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8152f35b50346101a457806003193601126101a45760206001600160401b03600a5416604051908152f35b50346101a457806003193601126101a4576003546040516001600160a01b039091168152602090f35b50346101a457806003193601126101a457610b986118de565b6006546040516370a0823160e01b81523060048201526001600160a01b03918216602082602481845afa918215610c27578492610bef575b5081610bda578380f35b610be8926003541690611ca4565b3880808380f35b9091506020813d8211610c1f575b81610c0a6020938361168e565b81010312610c1a57519038610bd0565b600080fd5b3d9150610bfd565b6040513d86823e3d90fd5b50346101a457806003193601126101a457610c4b6118de565b600380546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101a45760203660031901126101a457600435906008548210156101a4576020610cbb836117ac565b905460405160039290921b1c6001600160a01b03168152f35b50346101a45760203660031901126101a457610cee6116c6565b50602060405160018152f35b50346101a457806003193601126101a4576020600254604051908152f35b50346101a457806003193601126101a4576020600a5460c01c604051908152f35b50346101a457806003193601126101a45760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101a457806003193601126101a4576020600154604051908152f35b50346101a457806003193601126101a4576020600854604051908152f35b50346101a45760403660031901126101a457610dca6116c6565b60243560078110156105df5760207f256c90eeec0565314afb6bdf67c3a909a88bd142e40d03c91a1f68e2a6bc35db91610e026118de565b6001600160a01b039384168086526007835260408620549094610e2791161515611b62565b83855260078252610e3e8160026040882001611ae5565b610e4b604051809261183a565ba280f35b50610e59366117f9565b50610e6261187e565b610e6a6118c2565b600a546001600160401b03808216421015918261107a575b50501561103557610e91611afd565b6040818051810103126106f957602091828201519160018060a01b03908184168094036105df5760400151918381526007855281604082205416610ff057604051610edb81611642565b8481528581018481526040820190600182528684526007885284604085209351166bffffffffffffffffffffffff60a01b84541617835551600183015551906007821015610fdc57906002610f309201611ae5565b60085490600160401b821015610fc8575083927f0695e999be8100bdb5bee8612337296508d527eae78c65b8f170eacb5a3b439d92610f768360018995016008556117ac565b819291549060031b9187831b921b1916179055604051908152a2807f256c90eeec0565314afb6bdf67c3a909a88bd142e40d03c91a1f68e2a6bc35db8360405160018152a26001600455604051908152f35b634e487b7160e01b81526041600452602490fd5b634e487b7160e01b83526021600452602483fd5b60405162461bcd60e51b815260048101869052601c60248201527f526563697069656e7420616c72656164792072656769737465726564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f526567697374726174696f6e206973206e6f74206163746976650000000000006044820152606490fd5b60401c1642111590503880610e82565b50346101a45760803660031901126101a4576004356001600160401b038082168203610c1a576024358181168103610c1a57604435908282168203610c1a576064359283168303610c1a576106f6936110e16118de565b61194a565b50346101a457806003193601126101a4576005546040516001600160a01b039091168152602090f35b50346101a457806003193601126101a4576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101a45760203660031901126101a4576004356009548110156106f9576009600052600080516020611ec083398151915201546040516001600160a01b039091168152602090f35b50346101a45760603660031901126101a4576004356001600160401b0381116106f9576111cf9036906004016116dc565b6024356001600160401b0381116105df576111ee903690600401611765565b6044356001600160a01b03811681036105e35761120961187e565b6112116118c2565b600a5460c01c4211156114e45761122f9061122a611afd565b611bc6565b6020818051810103126105df576020015190805161124c816116af565b9061125a604051928361168e565b808252611269601f19916116af565b013660208301378391825b81518410156112d0576112ca906112c4906001600160a01b03611297878661186a565b51168852600760205260016040892001546112b2878761186a565b526112bd868661186a565b5190611847565b93611b53565b92611274565b848693826002541061149f576006546005546112fa9185916001600160a01b039081169116611ca4565b60055460015460065490936001600160a01b039283169392909116833b1561060657604051628cd62560e61b81526004810195909552602485015260c0604485015286928492909161134f60c4850189611c67565b60031985820301606486015260208084519283815201930190865b8181106114835750505060848401526003198382030160a4840152602060095491828152019060098552600080516020611ec083398151915290855b81811061145e575050508383809203925af18015610c275761140f575b507f6215df0421b8b71ffbc92898b478b5ad9520ec5034d7c686bbdc7afdfad068e8916113fe91604051928392604084526040840190611c67565b9060208301520390a1600160045580f35b6001600160401b03819492941161144a57604052917f6215df0421b8b71ffbc92898b478b5ad9520ec5034d7c686bbdc7afdfad068e86113c3565b634e487b7160e01b82526041600452602482fd5b82546001600160a01b031684528a9650879550602090930192600192830192016113a6565b825185528b97508896506020948501949092019160010161136a565b60405162461bcd60e51b815260206004820152601d60248201527f506f6f6c20616c6c6f636174696f6e2066756e647320746f6f206c6f770000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f416c6c6f636174696f6e20706572696f6420686173206e6f7420656e646564006044820152606490fd5b50346101a457602090816003193601126101a4576001600160401b036004358181116105df5761155d9036906004016116dc565b906115666118de565b815190811161162e57600160401b811161162e5760095481600955808210611600575b5083820160098452835b8281106115d75760405186815285907f0ba55fca14ca25313d8196abbee269381ad67be27729f5073609a3eb9318391a90806115d1818b0189611c67565b0390a180f35b81516001600160a01b0316600080516020611ec083398151915282015590850190600101611593565b81600080516020611ec083398151915291820191015b8181106116235750611589565b848155600101611616565b634e487b7160e01b83526041600452602483fd5b606081019081106001600160401b0382111761165d57604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761165d57604052565b90601f801991011681019081106001600160401b0382111761165d57604052565b6001600160401b03811161165d5760051b60200190565b600435906001600160a01b0382168203610c1a57565b81601f82011215610c1a578035916116f3836116af565b92611701604051948561168e565b808452602092838086019260051b820101928311610c1a578301905b82821061172b575050505090565b81356001600160a01b0381168103610c1a57815290830190830161171d565b6001600160401b03811161165d57601f01601f191660200190565b81601f82011215610c1a5780359061177c8261174a565b9261178a604051948561168e565b82845260208383010111610c1a57816000926020809301838601378301015290565b6008548110156117e35760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b634e487b7160e01b600052603260045260246000fd5b6040600319820112610c1a57600435906001600160401b038211610c1a5761182391600401611765565b906024356001600160a01b0381168103610c1a5790565b9060078210156108dd5752565b9190820180921161185457565b634e487b7160e01b600052601160045260246000fd5b80518210156117e35760209160051b010190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036118b057565b60405163075fd2b160e01b8152600490fd5b600154156118cc57565b604051630f68fe6360e21b8152600490fd5b6003546001600160a01b031633036118f257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b51906001600160401b0382168203610c1a57565b9192916001600160401b039081169181811680841015611aa05782861690838616821015611a5b57116119ff577f5be4d64080f489b6fef34a2d8ac3084c5735e83b3789aabc4e6aeab193e7967f94836fffffffffffffffff00000000000000006080966001600160401b0360c01b9060c01b169360401b1617906001600160401b03861b90861b1617179081600a55604051928352808260401c16602084015281841c16604083015260c01c6060820152a1565b60405162461bcd60e51b815260206004820152602e60248201527f526567697374726174696f6e206d75737420656e64206265666f726520616c6c60448201526d6f636174696f6e2073746172747360901b6064820152608490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c696420616c6c6f636174696f6e2074696d657300000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420726567697374726174696f6e2074696d65730000000000006044820152606490fd5b9060078110156108dd5760ff80198354169116179055565b600260045414611b0e576002600455565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60001981146118545760010190565b15611b6957565b60405162461bcd60e51b815260206004820152601860248201527f526563697069656e74206e6f74207265676973746572656400000000000000006044820152606490fd5b90816020910312610c1a57518015158103610c1a5790565b60206001546044604051809481936329e40d4b60e01b8352600483015260018060a01b0380911660248301527f0000000000000000000000000000000000000000000000000000000000000000165afa908115611c5b57600091611c2d575b50156118b057565b611c4e915060203d8111611c54575b611c46818361168e565b810190611bae565b38611c25565b503d611c3c565b6040513d6000823e3d90fd5b90815180825260208080930193019160005b828110611c87575050505090565b83516001600160a01b031685529381019392810192600101611c79565b60405163a9059cbb60e01b60208083019182526001600160a01b0394851660248401526044808401969096529482529260808201926001600160401b0384118385101761165d57611d5f946000928392866040521693611d0386611673565b8786527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af13d15611de7573d91611d438361174a565b92611d51604051948561168e565b83523d60008785013e611deb565b805190828215928315611dcf575b50505015611d785750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b611ddf9350820181019101611bae565b388281611d6d565b6060915b91929015611e4d5750815115611dff575090565b3b15611e085790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611e605750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611ea6575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350611e8356fe6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7afa264697066735822122090d57829fe22720b659ebc0ff14ec39fbe61326eb258525353f5844a3cf18c8b64736f6c63430008130033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 DUP2 DUP2 MSTORE CALLVALUE PUSH3 0x1A7 JUMPI DUP2 PUSH3 0x20FB DUP1 CODESIZE SUB DUP1 SWAP2 PUSH3 0x22 DUP3 DUP6 PUSH3 0x1AC JUMP JUMPDEST DUP4 CODECOPY PUSH1 0x60 SWAP2 DUP3 SWAP2 DUP2 ADD SUB SLT PUSH3 0x1A7 JUMPI PUSH3 0x3D DUP4 PUSH3 0x1D0 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH3 0x5A DUP5 PUSH3 0x52 DUP4 DUP9 ADD PUSH3 0x1D0 JUMP JUMPDEST SWAP7 ADD PUSH3 0x1D0 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP3 DUP2 DUP7 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x191 JUMPI DUP7 MSTORE PUSH1 0xC DUP3 MSTORE PUSH12 0x534E44525374726174656779 PUSH1 0xA0 SHL DUP4 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x80 MSTORE DUP6 MLOAD DUP1 DUP5 ADD DUP5 DUP2 MSTORE DUP4 MLOAD DUP3 DUP10 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP5 SWAP2 SWAP4 PUSH1 0x0 SWAP4 SWAP3 DUP6 SWAP3 SWAP2 JUMPDEST DUP3 DUP7 LT PUSH3 0x178 JUMPI POP POP PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB DUP8 DUP2 ADD DUP5 MSTORE PUSH3 0xE7 SWAP3 POP ADD DUP3 PUSH3 0x1AC JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0xA0 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE SWAP5 MLOAD SWAP6 DUP5 SWAP3 SWAP1 SWAP2 DUP4 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 PUSH1 0x1 PUSH1 0x4 SSTORE AND DUP4 PUSH1 0x5 SLOAD AND OR PUSH1 0x5 SSTORE AND SWAP1 PUSH1 0x6 SLOAD AND OR PUSH1 0x6 SSTORE PUSH2 0x1F15 SWAP1 DUP2 PUSH3 0x1E6 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x1125 ADD MSTORE DUP2 DUP2 PUSH2 0x1880 ADD MSTORE PUSH2 0x1BF4 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0xD51 ADD MSTORE RETURN JUMPDEST DUP6 DUP2 ADD DUP3 ADD MLOAD DUP8 DUP8 ADD DUP7 ADD MSTORE SWAP5 DUP2 ADD SWAP5 DUP7 SWAP4 POP PUSH3 0xB8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH3 0x191 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x1A7 JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x912917 EQ PUSH2 0x1529 JUMPI DUP1 PUSH4 0xA6F0EE9 EQ PUSH2 0x119E JUMPI DUP1 PUSH4 0x14F20EF9 EQ PUSH2 0x1154 JUMPI DUP1 PUSH4 0x15CC481E EQ PUSH2 0x110F JUMPI DUP1 PUSH4 0x19220DBC EQ PUSH2 0x10E6 JUMPI DUP1 PUSH4 0x2143E92F EQ PUSH2 0x108A JUMPI DUP1 PUSH4 0x2BBE0CAE EQ PUSH2 0xE4F JUMPI DUP1 PUSH4 0x2CB5B5ED EQ PUSH2 0xDB0 JUMPI DUP1 PUSH4 0x2D30E6BF EQ PUSH2 0xD92 JUMPI DUP1 PUSH4 0x38FFF2D0 EQ PUSH2 0xD74 JUMPI DUP1 PUSH4 0x42FDA9C7 EQ PUSH2 0xD39 JUMPI DUP1 PUSH4 0x4533D678 EQ PUSH2 0xD18 JUMPI DUP1 PUSH4 0x4AB4BA42 EQ PUSH2 0xCFA JUMPI DUP1 PUSH4 0x4D31D087 EQ PUSH2 0xCD4 JUMPI DUP1 PUSH4 0x6D40F85B EQ PUSH2 0xC90 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xC32 JUMPI DUP1 PUSH4 0x8AFBF669 EQ PUSH2 0xB7F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xB56 JUMPI DUP1 PUSH4 0x9AF5C09D EQ PUSH2 0xB2F JUMPI DUP1 PUSH4 0xA0CF0AEA EQ PUSH2 0xB00 JUMPI DUP1 PUSH4 0xB2B878D0 EQ PUSH2 0x8F3 JUMPI DUP1 PUSH4 0xB9BD12E4 EQ PUSH2 0x83E JUMPI DUP1 PUSH4 0xD2E17F59 EQ PUSH2 0x814 JUMPI DUP1 PUSH4 0xDF868ED3 EQ PUSH2 0x7F2 JUMPI DUP1 PUSH4 0xDFF7D2C7 EQ PUSH2 0x7C8 JUMPI DUP1 PUSH4 0xEB11AF93 EQ PUSH2 0x782 JUMPI DUP1 PUSH4 0xEB820312 EQ PUSH2 0x721 JUMPI DUP1 PUSH4 0xEDD146CC EQ PUSH2 0x661 JUMPI DUP1 PUSH4 0xEF2920FC EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0xF5B0DFB7 EQ PUSH2 0x1A7 JUMPI PUSH4 0xFC0C546A EQ PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0x1C1 PUSH2 0x187E JUMP JUMPDEST PUSH2 0x1CF PUSH1 0x4 CALLDATALOAD PUSH1 0x2 SLOAD PUSH2 0x1847 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0x1EF PUSH2 0x16C6 JUMP JUMPDEST PUSH2 0x1F7 PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x24C JUMPI PUSH1 0x3 SLOAD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x3 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH2 0x2AA CALLDATASIZE PUSH2 0x17F9 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x2B4 PUSH2 0x187E JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0xA SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP2 PUSH1 0x80 SHR AND TIMESTAMP LT ISZERO SWAP1 DUP2 PUSH2 0x653 JUMPI JUMPDEST POP ISZERO PUSH2 0x60E JUMPI PUSH2 0x2E8 SWAP1 PUSH2 0x1BC6 JUMP JUMPDEST DUP3 MLOAD DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x40 DUP3 DUP6 DUP8 ADD SWAP7 SUB SLT PUSH2 0x5DF JUMPI DUP4 DUP3 ADD MLOAD DUP2 DUP2 GT PUSH2 0x5E3 JUMPI DUP3 ADD SWAP2 DUP6 PUSH1 0x3F DUP5 ADD SLT ISZERO PUSH2 0x5E3 JUMPI DUP5 DUP4 ADD MLOAD SWAP3 PUSH2 0x324 DUP5 PUSH2 0x16AF JUMP JUMPDEST SWAP4 PUSH2 0x332 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x168E JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x40 DUP8 DUP7 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 DUP9 DUP4 GT PUSH2 0x60A JUMPI PUSH1 0x40 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x5E7 JUMPI POP POP POP PUSH1 0x40 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x5E3 JUMPI ADD SWAP4 DUP1 PUSH1 0x3F DUP7 ADD SLT ISZERO PUSH2 0x5DF JUMPI DUP4 DUP6 ADD MLOAD PUSH2 0x37E DUP2 PUSH2 0x16AF JUMP JUMPDEST SWAP6 PUSH2 0x38C PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x168E JUMP JUMPDEST DUP2 DUP8 MSTORE PUSH1 0x40 DUP7 DUP9 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x5DB JUMPI PUSH1 0x40 DUP7 SWAP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x5CB JUMPI POP POP POP POP DUP1 MLOAD DUP5 MLOAD SUB PUSH2 0x586 JUMPI DUP2 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x3DB DUP4 DUP6 PUSH2 0x186A JUMP JUMPDEST MLOAD AND DUP1 DUP6 MSTORE PUSH2 0x3F6 PUSH1 0x7 SWAP3 DUP4 DUP9 MSTORE PUSH1 0x40 DUP8 KECCAK256 SLOAD AND ISZERO ISZERO PUSH2 0x1B62 JUMP JUMPDEST DUP5 MSTORE DUP1 DUP6 MSTORE PUSH1 0x2 SWAP1 PUSH1 0xFF DUP3 PUSH1 0x40 DUP8 KECCAK256 ADD SLOAD AND SWAP1 DUP2 LT ISZERO PUSH2 0x461 JUMPI SUB PUSH2 0x423 JUMPI PUSH2 0x41E SWAP1 PUSH2 0x1B53 JUMP JUMPDEST PUSH2 0x3BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x149958DA5C1A595B9D081B9BDD081858D8D95C1D1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST POP DUP4 DUP4 DUP4 DUP5 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x50E JUMPI PUSH2 0x509 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x49A DUP3 DUP9 PUSH2 0x186A JUMP JUMPDEST MLOAD AND PUSH32 0x183F2CE0B749ED46549CB16586AF0C501ABAB8D242CC4B2076AEC30D2DD9C4BC DUP6 PUSH1 0x40 PUSH2 0x4F1 PUSH2 0x4CD DUP7 DUP12 PUSH2 0x186A JUMP JUMPDEST MLOAD DUP6 DUP14 MSTORE PUSH1 0x7 SWAP9 DUP10 DUP6 MSTORE DUP14 PUSH1 0x1 SWAP5 DUP6 SWAP2 KECCAK256 ADD PUSH2 0x4EA DUP4 DUP3 SLOAD PUSH2 0x1847 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1847 JUMP JUMPDEST SWAP7 DUP5 DUP13 MSTORE DUP3 MSTORE PUSH1 0x40 DUP12 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 PUSH2 0x1B53 JUMP JUMPDEST PUSH2 0x47B JUMP JUMPDEST POP SWAP2 POP SWAP2 DUP2 ISZERO PUSH2 0x54C JUMPI SWAP2 PUSH1 0x40 SWAP2 PUSH32 0xB41462B4BB729CF768173CEBA7CC740624558176F07A40AC23A5F8FCDB6C4ABD SWAP4 MLOAD SWAP2 DUP4 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x139BC8199D5B991CC8185B1B1BD8D85D1959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D69736D61746368656420696E70757420617272617973000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 DUP7 SWAP2 ADD PUSH2 0x3A9 JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x606 JUMPI DUP2 MSTORE SWAP1 DUP8 ADD SWAP1 DUP8 ADD PUSH2 0x34E JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C6C6F636174696F6E206973206E6F74206163746976650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0xC0 SHR TIMESTAMP GT ISZERO CODESIZE PUSH2 0x2D9 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x5DF JUMPI PUSH2 0x695 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1765 JUMP JUMPDEST SWAP1 PUSH2 0x69E PUSH2 0x187E JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x70F JUMPI DUP1 ISZERO PUSH2 0x6FD JUMPI PUSH1 0x1 SSTORE PUSH1 0x80 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x6F9 JUMPI DUP1 PUSH2 0x6CB PUSH1 0x20 PUSH2 0x6F6 SWAP4 ADD PUSH2 0x1936 JUMP JUMPDEST SWAP1 PUSH2 0x6D8 PUSH1 0x40 DUP3 ADD PUSH2 0x1936 JUMP JUMPDEST PUSH2 0x6F0 PUSH1 0x80 PUSH2 0x6E9 PUSH1 0x60 DUP6 ADD PUSH2 0x1936 JUMP JUMPDEST SWAP4 ADD PUSH2 0x1936 JUMP JUMPDEST SWAP3 PUSH2 0x194A JUMP JUMPDEST DUP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7FCCE2A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x439A74C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x780 SWAP1 PUSH1 0x40 SWAP1 DUP4 PUSH2 0x74F PUSH2 0x16C6 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE KECCAK256 SWAP2 DUP3 SLOAD AND SWAP2 PUSH1 0xFF PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 ADD SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x183A JUMP JUMPDEST RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x40 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x7B0 PUSH2 0x16C6 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x7 DUP6 MSTORE KECCAK256 ADD SLOAD AND PUSH2 0x780 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH2 0x183A JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xA SLOAD PUSH1 0x40 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xA SLOAD PUSH1 0x80 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x40 PUSH2 0x85A PUSH2 0x16C6 JUMP JUMPDEST SWAP2 DUP1 DUP3 DUP1 MLOAD PUSH2 0x868 DUP2 PUSH2 0x1642 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x892 DUP3 PUSH2 0x1642 JUMP JUMPDEST DUP3 DUP2 SLOAD AND DUP3 MSTORE PUSH1 0xFF PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 PUSH1 0x20 DUP6 ADD SWAP4 DUP5 MSTORE ADD SLOAD AND SWAP1 PUSH1 0x40 DUP4 ADD SWAP1 PUSH1 0x7 DUP4 LT ISZERO PUSH2 0x8DD JUMPI PUSH1 0x60 SWAP5 PUSH2 0x780 SWAP4 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP5 MLOAD AND DUP5 MSTORE MLOAD PUSH1 0x20 DUP5 ADD MSTORE MLOAD PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x183A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x5DF JUMPI PUSH2 0x925 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16DC JUMP JUMPDEST SWAP2 PUSH1 0x24 SWAP2 DUP3 CALLDATALOAD SWAP1 DUP1 DUP3 GT PUSH2 0x5DF JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x5DF JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x94C DUP2 PUSH2 0x16AF JUMP JUMPDEST SWAP3 PUSH2 0x95A PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 SWAP6 DUP1 DUP8 DUP7 ADD SWAP4 PUSH1 0x5 SHL DUP4 ADD ADD SWAP4 CALLDATASIZE DUP6 GT PUSH2 0x60A JUMPI DUP2 DUP4 ADD SWAP4 JUMPDEST DUP6 DUP6 LT PUSH2 0xAD6 JUMPI POP POP POP POP POP POP DUP4 MLOAD SWAP1 DUP1 MLOAD DUP3 SUB PUSH2 0xAC4 JUMPI PUSH2 0x99C DUP3 SWAP6 SWAP4 SWAP6 PUSH2 0x16AF JUMP JUMPDEST SWAP3 PUSH2 0x9AA PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x1F NOT PUSH2 0x9B9 DUP5 PUSH2 0x16AF JUMP JUMPDEST ADD DUP7 JUMPDEST DUP2 DUP2 LT PUSH2 0xA9A JUMPI POP POP DUP6 JUMPDEST DUP4 DUP2 LT PUSH2 0xA20 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP1 DUP4 ADD SWAP1 DUP1 DUP5 MSTORE DUP3 MLOAD DUP1 SWAP3 MSTORE DUP1 PUSH1 0x40 DUP6 ADD SWAP4 ADD SWAP5 JUMPDEST DUP3 DUP2 LT PUSH2 0x9F8 JUMPI DUP5 DUP5 SUB DUP6 RETURN JUMPDEST DUP6 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP3 ADD MLOAD DUP5 DUP4 ADD MSTORE SWAP5 DUP2 ADD SWAP5 PUSH1 0x40 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9EB JUMP JUMPDEST SWAP4 SWAP6 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xA35 DUP3 DUP5 PUSH2 0x186A JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0xA42 DUP2 DUP6 PUSH2 0x186A JUMP JUMPDEST POP PUSH1 0x0 DUP8 PUSH1 0x40 MLOAD PUSH2 0xA52 DUP2 PUSH2 0x1673 JUMP JUMPDEST DUP3 DUP2 MSTORE ADD MSTORE DUP2 DUP7 MSTORE PUSH1 0x7 DUP8 MSTORE PUSH1 0x1 SWAP2 DUP3 PUSH1 0x40 DUP9 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0xA75 DUP4 PUSH2 0x1673 JUMP JUMPDEST DUP3 MSTORE DUP9 DUP3 ADD MSTORE PUSH2 0xA85 DUP3 DUP11 PUSH2 0x186A JUMP JUMPDEST MSTORE PUSH2 0xA90 DUP2 DUP10 PUSH2 0x186A JUMP JUMPDEST POP ADD SWAP6 SWAP4 SWAP6 PUSH2 0x9C7 JUMP JUMPDEST DUP7 SWAP1 PUSH1 0x40 SWAP9 SWAP7 SWAP9 MLOAD PUSH2 0xAAB DUP2 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE DUP3 DUP3 DUP12 ADD ADD MSTORE ADD SWAP7 SWAP5 SWAP7 PUSH2 0x9BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3DA4C02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP5 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xAFC JUMPI DUP10 SWAP2 PUSH2 0xAF1 DUP4 SWAP3 DUP7 CALLDATASIZE SWAP2 DUP10 ADD ADD PUSH2 0x1765 JUMP JUMPDEST DUP2 MSTORE ADD SWAP5 ADD SWAP4 PUSH2 0x978 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xA SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0xB98 PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP3 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xC27 JUMPI DUP5 SWAP3 PUSH2 0xBEF JUMPI JUMPDEST POP DUP2 PUSH2 0xBDA JUMPI DUP4 DUP1 RETURN JUMPDEST PUSH2 0xBE8 SWAP3 PUSH1 0x3 SLOAD AND SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0xC1F JUMPI JUMPDEST DUP2 PUSH2 0xC0A PUSH1 0x20 SWAP4 DUP4 PUSH2 0x168E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xC1A JUMPI MLOAD SWAP1 CODESIZE PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0xC4B PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x8 SLOAD DUP3 LT ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH2 0xCBB DUP4 PUSH2 0x17AC JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0xCEE PUSH2 0x16C6 JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0xA SLOAD PUSH1 0xC0 SHR PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0xDCA PUSH2 0x16C6 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x7 DUP2 LT ISZERO PUSH2 0x5DF JUMPI PUSH1 0x20 PUSH32 0x256C90EEEC0565314AFB6BDF67C3A909A88BD142E40D03C91A1F68E2A6BC35DB SWAP2 PUSH2 0xE02 PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP1 DUP7 MSTORE PUSH1 0x7 DUP4 MSTORE PUSH1 0x40 DUP7 KECCAK256 SLOAD SWAP1 SWAP5 PUSH2 0xE27 SWAP2 AND ISZERO ISZERO PUSH2 0x1B62 JUMP JUMPDEST DUP4 DUP6 MSTORE PUSH1 0x7 DUP3 MSTORE PUSH2 0xE3E DUP2 PUSH1 0x2 PUSH1 0x40 DUP9 KECCAK256 ADD PUSH2 0x1AE5 JUMP JUMPDEST PUSH2 0xE4B PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH2 0x183A JUMP JUMPDEST LOG2 DUP1 RETURN JUMPDEST POP PUSH2 0xE59 CALLDATASIZE PUSH2 0x17F9 JUMP JUMPDEST POP PUSH2 0xE62 PUSH2 0x187E JUMP JUMPDEST PUSH2 0xE6A PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 AND TIMESTAMP LT ISZERO SWAP2 DUP3 PUSH2 0x107A JUMPI JUMPDEST POP POP ISZERO PUSH2 0x1035 JUMPI PUSH2 0xE91 PUSH2 0x1AFD JUMP JUMPDEST PUSH1 0x40 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x6F9 JUMPI PUSH1 0x20 SWAP2 DUP3 DUP3 ADD MLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP5 AND DUP1 SWAP5 SUB PUSH2 0x5DF JUMPI PUSH1 0x40 ADD MLOAD SWAP2 DUP4 DUP2 MSTORE PUSH1 0x7 DUP6 MSTORE DUP2 PUSH1 0x40 DUP3 KECCAK256 SLOAD AND PUSH2 0xFF0 JUMPI PUSH1 0x40 MLOAD PUSH2 0xEDB DUP2 PUSH2 0x1642 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP6 DUP2 ADD DUP5 DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE DUP7 DUP5 MSTORE PUSH1 0x7 DUP9 MSTORE DUP5 PUSH1 0x40 DUP6 KECCAK256 SWAP4 MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP5 SLOAD AND OR DUP4 SSTORE MLOAD PUSH1 0x1 DUP4 ADD SSTORE MLOAD SWAP1 PUSH1 0x7 DUP3 LT ISZERO PUSH2 0xFDC JUMPI SWAP1 PUSH1 0x2 PUSH2 0xF30 SWAP3 ADD PUSH2 0x1AE5 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT ISZERO PUSH2 0xFC8 JUMPI POP DUP4 SWAP3 PUSH32 0x695E999BE8100BDB5BEE8612337296508D527EAE78C65B8F170EACB5A3B439D SWAP3 PUSH2 0xF76 DUP4 PUSH1 0x1 DUP10 SWAP6 ADD PUSH1 0x8 SSTORE PUSH2 0x17AC JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 DUP8 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 PUSH32 0x256C90EEEC0565314AFB6BDF67C3A909A88BD142E40D03C91A1F68E2A6BC35DB DUP4 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG2 PUSH1 0x1 PUSH1 0x4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526563697069656E7420616C7265616479207265676973746572656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526567697374726174696F6E206973206E6F7420616374697665000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 SHR AND TIMESTAMP GT ISZERO SWAP1 POP CODESIZE DUP1 PUSH2 0xE82 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 AND DUP3 SUB PUSH2 0xC1A JUMPI PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0xC1A JUMPI PUSH1 0x44 CALLDATALOAD SWAP1 DUP3 DUP3 AND DUP3 SUB PUSH2 0xC1A JUMPI PUSH1 0x64 CALLDATALOAD SWAP3 DUP4 AND DUP4 SUB PUSH2 0xC1A JUMPI PUSH2 0x6F6 SWAP4 PUSH2 0x10E1 PUSH2 0x18DE JUMP JUMPDEST PUSH2 0x194A JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x9 SLOAD DUP2 LT ISZERO PUSH2 0x6F9 JUMPI PUSH1 0x9 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1EC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x6F9 JUMPI PUSH2 0x11CF SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x5DF JUMPI PUSH2 0x11EE SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1765 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x5E3 JUMPI PUSH2 0x1209 PUSH2 0x187E JUMP JUMPDEST PUSH2 0x1211 PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0xC0 SHR TIMESTAMP GT ISZERO PUSH2 0x14E4 JUMPI PUSH2 0x122F SWAP1 PUSH2 0x122A PUSH2 0x1AFD JUMP JUMPDEST PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x5DF JUMPI PUSH1 0x20 ADD MLOAD SWAP1 DUP1 MLOAD PUSH2 0x124C DUP2 PUSH2 0x16AF JUMP JUMPDEST SWAP1 PUSH2 0x125A PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x168E JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH2 0x1269 PUSH1 0x1F NOT SWAP2 PUSH2 0x16AF JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP4 ADD CALLDATACOPY DUP4 SWAP2 DUP3 JUMPDEST DUP2 MLOAD DUP5 LT ISZERO PUSH2 0x12D0 JUMPI PUSH2 0x12CA SWAP1 PUSH2 0x12C4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1297 DUP8 DUP7 PUSH2 0x186A JUMP JUMPDEST MLOAD AND DUP9 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 DUP10 KECCAK256 ADD SLOAD PUSH2 0x12B2 DUP8 DUP8 PUSH2 0x186A JUMP JUMPDEST MSTORE PUSH2 0x12BD DUP7 DUP7 PUSH2 0x186A JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x1847 JUMP JUMPDEST SWAP4 PUSH2 0x1B53 JUMP JUMPDEST SWAP3 PUSH2 0x1274 JUMP JUMPDEST DUP5 DUP7 SWAP4 DUP3 PUSH1 0x2 SLOAD LT PUSH2 0x149F JUMPI PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0x12FA SWAP2 DUP6 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 SLOAD PUSH1 0x6 SLOAD SWAP1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 SWAP3 SWAP1 SWAP2 AND DUP4 EXTCODESIZE ISZERO PUSH2 0x606 JUMPI PUSH1 0x40 MLOAD PUSH3 0x8CD625 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0xC0 PUSH1 0x44 DUP6 ADD MSTORE DUP7 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 PUSH2 0x134F PUSH1 0xC4 DUP6 ADD DUP10 PUSH2 0x1C67 JUMP JUMPDEST PUSH1 0x3 NOT DUP6 DUP3 SUB ADD PUSH1 0x64 DUP7 ADD MSTORE PUSH1 0x20 DUP1 DUP5 MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP4 ADD SWAP1 DUP7 JUMPDEST DUP2 DUP2 LT PUSH2 0x1483 JUMPI POP POP POP PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0x3 NOT DUP4 DUP3 SUB ADD PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x9 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP1 PUSH1 0x9 DUP6 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1EC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0x145E JUMPI POP POP POP DUP4 DUP4 DUP1 SWAP3 SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xC27 JUMPI PUSH2 0x140F JUMPI JUMPDEST POP PUSH32 0x6215DF0421B8B71FFBC92898B478B5AD9520EC5034D7C686BBDC7AFDFAD068E8 SWAP2 PUSH2 0x13FE SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x1C67 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0x4 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 SWAP5 SWAP3 SWAP5 GT PUSH2 0x144A JUMPI PUSH1 0x40 MSTORE SWAP2 PUSH32 0x6215DF0421B8B71FFBC92898B478B5AD9520EC5034D7C686BBDC7AFDFAD068E8 PUSH2 0x13C3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP11 SWAP7 POP DUP8 SWAP6 POP PUSH1 0x20 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x13A6 JUMP JUMPDEST DUP3 MLOAD DUP6 MSTORE DUP12 SWAP8 POP DUP9 SWAP7 POP PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x136A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20616C6C6F636174696F6E2066756E647320746F6F206C6F77000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C6C6F636174696F6E20706572696F6420686173206E6F7420656E64656400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x5DF JUMPI PUSH2 0x155D SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16DC JUMP JUMPDEST SWAP1 PUSH2 0x1566 PUSH2 0x18DE JUMP JUMPDEST DUP2 MLOAD SWAP1 DUP2 GT PUSH2 0x162E JUMPI PUSH1 0x1 PUSH1 0x40 SHL DUP2 GT PUSH2 0x162E JUMPI PUSH1 0x9 SLOAD DUP2 PUSH1 0x9 SSTORE DUP1 DUP3 LT PUSH2 0x1600 JUMPI JUMPDEST POP DUP4 DUP3 ADD PUSH1 0x9 DUP5 MSTORE DUP4 JUMPDEST DUP3 DUP2 LT PUSH2 0x15D7 JUMPI PUSH1 0x40 MLOAD DUP7 DUP2 MSTORE DUP6 SWAP1 PUSH32 0xBA55FCA14CA25313D8196ABBEE269381AD67BE27729F5073609A3EB9318391A SWAP1 DUP1 PUSH2 0x15D1 DUP2 DUP12 ADD DUP10 PUSH2 0x1C67 JUMP JUMPDEST SUB SWAP1 LOG1 DUP1 RETURN JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1EC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 ADD SSTORE SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1593 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1EC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP3 ADD SWAP2 ADD JUMPDEST DUP2 DUP2 LT PUSH2 0x1623 JUMPI POP PUSH2 0x1589 JUMP JUMPDEST DUP5 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1616 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x165D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x165D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x165D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x165D JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC1A JUMPI JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xC1A JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x16F3 DUP4 PUSH2 0x16AF JUMP JUMPDEST SWAP3 PUSH2 0x1701 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xC1A JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x172B JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xC1A JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x171D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x165D JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xC1A JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x177C DUP3 PUSH2 0x174A JUMP JUMPDEST SWAP3 PUSH2 0x178A PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0xC1A JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x8 PUSH1 0x0 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0xC1A JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xC1A JUMPI PUSH2 0x1823 SWAP2 PUSH1 0x4 ADD PUSH2 0x1765 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xC1A JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x7 DUP3 LT ISZERO PUSH2 0x8DD JUMPI MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1854 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x18B0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x75FD2B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD ISZERO PUSH2 0x18CC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF68FE63 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x18F2 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC1A JUMPI JUMP JUMPDEST SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND SWAP2 DUP2 DUP2 AND DUP1 DUP5 LT ISZERO PUSH2 0x1AA0 JUMPI DUP3 DUP7 AND SWAP1 DUP4 DUP7 AND DUP3 LT ISZERO PUSH2 0x1A5B JUMPI GT PUSH2 0x19FF JUMPI PUSH32 0x5BE4D64080F489B6FEF34A2D8AC3084C5735E83B3789AABC4E6AEAB193E7967F SWAP5 DUP4 PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 PUSH1 0x80 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC0 SHL SWAP1 PUSH1 0xC0 SHL AND SWAP4 PUSH1 0x40 SHL AND OR SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 SHL SWAP1 DUP7 SHL AND OR OR SWAP1 DUP2 PUSH1 0xA SSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE DUP1 DUP3 PUSH1 0x40 SHR AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 DUP5 SHR AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xC0 SHR PUSH1 0x60 DUP3 ADD MSTORE LOG1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526567697374726174696F6E206D75737420656E64206265666F726520616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F636174696F6E20737461727473 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420616C6C6F636174696F6E2074696D65730000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420726567697374726174696F6E2074696D6573000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x7 DUP2 LT ISZERO PUSH2 0x8DD JUMPI PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x4 SLOAD EQ PUSH2 0x1B0E JUMPI PUSH1 0x2 PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1854 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1B69 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526563697069656E74206E6F7420726567697374657265640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xC1A JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0xC1A JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x44 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x29E40D4B PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C5B JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1C2D JUMPI JUMPDEST POP ISZERO PUSH2 0x18B0 JUMPI JUMP JUMPDEST PUSH2 0x1C4E SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1C54 JUMPI JUMPDEST PUSH2 0x1C46 DUP2 DUP4 PUSH2 0x168E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1BAE JUMP JUMPDEST CODESIZE PUSH2 0x1C25 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1C3C JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1C87 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1C79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP1 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP3 MSTORE SWAP3 PUSH1 0x80 DUP3 ADD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT DUP4 DUP6 LT OR PUSH2 0x165D JUMPI PUSH2 0x1D5F SWAP5 PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP7 PUSH1 0x40 MSTORE AND SWAP4 PUSH2 0x1D03 DUP7 PUSH2 0x1673 JUMP JUMPDEST DUP8 DUP7 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 PUSH1 0xA0 DUP3 ADD MSTORE MLOAD SWAP1 DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x1DE7 JUMPI RETURNDATASIZE SWAP2 PUSH2 0x1D43 DUP4 PUSH2 0x174A JUMP JUMPDEST SWAP3 PUSH2 0x1D51 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE PUSH1 0x0 DUP8 DUP6 ADD RETURNDATACOPY PUSH2 0x1DEB JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP3 DUP3 ISZERO SWAP3 DUP4 ISZERO PUSH2 0x1DCF JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x1D78 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x1DDF SWAP4 POP DUP3 ADD DUP2 ADD SWAP2 ADD PUSH2 0x1BAE JUMP JUMPDEST CODESIZE DUP3 DUP2 PUSH2 0x1D6D JUMP JUMPDEST PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x1E4D JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x1DFF JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x1E08 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1E60 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP2 PUSH1 0x20 DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x1EA6 JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH2 0x1E83 JUMP INVALID PUSH15 0x1540171B6C0C960B71A7020D9F6007 PUSH32 0x6AF931A8BBF590DA0223DACF75C7AFA264697066735822122090D57829FE2272 SIGNEXTEND PUSH6 0x9EBC0FF14EC3 SWAP16 0xBE PUSH2 0x326E 0xB2 PC MSTORE MSTORE8 MSTORE8 CREATE2 DUP5 0x4A EXTCODECOPY CALL DUP13 DUP12 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "825:13038:16:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;-1:-1:-1;;;;;825:13038:16;;;5268:19:7;;825:13038:16;;5320:17:7;;;825:13038:16;;;;;;;;;;;5320:17:7;;825:13038:16;;-1:-1:-1;;825:13038:16;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;-1:-1:-1;;825:13038:16;;;5320:17:7;;;;;;;;-1:-1:-1;5320:17:7;;;:::i;:::-;825:13038:16;5310:28:7;;825:13038:16;5297:41:7;2518:6:8;825:13038:16;;-1:-1:-1;;;;;;825:13038:16;;;719:10:14;825:13038:16;;;;;;;;;;;;;;;2566:40:8;-1:-1:-1;;2566:40:8;825:13038:16;1821:22:9;1716:1;825:13038:16;;2624:31;825:13038;;;2624:31;825:13038;;;2665:22;825:13038;;;2665:22;825:13038;;;;;;;5268:19:7;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;825:13038:16;;;;;;;;;;;;;;;-1:-1:-1;825:13038:16;;;;;;;-1:-1:-1;;825:13038:16;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;825:13038:16;;;;;;:::o"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 5830,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_array_address_dyn": {
									"entryPoint": 5852,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_bool_fromMemory": {
									"entryPoint": 7086,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_bytes": {
									"entryPoint": 5989,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_bytest_address": {
									"entryPoint": 6137,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"abi_decode_uint64_fromMemory": {
									"entryPoint": 6454,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_array_address_dyn": {
									"entryPoint": 7271,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_enum_Status": {
									"entryPoint": 6202,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"array_allocation_size_array_address_dyn": {
									"entryPoint": 5807,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_allocation_size_bytes": {
									"entryPoint": 5962,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 6215,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 5774,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_34600": {
									"entryPoint": 5698,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"finalize_allocation_34607": {
									"entryPoint": 5747,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_checkOnlyAllo": {
									"entryPoint": 6270,
									"id": 1408,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_checkOnlyInitialized": {
									"entryPoint": 6338,
									"id": 1458,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_checkOnlyPoolManager": {
									"entryPoint": 7110,
									"id": 1425,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_checkOwner": {
									"entryPoint": 6366,
									"id": 1669,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_nonReentrantBefore": {
									"entryPoint": 6909,
									"id": 1772,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_safeTransfer": {
									"entryPoint": 7332,
									"id": 1939,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_updatePoolTimestamps": {
									"entryPoint": 6474,
									"id": 3040,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"fun_verifyCallResultFromTarget": {
									"entryPoint": 7659,
									"id": 2567,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"increment_uint256": {
									"entryPoint": 6995,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"memory_array_index_access_address_dyn": {
									"entryPoint": 6250,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"require_helper_stringliteral_bd60": {
									"entryPoint": 7010,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"storage_array_index_access_address_dyn": {
									"entryPoint": 6060,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"update_storage_value_offsett_enum_Status_to_enum_Status": {
									"entryPoint": 6885,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"1026": [
									{
										"length": 32,
										"start": 4389
									},
									{
										"length": 32,
										"start": 6272
									},
									{
										"length": 32,
										"start": 7156
									}
								],
								"1028": [
									{
										"length": 32,
										"start": 3409
									}
								]
							},
							"linkReferences": {},
							"object": "6080604052600436101561001257600080fd5b6000803560e01c8062912917146115295780630a6f0ee91461119e57806314f20ef91461115457806315cc481e1461110f57806319220dbc146110e65780632143e92f1461108a5780632bbe0cae14610e4f5780632cb5b5ed14610db05780632d30e6bf14610d9257806338fff2d014610d7457806342fda9c714610d395780634533d67814610d185780634ab4ba4214610cfa5780634d31d08714610cd45780636d40f85b14610c90578063715018a614610c325780638afbf66914610b7f5780638da5cb5b14610b565780639af5c09d14610b2f578063a0cf0aea14610b00578063b2b878d0146108f3578063b9bd12e41461083e578063d2e17f5914610814578063df868ed3146107f2578063dff7d2c7146107c8578063eb11af9314610782578063eb82031214610721578063edd146cc14610661578063ef2920fc146102a0578063f2fde38b146101d5578063f5b0dfb7146101a75763fc0c546a1461017c57600080fd5b346101a457806003193601126101a4576006546040516001600160a01b039091168152602090f35b80fd5b50346101a45760203660031901126101a4576101c161187e565b6101cf600435600254611847565b60025580f35b50346101a45760203660031901126101a4576101ef6116c6565b6101f76118de565b6001600160a01b0390811690811561024c57600354826bffffffffffffffffffffffff60a01b821617600355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b506102aa366117f9565b90916102b461187e565b6102bc6118c2565b600a54916001600160401b0392838160801c164210159081610653575b501561060e576102e890611bc6565b82518301926020926040828587019603126105df57838201518181116105e35782019185603f840112156105e3578483015192610324846116af565b93610332604051958661168e565b80855260408786019160051b8301019188831161060a57604001905b8282106105e75750505060408101519182116105e357019380603f860112156105df578385015161037e816116af565b9561038c604051978861168e565b81875260408688019260051b8201019283116105db576040869101915b8383106105cb5750505050805184510361058657815b8151811015610475576001600160a01b03806103db838561186a565b51168085526103f66007928388526040872054161515611b62565b845280855260029060ff82604087200154169081101561046157036104235761041e90611b53565b6103bf565b60405162461bcd60e51b8152600481018590526016602482015275149958da5c1a595b9d081b9bdd081858d8d95c1d195960521b6044820152606490fd5b634e487b7160e01b85526021600452602485fd5b50838383845b845181101561050e57610509906001600160a01b0361049a828861186a565b51167f183f2ce0b749ed46549cb16586af0c501abab8d242cc4b2076aec30d2dd9c4bc8560406104f16104cd868b61186a565b51858d526007988985528d600194859120016104ea838254611847565b9055611847565b96848c52825260408b200154604051908152a2611b53565b61047b565b50915091811561054c57916040917fb41462b4bb729cf768173ceba7cc740624558176f07a40ac23a5f8fcdb6c4abd9351918351928352820152a180f35b60405162461bcd60e51b8152600481018490526012602482015271139bc8199d5b991cc8185b1b1bd8d85d195960721b6044820152606490fd5b60405162461bcd60e51b815260048101849052601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b82518152918101918691016103a9565b8480fd5b8280fd5b8380fd5b81516001600160a01b038116810361060657815290870190870161034e565b8780fd5b8680fd5b60405162461bcd60e51b815260206004820152601860248201527f416c6c6f636174696f6e206973206e6f742061637469766500000000000000006044820152606490fd5b905060c01c421115386102d9565b50346101a45760403660031901126101a4576004356024356001600160401b0381116105df57610695903690600401611765565b9061069e61187e565b60015461070f5780156106fd576001556080818051810103126106f957806106cb60206106f69301611936565b906106d860408201611936565b6106f060806106e960608501611936565b9301611936565b9261194a565b80f35b5080fd5b604051637fcce2a960e01b8152600490fd5b60405163439a74c960e01b8152600490fd5b50346101a45760203660031901126101a4576060906001600160a01b0390610780906040908361074f6116c6565b168152600760205220918254169160ff6002600183015492015416906040519384526020840152604083019061183a565bf35b50346101a45760203660031901126101a45760209060ff906002906040906001600160a01b036107b06116c6565b1681526007855220015416610780604051809261183a565b50346101a457806003193601126101a45760206001600160401b03600a5460401c16604051908152f35b50346101a457806003193601126101a45760ff60209154166040519015158152f35b50346101a457806003193601126101a45760206001600160401b03600a5460801c16604051908152f35b50346101a45760203660031901126101a457604061085a6116c6565b918082805161086881611642565b828152826020820152015260018060a01b0380931681526007602052206040519061089282611642565b82815416825260ff60026001830154926020850193845201541690604083019060078310156108dd57606094610780938352604051945116845251602084015251604083019061183a565b634e487b7160e01b600052602160045260246000fd5b50346101a45760403660031901126101a4576001600160401b036004358181116105df576109259036906004016116dc565b916024918235908082116105df57366023830112156105df57816004013561094c816116af565b9261095a604051948561168e565b818452602095808786019360051b8301019336851161060a57818301935b858510610ad65750505050505083519080518203610ac45761099c829593956116af565b926109aa604051948561168e565b828452601f196109b9846116af565b01865b818110610a9a575050855b838110610a2057505050506040519180830190808452825180925280604085019301945b8281106109f85784840385f35b855180516001600160a01b0316855282015184830152948101946040909301926001016109eb565b9395936001600160a01b03610a35828461186a565b511690610a42818561186a565b50600087604051610a5281611673565b8281520152818652600787526001918260408820015460405191610a7583611673565b825288820152610a85828a61186a565b52610a90818961186a565b50019593956109c7565b8690604098969851610aab81611673565b6000815260008382015282828b010152019694966109bc565b604051633da4c02b60e11b8152600490fd5b8435828111610afc578991610af18392863691890101611765565b815201940193610978565b8880fd5b50346101a457806003193601126101a457602060405173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8152f35b50346101a457806003193601126101a45760206001600160401b03600a5416604051908152f35b50346101a457806003193601126101a4576003546040516001600160a01b039091168152602090f35b50346101a457806003193601126101a457610b986118de565b6006546040516370a0823160e01b81523060048201526001600160a01b03918216602082602481845afa918215610c27578492610bef575b5081610bda578380f35b610be8926003541690611ca4565b3880808380f35b9091506020813d8211610c1f575b81610c0a6020938361168e565b81010312610c1a57519038610bd0565b600080fd5b3d9150610bfd565b6040513d86823e3d90fd5b50346101a457806003193601126101a457610c4b6118de565b600380546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101a45760203660031901126101a457600435906008548210156101a4576020610cbb836117ac565b905460405160039290921b1c6001600160a01b03168152f35b50346101a45760203660031901126101a457610cee6116c6565b50602060405160018152f35b50346101a457806003193601126101a4576020600254604051908152f35b50346101a457806003193601126101a4576020600a5460c01c604051908152f35b50346101a457806003193601126101a45760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101a457806003193601126101a4576020600154604051908152f35b50346101a457806003193601126101a4576020600854604051908152f35b50346101a45760403660031901126101a457610dca6116c6565b60243560078110156105df5760207f256c90eeec0565314afb6bdf67c3a909a88bd142e40d03c91a1f68e2a6bc35db91610e026118de565b6001600160a01b039384168086526007835260408620549094610e2791161515611b62565b83855260078252610e3e8160026040882001611ae5565b610e4b604051809261183a565ba280f35b50610e59366117f9565b50610e6261187e565b610e6a6118c2565b600a546001600160401b03808216421015918261107a575b50501561103557610e91611afd565b6040818051810103126106f957602091828201519160018060a01b03908184168094036105df5760400151918381526007855281604082205416610ff057604051610edb81611642565b8481528581018481526040820190600182528684526007885284604085209351166bffffffffffffffffffffffff60a01b84541617835551600183015551906007821015610fdc57906002610f309201611ae5565b60085490600160401b821015610fc8575083927f0695e999be8100bdb5bee8612337296508d527eae78c65b8f170eacb5a3b439d92610f768360018995016008556117ac565b819291549060031b9187831b921b1916179055604051908152a2807f256c90eeec0565314afb6bdf67c3a909a88bd142e40d03c91a1f68e2a6bc35db8360405160018152a26001600455604051908152f35b634e487b7160e01b81526041600452602490fd5b634e487b7160e01b83526021600452602483fd5b60405162461bcd60e51b815260048101869052601c60248201527f526563697069656e7420616c72656164792072656769737465726564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f526567697374726174696f6e206973206e6f74206163746976650000000000006044820152606490fd5b60401c1642111590503880610e82565b50346101a45760803660031901126101a4576004356001600160401b038082168203610c1a576024358181168103610c1a57604435908282168203610c1a576064359283168303610c1a576106f6936110e16118de565b61194a565b50346101a457806003193601126101a4576005546040516001600160a01b039091168152602090f35b50346101a457806003193601126101a4576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101a45760203660031901126101a4576004356009548110156106f9576009600052600080516020611ec083398151915201546040516001600160a01b039091168152602090f35b50346101a45760603660031901126101a4576004356001600160401b0381116106f9576111cf9036906004016116dc565b6024356001600160401b0381116105df576111ee903690600401611765565b6044356001600160a01b03811681036105e35761120961187e565b6112116118c2565b600a5460c01c4211156114e45761122f9061122a611afd565b611bc6565b6020818051810103126105df576020015190805161124c816116af565b9061125a604051928361168e565b808252611269601f19916116af565b013660208301378391825b81518410156112d0576112ca906112c4906001600160a01b03611297878661186a565b51168852600760205260016040892001546112b2878761186a565b526112bd868661186a565b5190611847565b93611b53565b92611274565b848693826002541061149f576006546005546112fa9185916001600160a01b039081169116611ca4565b60055460015460065490936001600160a01b039283169392909116833b1561060657604051628cd62560e61b81526004810195909552602485015260c0604485015286928492909161134f60c4850189611c67565b60031985820301606486015260208084519283815201930190865b8181106114835750505060848401526003198382030160a4840152602060095491828152019060098552600080516020611ec083398151915290855b81811061145e575050508383809203925af18015610c275761140f575b507f6215df0421b8b71ffbc92898b478b5ad9520ec5034d7c686bbdc7afdfad068e8916113fe91604051928392604084526040840190611c67565b9060208301520390a1600160045580f35b6001600160401b03819492941161144a57604052917f6215df0421b8b71ffbc92898b478b5ad9520ec5034d7c686bbdc7afdfad068e86113c3565b634e487b7160e01b82526041600452602482fd5b82546001600160a01b031684528a9650879550602090930192600192830192016113a6565b825185528b97508896506020948501949092019160010161136a565b60405162461bcd60e51b815260206004820152601d60248201527f506f6f6c20616c6c6f636174696f6e2066756e647320746f6f206c6f770000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f416c6c6f636174696f6e20706572696f6420686173206e6f7420656e646564006044820152606490fd5b50346101a457602090816003193601126101a4576001600160401b036004358181116105df5761155d9036906004016116dc565b906115666118de565b815190811161162e57600160401b811161162e5760095481600955808210611600575b5083820160098452835b8281106115d75760405186815285907f0ba55fca14ca25313d8196abbee269381ad67be27729f5073609a3eb9318391a90806115d1818b0189611c67565b0390a180f35b81516001600160a01b0316600080516020611ec083398151915282015590850190600101611593565b81600080516020611ec083398151915291820191015b8181106116235750611589565b848155600101611616565b634e487b7160e01b83526041600452602483fd5b606081019081106001600160401b0382111761165d57604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761165d57604052565b90601f801991011681019081106001600160401b0382111761165d57604052565b6001600160401b03811161165d5760051b60200190565b600435906001600160a01b0382168203610c1a57565b81601f82011215610c1a578035916116f3836116af565b92611701604051948561168e565b808452602092838086019260051b820101928311610c1a578301905b82821061172b575050505090565b81356001600160a01b0381168103610c1a57815290830190830161171d565b6001600160401b03811161165d57601f01601f191660200190565b81601f82011215610c1a5780359061177c8261174a565b9261178a604051948561168e565b82845260208383010111610c1a57816000926020809301838601378301015290565b6008548110156117e35760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b634e487b7160e01b600052603260045260246000fd5b6040600319820112610c1a57600435906001600160401b038211610c1a5761182391600401611765565b906024356001600160a01b0381168103610c1a5790565b9060078210156108dd5752565b9190820180921161185457565b634e487b7160e01b600052601160045260246000fd5b80518210156117e35760209160051b010190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036118b057565b60405163075fd2b160e01b8152600490fd5b600154156118cc57565b604051630f68fe6360e21b8152600490fd5b6003546001600160a01b031633036118f257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b51906001600160401b0382168203610c1a57565b9192916001600160401b039081169181811680841015611aa05782861690838616821015611a5b57116119ff577f5be4d64080f489b6fef34a2d8ac3084c5735e83b3789aabc4e6aeab193e7967f94836fffffffffffffffff00000000000000006080966001600160401b0360c01b9060c01b169360401b1617906001600160401b03861b90861b1617179081600a55604051928352808260401c16602084015281841c16604083015260c01c6060820152a1565b60405162461bcd60e51b815260206004820152602e60248201527f526567697374726174696f6e206d75737420656e64206265666f726520616c6c60448201526d6f636174696f6e2073746172747360901b6064820152608490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c696420616c6c6f636174696f6e2074696d657300000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420726567697374726174696f6e2074696d65730000000000006044820152606490fd5b9060078110156108dd5760ff80198354169116179055565b600260045414611b0e576002600455565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60001981146118545760010190565b15611b6957565b60405162461bcd60e51b815260206004820152601860248201527f526563697069656e74206e6f74207265676973746572656400000000000000006044820152606490fd5b90816020910312610c1a57518015158103610c1a5790565b60206001546044604051809481936329e40d4b60e01b8352600483015260018060a01b0380911660248301527f0000000000000000000000000000000000000000000000000000000000000000165afa908115611c5b57600091611c2d575b50156118b057565b611c4e915060203d8111611c54575b611c46818361168e565b810190611bae565b38611c25565b503d611c3c565b6040513d6000823e3d90fd5b90815180825260208080930193019160005b828110611c87575050505090565b83516001600160a01b031685529381019392810192600101611c79565b60405163a9059cbb60e01b60208083019182526001600160a01b0394851660248401526044808401969096529482529260808201926001600160401b0384118385101761165d57611d5f946000928392866040521693611d0386611673565b8786527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af13d15611de7573d91611d438361174a565b92611d51604051948561168e565b83523d60008785013e611deb565b805190828215928315611dcf575b50505015611d785750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b611ddf9350820181019101611bae565b388281611d6d565b6060915b91929015611e4d5750815115611dff575090565b3b15611e085790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611e605750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611ea6575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350611e8356fe6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7afa264697066735822122090d57829fe22720b659ebc0ff14ec39fbe61326eb258525353f5844a3cf18c8b64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x912917 EQ PUSH2 0x1529 JUMPI DUP1 PUSH4 0xA6F0EE9 EQ PUSH2 0x119E JUMPI DUP1 PUSH4 0x14F20EF9 EQ PUSH2 0x1154 JUMPI DUP1 PUSH4 0x15CC481E EQ PUSH2 0x110F JUMPI DUP1 PUSH4 0x19220DBC EQ PUSH2 0x10E6 JUMPI DUP1 PUSH4 0x2143E92F EQ PUSH2 0x108A JUMPI DUP1 PUSH4 0x2BBE0CAE EQ PUSH2 0xE4F JUMPI DUP1 PUSH4 0x2CB5B5ED EQ PUSH2 0xDB0 JUMPI DUP1 PUSH4 0x2D30E6BF EQ PUSH2 0xD92 JUMPI DUP1 PUSH4 0x38FFF2D0 EQ PUSH2 0xD74 JUMPI DUP1 PUSH4 0x42FDA9C7 EQ PUSH2 0xD39 JUMPI DUP1 PUSH4 0x4533D678 EQ PUSH2 0xD18 JUMPI DUP1 PUSH4 0x4AB4BA42 EQ PUSH2 0xCFA JUMPI DUP1 PUSH4 0x4D31D087 EQ PUSH2 0xCD4 JUMPI DUP1 PUSH4 0x6D40F85B EQ PUSH2 0xC90 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xC32 JUMPI DUP1 PUSH4 0x8AFBF669 EQ PUSH2 0xB7F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xB56 JUMPI DUP1 PUSH4 0x9AF5C09D EQ PUSH2 0xB2F JUMPI DUP1 PUSH4 0xA0CF0AEA EQ PUSH2 0xB00 JUMPI DUP1 PUSH4 0xB2B878D0 EQ PUSH2 0x8F3 JUMPI DUP1 PUSH4 0xB9BD12E4 EQ PUSH2 0x83E JUMPI DUP1 PUSH4 0xD2E17F59 EQ PUSH2 0x814 JUMPI DUP1 PUSH4 0xDF868ED3 EQ PUSH2 0x7F2 JUMPI DUP1 PUSH4 0xDFF7D2C7 EQ PUSH2 0x7C8 JUMPI DUP1 PUSH4 0xEB11AF93 EQ PUSH2 0x782 JUMPI DUP1 PUSH4 0xEB820312 EQ PUSH2 0x721 JUMPI DUP1 PUSH4 0xEDD146CC EQ PUSH2 0x661 JUMPI DUP1 PUSH4 0xEF2920FC EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0xF5B0DFB7 EQ PUSH2 0x1A7 JUMPI PUSH4 0xFC0C546A EQ PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0x1C1 PUSH2 0x187E JUMP JUMPDEST PUSH2 0x1CF PUSH1 0x4 CALLDATALOAD PUSH1 0x2 SLOAD PUSH2 0x1847 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0x1EF PUSH2 0x16C6 JUMP JUMPDEST PUSH2 0x1F7 PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x24C JUMPI PUSH1 0x3 SLOAD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x3 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH2 0x2AA CALLDATASIZE PUSH2 0x17F9 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x2B4 PUSH2 0x187E JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0xA SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP2 PUSH1 0x80 SHR AND TIMESTAMP LT ISZERO SWAP1 DUP2 PUSH2 0x653 JUMPI JUMPDEST POP ISZERO PUSH2 0x60E JUMPI PUSH2 0x2E8 SWAP1 PUSH2 0x1BC6 JUMP JUMPDEST DUP3 MLOAD DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x40 DUP3 DUP6 DUP8 ADD SWAP7 SUB SLT PUSH2 0x5DF JUMPI DUP4 DUP3 ADD MLOAD DUP2 DUP2 GT PUSH2 0x5E3 JUMPI DUP3 ADD SWAP2 DUP6 PUSH1 0x3F DUP5 ADD SLT ISZERO PUSH2 0x5E3 JUMPI DUP5 DUP4 ADD MLOAD SWAP3 PUSH2 0x324 DUP5 PUSH2 0x16AF JUMP JUMPDEST SWAP4 PUSH2 0x332 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x168E JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x40 DUP8 DUP7 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 DUP9 DUP4 GT PUSH2 0x60A JUMPI PUSH1 0x40 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x5E7 JUMPI POP POP POP PUSH1 0x40 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x5E3 JUMPI ADD SWAP4 DUP1 PUSH1 0x3F DUP7 ADD SLT ISZERO PUSH2 0x5DF JUMPI DUP4 DUP6 ADD MLOAD PUSH2 0x37E DUP2 PUSH2 0x16AF JUMP JUMPDEST SWAP6 PUSH2 0x38C PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x168E JUMP JUMPDEST DUP2 DUP8 MSTORE PUSH1 0x40 DUP7 DUP9 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x5DB JUMPI PUSH1 0x40 DUP7 SWAP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x5CB JUMPI POP POP POP POP DUP1 MLOAD DUP5 MLOAD SUB PUSH2 0x586 JUMPI DUP2 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x3DB DUP4 DUP6 PUSH2 0x186A JUMP JUMPDEST MLOAD AND DUP1 DUP6 MSTORE PUSH2 0x3F6 PUSH1 0x7 SWAP3 DUP4 DUP9 MSTORE PUSH1 0x40 DUP8 KECCAK256 SLOAD AND ISZERO ISZERO PUSH2 0x1B62 JUMP JUMPDEST DUP5 MSTORE DUP1 DUP6 MSTORE PUSH1 0x2 SWAP1 PUSH1 0xFF DUP3 PUSH1 0x40 DUP8 KECCAK256 ADD SLOAD AND SWAP1 DUP2 LT ISZERO PUSH2 0x461 JUMPI SUB PUSH2 0x423 JUMPI PUSH2 0x41E SWAP1 PUSH2 0x1B53 JUMP JUMPDEST PUSH2 0x3BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x149958DA5C1A595B9D081B9BDD081858D8D95C1D1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST POP DUP4 DUP4 DUP4 DUP5 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x50E JUMPI PUSH2 0x509 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x49A DUP3 DUP9 PUSH2 0x186A JUMP JUMPDEST MLOAD AND PUSH32 0x183F2CE0B749ED46549CB16586AF0C501ABAB8D242CC4B2076AEC30D2DD9C4BC DUP6 PUSH1 0x40 PUSH2 0x4F1 PUSH2 0x4CD DUP7 DUP12 PUSH2 0x186A JUMP JUMPDEST MLOAD DUP6 DUP14 MSTORE PUSH1 0x7 SWAP9 DUP10 DUP6 MSTORE DUP14 PUSH1 0x1 SWAP5 DUP6 SWAP2 KECCAK256 ADD PUSH2 0x4EA DUP4 DUP3 SLOAD PUSH2 0x1847 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1847 JUMP JUMPDEST SWAP7 DUP5 DUP13 MSTORE DUP3 MSTORE PUSH1 0x40 DUP12 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 PUSH2 0x1B53 JUMP JUMPDEST PUSH2 0x47B JUMP JUMPDEST POP SWAP2 POP SWAP2 DUP2 ISZERO PUSH2 0x54C JUMPI SWAP2 PUSH1 0x40 SWAP2 PUSH32 0xB41462B4BB729CF768173CEBA7CC740624558176F07A40AC23A5F8FCDB6C4ABD SWAP4 MLOAD SWAP2 DUP4 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x139BC8199D5B991CC8185B1B1BD8D85D1959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D69736D61746368656420696E70757420617272617973000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 DUP7 SWAP2 ADD PUSH2 0x3A9 JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x606 JUMPI DUP2 MSTORE SWAP1 DUP8 ADD SWAP1 DUP8 ADD PUSH2 0x34E JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C6C6F636174696F6E206973206E6F74206163746976650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0xC0 SHR TIMESTAMP GT ISZERO CODESIZE PUSH2 0x2D9 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x5DF JUMPI PUSH2 0x695 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1765 JUMP JUMPDEST SWAP1 PUSH2 0x69E PUSH2 0x187E JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x70F JUMPI DUP1 ISZERO PUSH2 0x6FD JUMPI PUSH1 0x1 SSTORE PUSH1 0x80 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x6F9 JUMPI DUP1 PUSH2 0x6CB PUSH1 0x20 PUSH2 0x6F6 SWAP4 ADD PUSH2 0x1936 JUMP JUMPDEST SWAP1 PUSH2 0x6D8 PUSH1 0x40 DUP3 ADD PUSH2 0x1936 JUMP JUMPDEST PUSH2 0x6F0 PUSH1 0x80 PUSH2 0x6E9 PUSH1 0x60 DUP6 ADD PUSH2 0x1936 JUMP JUMPDEST SWAP4 ADD PUSH2 0x1936 JUMP JUMPDEST SWAP3 PUSH2 0x194A JUMP JUMPDEST DUP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7FCCE2A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x439A74C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x780 SWAP1 PUSH1 0x40 SWAP1 DUP4 PUSH2 0x74F PUSH2 0x16C6 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE KECCAK256 SWAP2 DUP3 SLOAD AND SWAP2 PUSH1 0xFF PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 ADD SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x183A JUMP JUMPDEST RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x40 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x7B0 PUSH2 0x16C6 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x7 DUP6 MSTORE KECCAK256 ADD SLOAD AND PUSH2 0x780 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH2 0x183A JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xA SLOAD PUSH1 0x40 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xA SLOAD PUSH1 0x80 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x40 PUSH2 0x85A PUSH2 0x16C6 JUMP JUMPDEST SWAP2 DUP1 DUP3 DUP1 MLOAD PUSH2 0x868 DUP2 PUSH2 0x1642 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x892 DUP3 PUSH2 0x1642 JUMP JUMPDEST DUP3 DUP2 SLOAD AND DUP3 MSTORE PUSH1 0xFF PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 PUSH1 0x20 DUP6 ADD SWAP4 DUP5 MSTORE ADD SLOAD AND SWAP1 PUSH1 0x40 DUP4 ADD SWAP1 PUSH1 0x7 DUP4 LT ISZERO PUSH2 0x8DD JUMPI PUSH1 0x60 SWAP5 PUSH2 0x780 SWAP4 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP5 MLOAD AND DUP5 MSTORE MLOAD PUSH1 0x20 DUP5 ADD MSTORE MLOAD PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x183A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x5DF JUMPI PUSH2 0x925 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16DC JUMP JUMPDEST SWAP2 PUSH1 0x24 SWAP2 DUP3 CALLDATALOAD SWAP1 DUP1 DUP3 GT PUSH2 0x5DF JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x5DF JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x94C DUP2 PUSH2 0x16AF JUMP JUMPDEST SWAP3 PUSH2 0x95A PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 SWAP6 DUP1 DUP8 DUP7 ADD SWAP4 PUSH1 0x5 SHL DUP4 ADD ADD SWAP4 CALLDATASIZE DUP6 GT PUSH2 0x60A JUMPI DUP2 DUP4 ADD SWAP4 JUMPDEST DUP6 DUP6 LT PUSH2 0xAD6 JUMPI POP POP POP POP POP POP DUP4 MLOAD SWAP1 DUP1 MLOAD DUP3 SUB PUSH2 0xAC4 JUMPI PUSH2 0x99C DUP3 SWAP6 SWAP4 SWAP6 PUSH2 0x16AF JUMP JUMPDEST SWAP3 PUSH2 0x9AA PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x1F NOT PUSH2 0x9B9 DUP5 PUSH2 0x16AF JUMP JUMPDEST ADD DUP7 JUMPDEST DUP2 DUP2 LT PUSH2 0xA9A JUMPI POP POP DUP6 JUMPDEST DUP4 DUP2 LT PUSH2 0xA20 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP1 DUP4 ADD SWAP1 DUP1 DUP5 MSTORE DUP3 MLOAD DUP1 SWAP3 MSTORE DUP1 PUSH1 0x40 DUP6 ADD SWAP4 ADD SWAP5 JUMPDEST DUP3 DUP2 LT PUSH2 0x9F8 JUMPI DUP5 DUP5 SUB DUP6 RETURN JUMPDEST DUP6 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP3 ADD MLOAD DUP5 DUP4 ADD MSTORE SWAP5 DUP2 ADD SWAP5 PUSH1 0x40 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9EB JUMP JUMPDEST SWAP4 SWAP6 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xA35 DUP3 DUP5 PUSH2 0x186A JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0xA42 DUP2 DUP6 PUSH2 0x186A JUMP JUMPDEST POP PUSH1 0x0 DUP8 PUSH1 0x40 MLOAD PUSH2 0xA52 DUP2 PUSH2 0x1673 JUMP JUMPDEST DUP3 DUP2 MSTORE ADD MSTORE DUP2 DUP7 MSTORE PUSH1 0x7 DUP8 MSTORE PUSH1 0x1 SWAP2 DUP3 PUSH1 0x40 DUP9 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0xA75 DUP4 PUSH2 0x1673 JUMP JUMPDEST DUP3 MSTORE DUP9 DUP3 ADD MSTORE PUSH2 0xA85 DUP3 DUP11 PUSH2 0x186A JUMP JUMPDEST MSTORE PUSH2 0xA90 DUP2 DUP10 PUSH2 0x186A JUMP JUMPDEST POP ADD SWAP6 SWAP4 SWAP6 PUSH2 0x9C7 JUMP JUMPDEST DUP7 SWAP1 PUSH1 0x40 SWAP9 SWAP7 SWAP9 MLOAD PUSH2 0xAAB DUP2 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE DUP3 DUP3 DUP12 ADD ADD MSTORE ADD SWAP7 SWAP5 SWAP7 PUSH2 0x9BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3DA4C02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP5 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xAFC JUMPI DUP10 SWAP2 PUSH2 0xAF1 DUP4 SWAP3 DUP7 CALLDATASIZE SWAP2 DUP10 ADD ADD PUSH2 0x1765 JUMP JUMPDEST DUP2 MSTORE ADD SWAP5 ADD SWAP4 PUSH2 0x978 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xA SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0xB98 PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP3 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xC27 JUMPI DUP5 SWAP3 PUSH2 0xBEF JUMPI JUMPDEST POP DUP2 PUSH2 0xBDA JUMPI DUP4 DUP1 RETURN JUMPDEST PUSH2 0xBE8 SWAP3 PUSH1 0x3 SLOAD AND SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0xC1F JUMPI JUMPDEST DUP2 PUSH2 0xC0A PUSH1 0x20 SWAP4 DUP4 PUSH2 0x168E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xC1A JUMPI MLOAD SWAP1 CODESIZE PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0xC4B PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x8 SLOAD DUP3 LT ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH2 0xCBB DUP4 PUSH2 0x17AC JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0xCEE PUSH2 0x16C6 JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0xA SLOAD PUSH1 0xC0 SHR PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH2 0xDCA PUSH2 0x16C6 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x7 DUP2 LT ISZERO PUSH2 0x5DF JUMPI PUSH1 0x20 PUSH32 0x256C90EEEC0565314AFB6BDF67C3A909A88BD142E40D03C91A1F68E2A6BC35DB SWAP2 PUSH2 0xE02 PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP1 DUP7 MSTORE PUSH1 0x7 DUP4 MSTORE PUSH1 0x40 DUP7 KECCAK256 SLOAD SWAP1 SWAP5 PUSH2 0xE27 SWAP2 AND ISZERO ISZERO PUSH2 0x1B62 JUMP JUMPDEST DUP4 DUP6 MSTORE PUSH1 0x7 DUP3 MSTORE PUSH2 0xE3E DUP2 PUSH1 0x2 PUSH1 0x40 DUP9 KECCAK256 ADD PUSH2 0x1AE5 JUMP JUMPDEST PUSH2 0xE4B PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH2 0x183A JUMP JUMPDEST LOG2 DUP1 RETURN JUMPDEST POP PUSH2 0xE59 CALLDATASIZE PUSH2 0x17F9 JUMP JUMPDEST POP PUSH2 0xE62 PUSH2 0x187E JUMP JUMPDEST PUSH2 0xE6A PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 AND TIMESTAMP LT ISZERO SWAP2 DUP3 PUSH2 0x107A JUMPI JUMPDEST POP POP ISZERO PUSH2 0x1035 JUMPI PUSH2 0xE91 PUSH2 0x1AFD JUMP JUMPDEST PUSH1 0x40 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x6F9 JUMPI PUSH1 0x20 SWAP2 DUP3 DUP3 ADD MLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP5 AND DUP1 SWAP5 SUB PUSH2 0x5DF JUMPI PUSH1 0x40 ADD MLOAD SWAP2 DUP4 DUP2 MSTORE PUSH1 0x7 DUP6 MSTORE DUP2 PUSH1 0x40 DUP3 KECCAK256 SLOAD AND PUSH2 0xFF0 JUMPI PUSH1 0x40 MLOAD PUSH2 0xEDB DUP2 PUSH2 0x1642 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP6 DUP2 ADD DUP5 DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE DUP7 DUP5 MSTORE PUSH1 0x7 DUP9 MSTORE DUP5 PUSH1 0x40 DUP6 KECCAK256 SWAP4 MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP5 SLOAD AND OR DUP4 SSTORE MLOAD PUSH1 0x1 DUP4 ADD SSTORE MLOAD SWAP1 PUSH1 0x7 DUP3 LT ISZERO PUSH2 0xFDC JUMPI SWAP1 PUSH1 0x2 PUSH2 0xF30 SWAP3 ADD PUSH2 0x1AE5 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT ISZERO PUSH2 0xFC8 JUMPI POP DUP4 SWAP3 PUSH32 0x695E999BE8100BDB5BEE8612337296508D527EAE78C65B8F170EACB5A3B439D SWAP3 PUSH2 0xF76 DUP4 PUSH1 0x1 DUP10 SWAP6 ADD PUSH1 0x8 SSTORE PUSH2 0x17AC JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 DUP8 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 PUSH32 0x256C90EEEC0565314AFB6BDF67C3A909A88BD142E40D03C91A1F68E2A6BC35DB DUP4 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG2 PUSH1 0x1 PUSH1 0x4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526563697069656E7420616C7265616479207265676973746572656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526567697374726174696F6E206973206E6F7420616374697665000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 SHR AND TIMESTAMP GT ISZERO SWAP1 POP CODESIZE DUP1 PUSH2 0xE82 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 AND DUP3 SUB PUSH2 0xC1A JUMPI PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0xC1A JUMPI PUSH1 0x44 CALLDATALOAD SWAP1 DUP3 DUP3 AND DUP3 SUB PUSH2 0xC1A JUMPI PUSH1 0x64 CALLDATALOAD SWAP3 DUP4 AND DUP4 SUB PUSH2 0xC1A JUMPI PUSH2 0x6F6 SWAP4 PUSH2 0x10E1 PUSH2 0x18DE JUMP JUMPDEST PUSH2 0x194A JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x9 SLOAD DUP2 LT ISZERO PUSH2 0x6F9 JUMPI PUSH1 0x9 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1EC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x6F9 JUMPI PUSH2 0x11CF SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x5DF JUMPI PUSH2 0x11EE SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1765 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x5E3 JUMPI PUSH2 0x1209 PUSH2 0x187E JUMP JUMPDEST PUSH2 0x1211 PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0xC0 SHR TIMESTAMP GT ISZERO PUSH2 0x14E4 JUMPI PUSH2 0x122F SWAP1 PUSH2 0x122A PUSH2 0x1AFD JUMP JUMPDEST PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x5DF JUMPI PUSH1 0x20 ADD MLOAD SWAP1 DUP1 MLOAD PUSH2 0x124C DUP2 PUSH2 0x16AF JUMP JUMPDEST SWAP1 PUSH2 0x125A PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x168E JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH2 0x1269 PUSH1 0x1F NOT SWAP2 PUSH2 0x16AF JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP4 ADD CALLDATACOPY DUP4 SWAP2 DUP3 JUMPDEST DUP2 MLOAD DUP5 LT ISZERO PUSH2 0x12D0 JUMPI PUSH2 0x12CA SWAP1 PUSH2 0x12C4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1297 DUP8 DUP7 PUSH2 0x186A JUMP JUMPDEST MLOAD AND DUP9 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 DUP10 KECCAK256 ADD SLOAD PUSH2 0x12B2 DUP8 DUP8 PUSH2 0x186A JUMP JUMPDEST MSTORE PUSH2 0x12BD DUP7 DUP7 PUSH2 0x186A JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x1847 JUMP JUMPDEST SWAP4 PUSH2 0x1B53 JUMP JUMPDEST SWAP3 PUSH2 0x1274 JUMP JUMPDEST DUP5 DUP7 SWAP4 DUP3 PUSH1 0x2 SLOAD LT PUSH2 0x149F JUMPI PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0x12FA SWAP2 DUP6 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 SLOAD PUSH1 0x6 SLOAD SWAP1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 SWAP3 SWAP1 SWAP2 AND DUP4 EXTCODESIZE ISZERO PUSH2 0x606 JUMPI PUSH1 0x40 MLOAD PUSH3 0x8CD625 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0xC0 PUSH1 0x44 DUP6 ADD MSTORE DUP7 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 PUSH2 0x134F PUSH1 0xC4 DUP6 ADD DUP10 PUSH2 0x1C67 JUMP JUMPDEST PUSH1 0x3 NOT DUP6 DUP3 SUB ADD PUSH1 0x64 DUP7 ADD MSTORE PUSH1 0x20 DUP1 DUP5 MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP4 ADD SWAP1 DUP7 JUMPDEST DUP2 DUP2 LT PUSH2 0x1483 JUMPI POP POP POP PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0x3 NOT DUP4 DUP3 SUB ADD PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x9 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP1 PUSH1 0x9 DUP6 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1EC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0x145E JUMPI POP POP POP DUP4 DUP4 DUP1 SWAP3 SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xC27 JUMPI PUSH2 0x140F JUMPI JUMPDEST POP PUSH32 0x6215DF0421B8B71FFBC92898B478B5AD9520EC5034D7C686BBDC7AFDFAD068E8 SWAP2 PUSH2 0x13FE SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x1C67 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0x4 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 SWAP5 SWAP3 SWAP5 GT PUSH2 0x144A JUMPI PUSH1 0x40 MSTORE SWAP2 PUSH32 0x6215DF0421B8B71FFBC92898B478B5AD9520EC5034D7C686BBDC7AFDFAD068E8 PUSH2 0x13C3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP11 SWAP7 POP DUP8 SWAP6 POP PUSH1 0x20 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x13A6 JUMP JUMPDEST DUP3 MLOAD DUP6 MSTORE DUP12 SWAP8 POP DUP9 SWAP7 POP PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x136A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20616C6C6F636174696F6E2066756E647320746F6F206C6F77000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C6C6F636174696F6E20706572696F6420686173206E6F7420656E64656400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A4 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x5DF JUMPI PUSH2 0x155D SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16DC JUMP JUMPDEST SWAP1 PUSH2 0x1566 PUSH2 0x18DE JUMP JUMPDEST DUP2 MLOAD SWAP1 DUP2 GT PUSH2 0x162E JUMPI PUSH1 0x1 PUSH1 0x40 SHL DUP2 GT PUSH2 0x162E JUMPI PUSH1 0x9 SLOAD DUP2 PUSH1 0x9 SSTORE DUP1 DUP3 LT PUSH2 0x1600 JUMPI JUMPDEST POP DUP4 DUP3 ADD PUSH1 0x9 DUP5 MSTORE DUP4 JUMPDEST DUP3 DUP2 LT PUSH2 0x15D7 JUMPI PUSH1 0x40 MLOAD DUP7 DUP2 MSTORE DUP6 SWAP1 PUSH32 0xBA55FCA14CA25313D8196ABBEE269381AD67BE27729F5073609A3EB9318391A SWAP1 DUP1 PUSH2 0x15D1 DUP2 DUP12 ADD DUP10 PUSH2 0x1C67 JUMP JUMPDEST SUB SWAP1 LOG1 DUP1 RETURN JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1EC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 ADD SSTORE SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1593 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1EC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP3 ADD SWAP2 ADD JUMPDEST DUP2 DUP2 LT PUSH2 0x1623 JUMPI POP PUSH2 0x1589 JUMP JUMPDEST DUP5 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1616 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x165D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x165D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x165D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x165D JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC1A JUMPI JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xC1A JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x16F3 DUP4 PUSH2 0x16AF JUMP JUMPDEST SWAP3 PUSH2 0x1701 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xC1A JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x172B JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xC1A JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x171D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x165D JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xC1A JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x177C DUP3 PUSH2 0x174A JUMP JUMPDEST SWAP3 PUSH2 0x178A PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0xC1A JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x8 PUSH1 0x0 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0xC1A JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xC1A JUMPI PUSH2 0x1823 SWAP2 PUSH1 0x4 ADD PUSH2 0x1765 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xC1A JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x7 DUP3 LT ISZERO PUSH2 0x8DD JUMPI MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1854 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x18B0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x75FD2B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD ISZERO PUSH2 0x18CC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF68FE63 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x18F2 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC1A JUMPI JUMP JUMPDEST SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND SWAP2 DUP2 DUP2 AND DUP1 DUP5 LT ISZERO PUSH2 0x1AA0 JUMPI DUP3 DUP7 AND SWAP1 DUP4 DUP7 AND DUP3 LT ISZERO PUSH2 0x1A5B JUMPI GT PUSH2 0x19FF JUMPI PUSH32 0x5BE4D64080F489B6FEF34A2D8AC3084C5735E83B3789AABC4E6AEAB193E7967F SWAP5 DUP4 PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 PUSH1 0x80 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC0 SHL SWAP1 PUSH1 0xC0 SHL AND SWAP4 PUSH1 0x40 SHL AND OR SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 SHL SWAP1 DUP7 SHL AND OR OR SWAP1 DUP2 PUSH1 0xA SSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE DUP1 DUP3 PUSH1 0x40 SHR AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 DUP5 SHR AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xC0 SHR PUSH1 0x60 DUP3 ADD MSTORE LOG1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526567697374726174696F6E206D75737420656E64206265666F726520616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F636174696F6E20737461727473 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420616C6C6F636174696F6E2074696D65730000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420726567697374726174696F6E2074696D6573000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x7 DUP2 LT ISZERO PUSH2 0x8DD JUMPI PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x4 SLOAD EQ PUSH2 0x1B0E JUMPI PUSH1 0x2 PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1854 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1B69 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526563697069656E74206E6F7420726567697374657265640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xC1A JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0xC1A JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x44 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x29E40D4B PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C5B JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1C2D JUMPI JUMPDEST POP ISZERO PUSH2 0x18B0 JUMPI JUMP JUMPDEST PUSH2 0x1C4E SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1C54 JUMPI JUMPDEST PUSH2 0x1C46 DUP2 DUP4 PUSH2 0x168E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1BAE JUMP JUMPDEST CODESIZE PUSH2 0x1C25 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1C3C JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1C87 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1C79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP1 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP3 MSTORE SWAP3 PUSH1 0x80 DUP3 ADD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT DUP4 DUP6 LT OR PUSH2 0x165D JUMPI PUSH2 0x1D5F SWAP5 PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP7 PUSH1 0x40 MSTORE AND SWAP4 PUSH2 0x1D03 DUP7 PUSH2 0x1673 JUMP JUMPDEST DUP8 DUP7 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 PUSH1 0xA0 DUP3 ADD MSTORE MLOAD SWAP1 DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x1DE7 JUMPI RETURNDATASIZE SWAP2 PUSH2 0x1D43 DUP4 PUSH2 0x174A JUMP JUMPDEST SWAP3 PUSH2 0x1D51 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x168E JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE PUSH1 0x0 DUP8 DUP6 ADD RETURNDATACOPY PUSH2 0x1DEB JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP3 DUP3 ISZERO SWAP3 DUP4 ISZERO PUSH2 0x1DCF JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x1D78 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x1DDF SWAP4 POP DUP3 ADD DUP2 ADD SWAP2 ADD PUSH2 0x1BAE JUMP JUMPDEST CODESIZE DUP3 DUP2 PUSH2 0x1D6D JUMP JUMPDEST PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x1E4D JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x1DFF JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x1E08 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1E60 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP2 PUSH1 0x20 DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x1EA6 JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH2 0x1E83 JUMP INVALID PUSH15 0x1540171B6C0C960B71A7020D9F6007 PUSH32 0x6AF931A8BBF590DA0223DACF75C7AFA264697066735822122090D57829FE2272 SIGNEXTEND PUSH6 0x9EBC0FF14EC3 SWAP16 0xBE PUSH2 0x326E 0xB2 PC MSTORE MSTORE8 MSTORE8 CREATE2 DUP5 0x4A EXTCODECOPY CALL DUP13 DUP12 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "825:13038:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5279:71;825:13038;5279:71;;;825:13038;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;959:19;825:13038;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;;;;-1:-1:-1;;825:13038:16;;;;5630:64:7;;:::i;:::-;8942:21;825:13038:16;;8942:21:7;825:13038:16;8942:21:7;:::i;:::-;;825:13038:16;;;;;;;;;;-1:-1:-1;;825:13038:16;;;;;;:::i;:::-;1063:62:8;;:::i;:::-;-1:-1:-1;;;;;825:13038:16;;;;2162:22:8;;825:13038:16;;;;;;;;;;;;;;2566:40:8;825:13038:16;2566:40:8;;825:13038:16;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;:::i;:::-;5630:64:7;;;;:::i;:::-;6495:78;;:::i;:::-;13444:19:16;825:13038;;-1:-1:-1;;;;;825:13038:16;;;;;;13425:15;:38;;:94;;;;825:13038;;;;;5976:7:7;;;:::i;:::-;825:13038:16;;6337:54;;;;;825:13038;6337:54;;;;825:13038;;;;;6337:54;;;825:13038;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6422:43;825:13038;;6572:13;6618:3;825:13038;;6587:29;;;;;-1:-1:-1;;;;;825:13038:16;6664:21;;;;:::i;:::-;825:13038;;;;;6699:142;6724:10;825:13038;;;;;;;;;6724:59;;6699:142;:::i;:::-;825:13038;;;;;6880:35;825:13038;;;;;;6880:35;825:13038;;;;;;;;6880:54;825:13038;;6618:3;;;:::i;:::-;6572:13;;825:13038;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;6587:29;;;;7071:26;7112:13;7158:3;825:13038;;7127:29;;;;;7158:3;;-1:-1:-1;;;;;7204:21:16;825:13038;7204:21;;:::i;:::-;825:13038;;7393:127;7256:10;825:13038;7349:24;7256:10;;;;:::i;:::-;825:13038;;;;6724:10;825:13038;;;;;;;;;;7281:44;:54;825:13038;;;7281:54;:::i;:::-;825:13038;;7349:24;:::i;:::-;825:13038;;;;;;;;;7462:44;825:13038;;;;;;7393:127;7158:3;:::i;:::-;7112:13;;7127:29;;;;;7549:18;;825:13038;;;;;7606:101;825:13038;;;;;;;;;;;7606:101;825:13038;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;13425:94;825:13038;;;;13425:15;13483:36;;13425:94;;;825:13038;;;;;;;-1:-1:-1;;825:13038:16;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;:::i;:::-;5630:64:7;;;:::i;:::-;825:13038:16;;8424:45:7;;8556:12;;8552:34;;825:13038:16;;;;;;3223:51;;825:13038;;;;3223:51;825:13038;;3424:18;3223:51;;825:13038;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;3424:18;;:::i;:::-;825:13038;;;;;;8552:34:7;825:13038:16;;-1:-1:-1;;;8577:9:7;;825:13038:16;;8577:9:7;8424:45;825:13038:16;;-1:-1:-1;;;8448:21:7;;825:13038:16;;8448:21:7;825:13038:16;;;;;;;-1:-1:-1;;825:13038:16;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;:::i;:::-;;;;1105:47;825:13038;;;;;;;1105:47;825:13038;1105:47;825:13038;1105:47;;825:13038;1105:47;;825:13038;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;825:13038:16;;;;;;;;10148:31;;825:13038;;-1:-1:-1;;;;;825:13038:16;;:::i;:::-;;;;10148:10;825:13038;;;10148:31;825:13038;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;1308:33:16;825:13038;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1347:33:16;825:13038;;;;;;;;;;;;;;;;;-1:-1:-1;;825:13038:16;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;12323:10;825:13038;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;12323:10;825:13038;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;825:13038:16;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11722:31:7;;11718:60;;825:13038:16;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;825:13038:16;;;:::i;:::-;;;;;;;;;11873:9:7;;;11884:19;;;;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;11873:9:7;825:13038:16;;;-1:-1:-1;;;;;11944:16:7;;;;:::i;:::-;825:13038:16;;11962:8:7;;;;;:::i;:::-;;825:13038:16;;;;;;;:::i;:::-;;;;;;;;;9748:10;825:13038;;;;;;;;9748:40;825:13038;;;;;;;:::i;:::-;;;9660:143;;;825:13038;11920:51:7;;;;:::i;:::-;;;;;;:::i;:::-;;825:13038:16;11873:9:7;;;;;825:13038:16;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;11718:60:7;825:13038:16;;-1:-1:-1;;;11762:16:7;;825:13038:16;;11762:16:7;825:13038:16;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4445:42:5;825:13038:16;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1267:35:16;825:13038;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;1063:62:8;;:::i;:::-;12566:5:16;825:13038;;;-1:-1:-1;;;12566:30:16;;12590:4;825:13038;12566:30;;825:13038;-1:-1:-1;;;;;825:13038:16;;;12566:30;825:13038;;;;12566:30;;;;;;;;;;;825:13038;12610:20;;12606:96;;825:13038;;;12606:96;12674:16;825:13038;;;;12674:16;;:::i;:::-;12606:96;;;825:13038;;;12566:30;;;;;;;;;;;;;;;;;;:::i;:::-;;;825:13038;;;;;12566:30;;;;825:13038;;;;12566:30;;;-1:-1:-1;12566:30:16;;;825:13038;;;;;;;;;;;;;;;;;;;;;;1063:62:8;;:::i;:::-;825:13038:16;;;-1:-1:-1;;;;;;825:13038:16;;;;;;;-1:-1:-1;;;;;825:13038:16;2566:40:8;825:13038:16;;2566:40:8;825:13038:16;;;;;;;;;-1:-1:-1;;825:13038:16;;;;;;;1158:30;825:13038;1158:30;;;;;825:13038;1158:30;;;:::i;:::-;825:13038;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;-1:-1:-1;;825:13038:16;;;;;;:::i;:::-;;;;;12916:4;825:13038;;;;;;;;;;;;;;;;;7417:10:7;825:13038:16;;;;;;;;;;;;;;;;;;;;;1386:31;825:13038;;;;;;;;;;;;;;;;;;;;;;;;;7218:10:7;825:13038:16;;;;;;;;;;;;;;;;;7032:6:7;825:13038:16;;;;;;;;;;;;;;;;;;;;;11991:13;825:13038;;;;;;;;;;;;;;-1:-1:-1;;825:13038:16;;;;;;:::i;:::-;;;;;;;;;;10677:53;1063:62:8;;;:::i;:::-;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;10472:131;;825:13038;10493:60;;10472:131;:::i;:::-;825:13038;;;;;;10613:49;825:13038;10613:36;825:13038;;;10613:36;:49;:::i;:::-;825:13038;;;;;;:::i;:::-;10677:53;825:13038;;;;;;;:::i;:::-;5630:64:7;;;:::i;:::-;6495:78;;:::i;:::-;13113:21:16;825:13038;-1:-1:-1;;;;;825:13038:16;;;13094:15;:40;;:98;;;;825:13038;;;;;;2227:103:9;;:::i;:::-;825:13038:16;;;;5279:71;;825:13038;;;;5279:71;;;;;825:13038;;;;;;;;;;;;;;;;;;;;;;;5382:10;825:13038;;;;;;;;;;;;;;;:::i;:::-;;;;5537:153;;;825:13038;;;;5537:153;;825:13038;;;;;;;5382:10;825:13038;;;;;;;;;;;;;;;;;;;;;;;;;5382:10;825:13038;;;;;;;;;;;:::i;:::-;5700:13;825:13038;;-1:-1:-1;;;825:13038:16;;;;;;;;5752:56;825:13038;;;;;;;5700:13;825:13038;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;5752:56;825:13038;5823:56;825:13038;;;;;;5823:56;825:13038;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;13094:98;825:13038;;;13094:15;13154:38;;;-1:-1:-1;13094:98:16;;;;825:13038;;;;;;;-1:-1:-1;;825:13038:16;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11754:18;1063:62:8;;;:::i;:::-;11754:18:16;:::i;825:13038::-;;;;;;;;;;;;;928:25;825:13038;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;6860:4:7;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;-1:-1:-1;;825:13038:16;;;;;;1194:38;825:13038;1194:38;;;;;;825:13038;;-1:-1:-1;;;;;;;;;;;825:13038:16;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;-1:-1:-1;;825:13038:16;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;825:13038:16;;;;;;5630:64:7;;:::i;:::-;6495:78;;:::i;:::-;13769:17:16;825:13038;;;13751:15;:35;825:13038;;;5976:7:7;2227:103:9;;;:::i;:::-;5976:7:7;:::i;:::-;825:13038:16;;;;8321:28;;825:13038;;;;;8321:28;825:13038;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;8471:27;;;8554:3;825:13038;;8528:24;;;;;8554:3;;8648:33;;-1:-1:-1;;;;;8601:16:16;;;;:::i;:::-;825:13038;;;;8590:10;825:13038;;;;;;8590:44;825:13038;8573:61;;;;:::i;:::-;825:13038;8667:14;;;;:::i;:::-;825:13038;8648:33;;:::i;:::-;8554:3;;:::i;:::-;8513:13;;;8528:24;;;;825:13038;8709:10;825:13038;8709:29;825:13038;;8870:5;825:13038;8897:8;825:13038;8908:15;;825:13038;;-1:-1:-1;;;;;825:13038:16;;;;;8908:15;:::i;:::-;8897:8;825:13038;;;8870:5;825:13038;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;8982:185;;;;;825:13038;;-1:-1:-1;;;8982:185:16;;825:13038;8982:185;;825:13038;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9136:21;825:13038;;;;;;;9136:21;825:13038;;-1:-1:-1;;;;;;;;;;;825:13038:16;;;;;;;;8982:185;;;;;;;;;;;;;;;;;825:13038;;9183:52;825:13038;;;;;;;;;;;;;;;;:::i;:::-;;;;;;9183:52;;;825:13038;;;;;8982:185;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;9183:52;8982:185;;825:13038;-1:-1:-1;;;825:13038:16;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;-1:-1:-1;825:13038:16;;-1:-1:-1;825:13038:16;;;;;;;;;;;;;;;;;;;;-1:-1:-1;825:13038:16;;-1:-1:-1;825:13038:16;;;;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;:::i;:::-;1063:62:8;;;:::i;:::-;825:13038:16;;;;;;;-1:-1:-1;;;825:13038:16;;;;10980:49;825:13038;;10980:49;825:13038;;;;;;;;;;;10980:49;825:13038;;;;;;;;;;;;;;;;11044:55;;825:13038;;;;;;;:::i;:::-;11044:55;;;825:13038;;;;;-1:-1:-1;;;;;825:13038:16;-1:-1:-1;;;;;;;;;;;825:13038:16;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;:::o;:::-;-1:-1:-1;;;;;825:13038:16;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;825:13038:16;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;-1:-1:-1;;825:13038:16;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;825:13038:16;;;;;;;;;;;;;;:::o;:::-;5700:13;825:13038;;;;;;5700:13;-1:-1:-1;825:13038:16;;;;-1:-1:-1;825:13038:16;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;;825:13038:16;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;12814:111:7:-;12890:4;-1:-1:-1;;;;;825:13038:16;12868:10:7;:27;12864:54;;12814:111::o;12864:54::-;825:13038:16;;-1:-1:-1;;;12904:14:7;;;;;13771:105;13832:6;825:13038:16;13832:11:7;13828:41;;13771:105::o;13828:41::-;825:13038:16;;-1:-1:-1;;;13852:17:7;;;;;1359:130:8;1273:6;825:13038:16;-1:-1:-1;;;;;825:13038:16;719:10:14;1422:23:8;825:13038:16;;1359:130:8:o;825:13038:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;:::o;3757:982::-;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;3982:45;;;825:13038;;;;;;;;;;4110:41;;825:13038;;;4232:44;825:13038;;4573:159;825:13038;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;4359:46;825:13038;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4573:159;3757:982::o;825:13038::-;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2336:287:9:-;1759:1;2468:7;825:13038:16;2468:19:9;1759:1;;;2468:7;825:13038:16;2336:287:9:o;1759:1::-;825:13038:16;;-1:-1:-1;;;1759:1:9;;;2468:7;1759:1;;;;;;;825:13038:16;1759:1:9;825:13038:16;;;1759:1:9;;;;825:13038:16;-1:-1:-1;;825:13038:16;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;13122:142:7:-;13199:35;825:13038:16;;;;;;;;;;;;13199:35:7;;;;;825:13038:16;;;;;;;;;;;;;13199:4:7;825:13038:16;13199:35:7;;;;;;;-1:-1:-1;13199:35:7;;;13122:142;13198:36;;13194:63;;13122:142::o;13199:35::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;825:13038:16;;;-1:-1:-1;825:13038:16;;;;;;;;;;;;;;;;;;;;-1:-1:-1;825:13038:16;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;;;;;;;;941:175:12;825:13038:16;;-1:-1:-1;;;1050:58:12;;;;;;;-1:-1:-1;;;;;825:13038:16;;;1050:58:12;;;825:13038:16;;;;;;;;;1050:58:12;;;;825:13038:16;;;;-1:-1:-1;;;;;825:13038:16;;;;;;;;5535:69:13;825:13038:16;-1:-1:-1;825:13038:16;;;;;;;;;;;:::i;:::-;;;;;;;;;5487:31:13;;;;;;825:13038:16;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;825:13038:16;;;;5535:69:13;:::i;:::-;825:13038:16;;5728:22:12;;;;:56;;;;;825:13038:16;;;;;;;941:175:12;:::o;825:13038:16:-;;;;;;;;;;;;;;;;1050:58:12;825:13038:16;;;;;;;;-1:-1:-1;;;825:13038:16;;;;;5728:56:12;5754:30;;-1:-1:-1;5754:30:12;;;;;;;:::i;:::-;5728:56;;;;;825:13038:16;;;7671:628:13;;;;7875:418;;;825:13038:16;;;7906:22:13;7902:286;;8201:17;;:::o;7902:286::-;1702:19;:23;825:13038:16;;8201:17:13;:::o;825:13038:16:-;;;-1:-1:-1;;;825:13038:16;;;;;;;;;;;;;;;;;;;;7875:418:13;825:13038:16;;;;-1:-1:-1;8980:21:13;:17;;9152:142;;;;;;;8976:379;825:13038:16;;;;;;9324:20:13;;825:13038:16;;9324:20:13;;;;825:13038:16;;;;;;;;;9000:1:13;825:13038:16;;;;;;;;;;;;9000:1:13;825:13038:16;;;;;;;;;;;;;;9324:20:13;;;;825:13038:16;;;;;;;;;;;;;;;;;;;-1:-1:-1;825:13038:16;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1591400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"NATIVE()": "570",
								"allocate(bytes,address)": "infinite",
								"allocationEndTime()": "2503",
								"allocationStartTime()": "2763",
								"distribute(address[],bytes,address)": "infinite",
								"getAllo()": "infinite",
								"getPayouts(address[],bytes[])": "infinite",
								"getPoolAmount()": "2519",
								"getPoolId()": "2453",
								"getRecipientDetails(address)": "infinite",
								"getRecipientStatus(address)": "3042",
								"getStrategyId()": "infinite",
								"getTotalRecipients()": "2431",
								"increasePoolAmount(uint256)": "infinite",
								"initialize(uint256,bytes)": "infinite",
								"isPoolActive()": "2773",
								"isValidAllocator(address)": "513",
								"owner()": "2653",
								"recipientList(uint256)": "6906",
								"recipients(address)": "7330",
								"registerRecipient(bytes,address)": "infinite",
								"registrationEndTime()": "2807",
								"registrationStartTime()": "2669",
								"renounceOwnership()": "28393",
								"sndrCore()": "2367",
								"token()": "2956",
								"transferOwnership(address)": "28790",
								"updatePoolTimestamps(uint64,uint64,uint64,uint64)": "26804",
								"updateRecipientStatus(address,uint8)": "30617",
								"updateWhitelistedCollectors(address[])": "infinite",
								"whitelistedCollectors(uint256)": "infinite",
								"withdrawRemainingTokens()": "infinite"
							},
							"internal": {
								"_allocate(bytes memory,address)": "infinite",
								"_distribute(address[] memory,bytes memory,address)": "infinite",
								"_getPayout(address,bytes memory)": "infinite",
								"_getRecipientStatus(address)": "infinite",
								"_isValidAllocator(address)": "infinite",
								"_registerRecipient(bytes memory,address)": "infinite",
								"_updatePoolTimestamps(uint64,uint64,uint64,uint64)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "C0"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "CALLVALUE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSHSIZE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SUB",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 825,
									"end": 13863,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "60"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SUB",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SLT",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "8"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "2"
								},
								{
									"begin": 825,
									"end": 13863,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "8"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "20"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "9"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "10"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "2"
								},
								{
									"begin": 825,
									"end": 13863,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "10"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP7",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "2"
								},
								{
									"begin": 825,
									"end": 13863,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "9"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "11"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "C"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "534E44525374726174656779"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 5268,
									"end": 5287,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 5268,
									"end": 5287,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "SWAP5",
									"source": 7
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP4",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "13"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "14"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "DUP8",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "16"
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 5320,
									"end": 5337,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "tag",
									"source": 7,
									"value": "16"
								},
								{
									"begin": 5320,
									"end": 5337,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 5310,
									"end": 5338,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 5310,
									"end": 5338,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "A0"
								},
								{
									"begin": 5297,
									"end": 5338,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "PUSH",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 14
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP6",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "PUSH",
									"source": 8,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "LOG3",
									"source": 8
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 2624,
									"end": 2655,
									"name": "PUSH",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 2624,
									"end": 2655,
									"name": "PUSH",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 2665,
									"end": 2687,
									"name": "PUSH",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 2665,
									"end": 2687,
									"name": "PUSH",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 5268,
									"end": 5287,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "1026"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "A0"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "1028"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "RETURN",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "14"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "13"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "11"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B71"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "E0"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "41"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "11"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "tag",
									"source": 16,
									"value": "2"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "SUB",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 825,
									"end": 13863,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 825,
									"end": 13863,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122090d57829fe22720b659ebc0ff14ec39fbe61326eb258525353f5844a3cf18c8b64736f6c63430008130033",
									".code": [
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "28"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "28"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "912917"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "30"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "A6F0EE9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "32"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "14F20EF9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "34"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "15CC481E"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "36"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "19220DBC"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "38"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "2143E92F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "2BBE0CAE"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "2CB5B5ED"
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "2D30E6BF"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "46"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "38FFF2D0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "48"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "42FDA9C7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "50"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4533D678"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "52"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4AB4BA42"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "54"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4D31D087"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "56"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "6D40F85B"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "58"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "715018A6"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "8AFBF669"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "62"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "8DA5CB5B"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "9AF5C09D"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "66"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "A0CF0AEA"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "B2B878D0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "70"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "B9BD12E4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "72"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "D2E17F59"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "74"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "DF868ED3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "DFF7D2C7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "78"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "EB11AF93"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "EB820312"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "82"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "EDD146CC"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "EF2920FC"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "86"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "F2FDE38B"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "88"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "F5B0DFB7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "90"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FC0C546A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "92"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "92"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 959,
											"end": 978,
											"name": "PUSH",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "90"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 5630,
											"end": 5694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "tag",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 8963,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 8942,
											"end": 8963,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 8942,
											"end": 8963,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 8942,
											"end": 8963,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 8963,
											"name": "tag",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 8942,
											"end": 8963,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 8963,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "88"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "108"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "108"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2162,
											"end": 2184,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2162,
											"end": 2184,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "110"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "PUSH",
											"source": 8,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "LOG3",
											"source": 8
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "110"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "86"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "112"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "10"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "112"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 5630,
											"end": 5694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "tag",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "114"
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 6495,
											"end": 6573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "tag",
											"source": 7,
											"value": "114"
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13444,
											"end": 13463,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13440,
											"name": "TIMESTAMP",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13463,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13463,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13519,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13519,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13519,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "115"
										},
										{
											"begin": 13425,
											"end": 13519,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "116"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "117"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5976,
											"end": 5983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 5976,
											"end": 5983,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 5983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5976,
											"end": 5983,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 5983,
											"name": "tag",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 5976,
											"end": 5983,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6337,
											"end": 6391,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "133"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "133"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "126"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "126"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "127"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "127"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "128"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "130"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "131"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "133"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "137"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "137"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "138"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "138"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "139"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "142"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6422,
											"end": 6465,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6572,
											"end": 6585,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6618,
											"end": 6621,
											"name": "tag",
											"source": 16,
											"value": "146"
										},
										{
											"begin": 6618,
											"end": 6621,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "147"
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6664,
											"end": 6685,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "149"
										},
										{
											"begin": 6664,
											"end": 6685,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6664,
											"end": 6685,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6664,
											"end": 6685,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 6664,
											"end": 6685,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6664,
											"end": 6685,
											"name": "tag",
											"source": 16,
											"value": "149"
										},
										{
											"begin": 6664,
											"end": 6685,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6699,
											"end": 6841,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "150"
										},
										{
											"begin": 6724,
											"end": 6734,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 6724,
											"end": 6783,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6724,
											"end": 6783,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6699,
											"end": 6841,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 6699,
											"end": 6841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6699,
											"end": 6841,
											"name": "tag",
											"source": 16,
											"value": "150"
										},
										{
											"begin": 6699,
											"end": 6841,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6880,
											"end": 6915,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 6880,
											"end": 6915,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "151"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6880,
											"end": 6934,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "153"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6618,
											"end": 6621,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "155"
										},
										{
											"begin": 6618,
											"end": 6621,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6618,
											"end": 6621,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 6618,
											"end": 6621,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6618,
											"end": 6621,
											"name": "tag",
											"source": 16,
											"value": "155"
										},
										{
											"begin": 6618,
											"end": 6621,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6572,
											"end": 6585,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "146"
										},
										{
											"begin": 6572,
											"end": 6585,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "153"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "16"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "149958DA5C1A595B9D081B9BDD081858D8D95C1D1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "52"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "151"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "tag",
											"source": 16,
											"value": "147"
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6587,
											"end": 6616,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 7071,
											"end": 7097,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 7112,
											"end": 7125,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 7158,
											"end": 7161,
											"name": "tag",
											"source": 16,
											"value": "156"
										},
										{
											"begin": 7158,
											"end": 7161,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "157"
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7158,
											"end": 7161,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "159"
										},
										{
											"begin": 7158,
											"end": 7161,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7204,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7204,
											"end": 7225,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 7204,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 7204,
											"end": 7225,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7204,
											"end": 7225,
											"name": "tag",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 7204,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 7393,
											"end": 7520,
											"name": "PUSH",
											"source": 16,
											"value": "183F2CE0B749ED46549CB16586AF0C501ABAB8D242CC4B2076AEC30D2DD9C4BC"
										},
										{
											"begin": 7256,
											"end": 7266,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7349,
											"end": 7373,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "161"
										},
										{
											"begin": 7256,
											"end": 7266,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "162"
										},
										{
											"begin": 7256,
											"end": 7266,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 7256,
											"end": 7266,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 7256,
											"end": 7266,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 7256,
											"end": 7266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7256,
											"end": 7266,
											"name": "tag",
											"source": 16,
											"value": "162"
										},
										{
											"begin": 7256,
											"end": 7266,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP14",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6724,
											"end": 6734,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP14",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 7281,
											"end": 7325,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7281,
											"end": 7335,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "163"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 7281,
											"end": 7335,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 7281,
											"end": 7335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7281,
											"end": 7335,
											"name": "tag",
											"source": 16,
											"value": "163"
										},
										{
											"begin": 7281,
											"end": 7335,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 7349,
											"end": 7373,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 7349,
											"end": 7373,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7349,
											"end": 7373,
											"name": "tag",
											"source": 16,
											"value": "161"
										},
										{
											"begin": 7349,
											"end": 7373,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP13",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 7462,
											"end": 7506,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7393,
											"end": 7520,
											"name": "LOG2",
											"source": 16
										},
										{
											"begin": 7158,
											"end": 7161,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 7158,
											"end": 7161,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7158,
											"end": 7161,
											"name": "tag",
											"source": 16,
											"value": "159"
										},
										{
											"begin": 7158,
											"end": 7161,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7112,
											"end": 7125,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "156"
										},
										{
											"begin": 7112,
											"end": 7125,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "tag",
											"source": 16,
											"value": "157"
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7127,
											"end": 7156,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7549,
											"end": 7567,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7549,
											"end": 7567,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "164"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7606,
											"end": 7707,
											"name": "PUSH",
											"source": 16,
											"value": "B41462B4BB729CF768173CEBA7CC740624558176F07A40AC23A5F8FCDB6C4ABD"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7606,
											"end": 7707,
											"name": "LOG1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "164"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "139BC8199D5B991CC8185B1B1BD8D85D1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4D69736D61746368656420696E70757420617272617973000000000000000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "142"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "139"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "133"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "131"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "166"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "130"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "166"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "128"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "117"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "416C6C6F636174696F6E206973206E6F74206163746976650000000000000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13519,
											"name": "tag",
											"source": 16,
											"value": "115"
										},
										{
											"begin": 13425,
											"end": 13519,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13440,
											"name": "TIMESTAMP",
											"source": 16
										},
										{
											"begin": 13483,
											"end": 13519,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 13483,
											"end": 13519,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13519,
											"name": "CODESIZE",
											"source": 16
										},
										{
											"begin": 13425,
											"end": 13519,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "116"
										},
										{
											"begin": 13425,
											"end": 13519,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "174"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "174"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 5630,
											"end": 5694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "tag",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 8424,
											"end": 8469,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 8424,
											"end": 8469,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8556,
											"end": 8568,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8556,
											"end": 8568,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8552,
											"end": 8586,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "178"
										},
										{
											"begin": 8552,
											"end": 8586,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 3223,
											"end": 3274,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3223,
											"end": 3274,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3223,
											"end": 3274,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "182"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3424,
											"end": 3442,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "183"
										},
										{
											"begin": 3223,
											"end": 3274,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 3223,
											"end": 3274,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "182"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "184"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "184"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "186"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "186"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3424,
											"end": 3442,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3424,
											"end": 3442,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 3424,
											"end": 3442,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3424,
											"end": 3442,
											"name": "tag",
											"source": 16,
											"value": "183"
										},
										{
											"begin": 3424,
											"end": 3442,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 8552,
											"end": 8586,
											"name": "tag",
											"source": 7,
											"value": "178"
										},
										{
											"begin": 8552,
											"end": 8586,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7FCCE2A9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8577,
											"end": 8586,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8577,
											"end": 8586,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8577,
											"end": 8586,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8424,
											"end": 8469,
											"name": "tag",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 8424,
											"end": 8469,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "439A74C9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8448,
											"end": 8469,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8448,
											"end": 8469,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8448,
											"end": 8469,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "82"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "191"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "192"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "192"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1105,
											"end": 1152,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1105,
											"end": 1152,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 1105,
											"end": 1152,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 1105,
											"end": 1152,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1105,
											"end": 1152,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 1105,
											"end": 1152,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1105,
											"end": 1152,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "191"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 10148,
											"end": 10179,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 10148,
											"end": 10179,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "197"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "197"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10148,
											"end": 10158,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 10148,
											"end": 10179,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "191"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "78"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1308,
											"end": 1341,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "74"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1347,
											"end": 1380,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "72"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "215"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "215"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "216"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "216"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12323,
											"end": 12333,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "217"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "217"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12323,
											"end": 12333,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "218"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "191"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "218"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "70"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "227"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "227"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "23"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "232"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "232"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "233"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "233"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "128"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "236"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "237"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 11722,
											"end": 11753,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11722,
											"end": 11753,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11718,
											"end": 11778,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "239"
										},
										{
											"begin": 11718,
											"end": 11778,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "241"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "241"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "242"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "242"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "243"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "243"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "244"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "245"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 11884,
											"end": 11903,
											"name": "tag",
											"source": 7,
											"value": "247"
										},
										{
											"begin": 11884,
											"end": 11903,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11884,
											"end": 11903,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11884,
											"end": 11903,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11884,
											"end": 11903,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 11884,
											"end": 11903,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "248"
										},
										{
											"begin": 11884,
											"end": 11903,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "250"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "251"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "251"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "250"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "tag",
											"source": 7,
											"value": "248"
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11944,
											"end": 11960,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "253"
										},
										{
											"begin": 11944,
											"end": 11960,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11944,
											"end": 11960,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11944,
											"end": 11960,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 11944,
											"end": 11960,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11944,
											"end": 11960,
											"name": "tag",
											"source": 7,
											"value": "253"
										},
										{
											"begin": 11944,
											"end": 11960,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 11962,
											"end": 11970,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11962,
											"end": 11970,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "254"
										},
										{
											"begin": 11962,
											"end": 11970,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11962,
											"end": 11970,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 11962,
											"end": 11970,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 11962,
											"end": 11970,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11962,
											"end": 11970,
											"name": "tag",
											"source": 7,
											"value": "254"
										},
										{
											"begin": 11962,
											"end": 11970,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11962,
											"end": 11970,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "255"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "255"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9748,
											"end": 9758,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 9748,
											"end": 9788,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "256"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "256"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9660,
											"end": 9803,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 9660,
											"end": 9803,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9660,
											"end": 9803,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 11920,
											"end": 11971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "tag",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "258"
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 11920,
											"end": 11971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "tag",
											"source": 7,
											"value": "258"
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11920,
											"end": 11971,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "247"
										},
										{
											"begin": 11873,
											"end": 11882,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "245"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "259"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "259"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "244"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 11718,
											"end": 11778,
											"name": "tag",
											"source": 7,
											"value": "239"
										},
										{
											"begin": 11718,
											"end": 11778,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3DA4C02B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11762,
											"end": 11778,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11762,
											"end": 11778,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 11762,
											"end": 11778,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "237"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "260"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "262"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "262"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "236"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "260"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 4445,
											"end": 4487,
											"name": "PUSH",
											"source": 5,
											"value": "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "66"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1267,
											"end": 1302,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "62"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12566,
											"end": 12571,
											"name": "PUSH",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12590,
											"end": 12594,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "STATICCALL",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "280"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "282"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "283"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12610,
											"end": 12630,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 12610,
											"end": 12630,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 12606,
											"end": 12702,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "284"
										},
										{
											"begin": 12606,
											"end": 12702,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 12606,
											"end": 12702,
											"name": "tag",
											"source": 16,
											"value": "284"
										},
										{
											"begin": 12606,
											"end": 12702,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12674,
											"end": 12690,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "286"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 12674,
											"end": 12690,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12674,
											"end": 12690,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 12674,
											"end": 12690,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 12674,
											"end": 12690,
											"name": "tag",
											"source": 16,
											"value": "286"
										},
										{
											"begin": 12674,
											"end": 12690,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12606,
											"end": 12702,
											"name": "CODESIZE",
											"source": 16
										},
										{
											"begin": 12606,
											"end": 12702,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 12606,
											"end": 12702,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "tag",
											"source": 16,
											"value": "282"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "287"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "tag",
											"source": 16,
											"value": "288"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "289"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 12566,
											"end": 12596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "tag",
											"source": 16,
											"value": "289"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "CODESIZE",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "283"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "tag",
											"source": 16,
											"value": "287"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "288"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "tag",
											"source": 16,
											"value": "280"
										},
										{
											"begin": 12566,
											"end": 12596,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "PUSH",
											"source": 8,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "LOG3",
											"source": 8
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "58"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "PUSH",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "303"
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 1158,
											"end": 1188,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "tag",
											"source": 16,
											"value": "303"
										},
										{
											"begin": 1158,
											"end": 1188,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "56"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "308"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "308"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 12916,
											"end": 12920,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "54"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 7417,
											"end": 7427,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "52"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1417,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "50"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7218,
											"end": 7228,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1028"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "48"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 7032,
											"end": 7038,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "46"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 11991,
											"end": 12004,
											"name": "PUSH",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "333"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "333"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 10677,
											"end": 10730,
											"name": "PUSH",
											"source": 16,
											"value": "256C90EEEC0565314AFB6BDF67C3A909A88BD142E40D03C91A1F68E2A6BC35DB"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 10472,
											"end": 10603,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "337"
										},
										{
											"begin": 10472,
											"end": 10603,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 10493,
											"end": 10553,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 10493,
											"end": 10553,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 10472,
											"end": 10603,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 10472,
											"end": 10603,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 10472,
											"end": 10603,
											"name": "tag",
											"source": 16,
											"value": "337"
										},
										{
											"begin": 10472,
											"end": 10603,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10613,
											"end": 10662,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "338"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 10613,
											"end": 10649,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 10613,
											"end": 10649,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10613,
											"end": 10662,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "19"
										},
										{
											"begin": 10613,
											"end": 10662,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 10613,
											"end": 10662,
											"name": "tag",
											"source": 16,
											"value": "338"
										},
										{
											"begin": 10613,
											"end": 10662,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "339"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "339"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 10677,
											"end": 10730,
											"name": "LOG2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "340"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "10"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "340"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "341"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 5630,
											"end": 5694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "tag",
											"source": 7,
											"value": "341"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "342"
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 6495,
											"end": 6573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "tag",
											"source": 7,
											"value": "342"
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13113,
											"end": 13134,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13109,
											"name": "TIMESTAMP",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13134,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13134,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "343"
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "344"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "345"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "347"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 9,
											"value": "347"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5279,
											"end": 5350,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5382,
											"end": 5392,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "352"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "354"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "354"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5537,
											"end": 5690,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 5537,
											"end": 5690,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5537,
											"end": 5690,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5537,
											"end": 5690,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5537,
											"end": 5690,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5382,
											"end": 5392,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5382,
											"end": 5392,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "355"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "357"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "19"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "357"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5700,
											"end": 5713,
											"name": "PUSH",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "358"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 5752,
											"end": 5808,
											"name": "PUSH",
											"source": 16,
											"value": "695E999BE8100BDB5BEE8612337296508D527EAE78C65B8F170EACB5A3B439D"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "360"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5700,
											"end": 5713,
											"name": "PUSH",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "360"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5752,
											"end": 5808,
											"name": "LOG2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5823,
											"end": 5879,
											"name": "PUSH",
											"source": 16,
											"value": "256C90EEEC0565314AFB6BDF67C3A909A88BD142E40D03C91A1F68E2A6BC35DB"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5823,
											"end": 5879,
											"name": "LOG2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "358"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "355"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "352"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1C"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "526563697069656E7420616C7265616479207265676973746572656400000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "345"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "526567697374726174696F6E206973206E6F7420616374697665000000000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "tag",
											"source": 16,
											"value": "343"
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13109,
											"name": "TIMESTAMP",
											"source": 16
										},
										{
											"begin": 13154,
											"end": 13192,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 13154,
											"end": 13192,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 13154,
											"end": 13192,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "CODESIZE",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "344"
										},
										{
											"begin": 13094,
											"end": 13192,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 11754,
											"end": 11772,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "183"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11754,
											"end": 11772,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 11754,
											"end": 11772,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "38"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 928,
											"end": 953,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "36"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6860,
											"end": 6864,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1026"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "34"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 1194,
											"end": 1232,
											"name": "PUSH",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 1194,
											"end": 1232,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1194,
											"end": 1232,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 1194,
											"end": 1232,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1194,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 1194,
											"end": 1232,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1194,
											"end": 1232,
											"name": "PUSH",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "AEF723AAF2A9471D0444688035CD22EE9E9408F4D3390CE0A2A80B76AEAB390A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "32"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "395"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "395"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "398"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "398"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "133"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "401"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 5630,
											"end": 5694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "tag",
											"source": 7,
											"value": "401"
										},
										{
											"begin": 5630,
											"end": 5694,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "402"
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 6495,
											"end": 6573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "tag",
											"source": 7,
											"value": "402"
										},
										{
											"begin": 6495,
											"end": 6573,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13769,
											"end": 13786,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 13751,
											"end": 13766,
											"name": "TIMESTAMP",
											"source": 16
										},
										{
											"begin": 13751,
											"end": 13786,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "403"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5976,
											"end": 5983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "405"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "406"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 9,
											"value": "406"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5976,
											"end": 5983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5976,
											"end": 5983,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 5983,
											"name": "tag",
											"source": 7,
											"value": "405"
										},
										{
											"begin": 5976,
											"end": 5983,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 8321,
											"end": 8349,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 8321,
											"end": 8349,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8321,
											"end": 8349,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "409"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "409"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "410"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "410"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "411"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "411"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATACOPY",
											"source": 16
										},
										{
											"begin": 8471,
											"end": 8498,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8471,
											"end": 8498,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 8471,
											"end": 8498,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8554,
											"end": 8557,
											"name": "tag",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 8554,
											"end": 8557,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "413"
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8554,
											"end": 8557,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "416"
										},
										{
											"begin": 8554,
											"end": 8557,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8648,
											"end": 8681,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "415"
										},
										{
											"begin": 8648,
											"end": 8681,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8601,
											"end": 8617,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 8601,
											"end": 8617,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 8601,
											"end": 8617,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 8601,
											"end": 8617,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 8601,
											"end": 8617,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8601,
											"end": 8617,
											"name": "tag",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 8601,
											"end": 8617,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8590,
											"end": 8600,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 8590,
											"end": 8634,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 8573,
											"end": 8634,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "418"
										},
										{
											"begin": 8573,
											"end": 8634,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 8573,
											"end": 8634,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 8573,
											"end": 8634,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 8573,
											"end": 8634,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8573,
											"end": 8634,
											"name": "tag",
											"source": 16,
											"value": "418"
										},
										{
											"begin": 8573,
											"end": 8634,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8667,
											"end": 8681,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "419"
										},
										{
											"begin": 8667,
											"end": 8681,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 8667,
											"end": 8681,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 8667,
											"end": 8681,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 8667,
											"end": 8681,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8667,
											"end": 8681,
											"name": "tag",
											"source": 16,
											"value": "419"
										},
										{
											"begin": 8667,
											"end": 8681,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 8648,
											"end": 8681,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8648,
											"end": 8681,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 8648,
											"end": 8681,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8648,
											"end": 8681,
											"name": "tag",
											"source": 16,
											"value": "415"
										},
										{
											"begin": 8648,
											"end": 8681,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8554,
											"end": 8557,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 8554,
											"end": 8557,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 8554,
											"end": 8557,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8554,
											"end": 8557,
											"name": "tag",
											"source": 16,
											"value": "416"
										},
										{
											"begin": 8554,
											"end": 8557,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8513,
											"end": 8526,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 8513,
											"end": 8526,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 8513,
											"end": 8526,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "tag",
											"source": 16,
											"value": "413"
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 8528,
											"end": 8552,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8709,
											"end": 8719,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 8709,
											"end": 8738,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "420"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8870,
											"end": 8875,
											"name": "PUSH",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 8897,
											"end": 8905,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 8908,
											"end": 8923,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 8908,
											"end": 8923,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 8908,
											"end": 8923,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 8908,
											"end": 8923,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8908,
											"end": 8923,
											"name": "tag",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 8908,
											"end": 8923,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8897,
											"end": 8905,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 8870,
											"end": 8875,
											"name": "PUSH",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "EXTCODESIZE",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "166"
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8CD625"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "425"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "C4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "425"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "426"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "A4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9136,
											"end": 9157,
											"name": "PUSH",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9136,
											"end": 9157,
											"name": "PUSH",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "AEF723AAF2A9471D0444688035CD22EE9E9408F4D3390CE0A2A80B76AEAB390A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "429"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "430"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "280"
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "434"
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "435"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 9183,
											"end": 9235,
											"name": "PUSH",
											"source": 16,
											"value": "6215DF0421B8B71FFBC92898B478B5AD9520EC5034D7C686BBDC7AFDFAD068E8"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "436"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "436"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9183,
											"end": 9235,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 9183,
											"end": 9235,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9183,
											"end": 9235,
											"name": "LOG1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "tag",
											"source": 16,
											"value": "434"
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "437"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 9183,
											"end": 9235,
											"name": "PUSH",
											"source": 16,
											"value": "6215DF0421B8B71FFBC92898B478B5AD9520EC5034D7C686BBDC7AFDFAD068E8"
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "435"
										},
										{
											"begin": 8982,
											"end": 9167,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "437"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "430"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "429"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP8",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "426"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "420"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1D"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "506F6F6C20616C6C6F636174696F6E2066756E647320746F6F206C6F77000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "403"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "416C6C6F636174696F6E20706572696F6420686173206E6F7420656E64656400"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "30"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "445"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "445"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "446"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 8,
											"value": "446"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "449"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "449"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 10980,
											"end": 11029,
											"name": "PUSH",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 10980,
											"end": 11029,
											"name": "PUSH",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "451"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "452"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10980,
											"end": 11029,
											"name": "PUSH",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "453"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "454"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 11044,
											"end": 11099,
											"name": "PUSH",
											"source": 16,
											"value": "BA55FCA14CA25313D8196ABBEE269381AD67BE27729F5073609A3EB9318391A"
										},
										{
											"begin": 11044,
											"end": 11099,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "456"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "456"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 11044,
											"end": 11099,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 11044,
											"end": 11099,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 11044,
											"end": 11099,
											"name": "LOG1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "454"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "AEF723AAF2A9471D0444688035CD22EE9E9408F4D3390CE0A2A80B76AEAB390A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "453"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "451"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "AEF723AAF2A9471D0444688035CD22EE9E9408F4D3390CE0A2A80B76AEAB390A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "457"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "458"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "452"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "458"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "457"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "449"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "460"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "460"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "460"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "460"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "460"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "472"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "472"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "473"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "473"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "476"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "477"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "477"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "476"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "460"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "485"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "485"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "486"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "486"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATACOPY",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5700,
											"end": 5713,
											"name": "PUSH",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "489"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5700,
											"end": 5713,
											"name": "PUSH",
											"source": 16,
											"value": "8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "F3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "489"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "32"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "10"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "495"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "495"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "218"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "500"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "500"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "489"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 12814,
											"end": 12925,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 12814,
											"end": 12925,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12890,
											"end": 12894,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1026"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 12868,
											"end": 12878,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 12868,
											"end": 12895,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 12864,
											"end": 12918,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "504"
										},
										{
											"begin": 12864,
											"end": 12918,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12814,
											"end": 12925,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 12864,
											"end": 12918,
											"name": "tag",
											"source": 7,
											"value": "504"
										},
										{
											"begin": 12864,
											"end": 12918,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "75FD2B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12904,
											"end": 12918,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12904,
											"end": 12918,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12904,
											"end": 12918,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 12904,
											"end": 12918,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12904,
											"end": 12918,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 13771,
											"end": 13876,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 13771,
											"end": 13876,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13838,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 13832,
											"end": 13843,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 13828,
											"end": 13869,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "506"
										},
										{
											"begin": 13828,
											"end": 13869,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13771,
											"end": 13876,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 13828,
											"end": 13869,
											"name": "tag",
											"source": 7,
											"value": "506"
										},
										{
											"begin": 13828,
											"end": 13869,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F68FE63"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13852,
											"end": 13869,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13852,
											"end": 13869,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13852,
											"end": 13869,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 13852,
											"end": 13869,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13852,
											"end": 13869,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "508"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1359,
											"end": 1489,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "508"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3757,
											"end": 4739,
											"name": "tag",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 3757,
											"end": 4739,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3757,
											"end": 4739,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 3757,
											"end": 4739,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3757,
											"end": 4739,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3982,
											"end": 4027,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3982,
											"end": 4027,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3982,
											"end": 4027,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "512"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4110,
											"end": 4151,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4110,
											"end": 4151,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "514"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4232,
											"end": 4276,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "516"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4573,
											"end": 4732,
											"name": "PUSH",
											"source": 16,
											"value": "5BE4D64080F489B6FEF34A2D8AC3084C5735E83B3789AABC4E6AEAB193E7967F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF0000000000000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4359,
											"end": 4405,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4573,
											"end": 4732,
											"name": "LOG1",
											"source": 16
										},
										{
											"begin": 3757,
											"end": 4739,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "516"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "2E"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "526567697374726174696F6E206D75737420656E64206265666F726520616C6C"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F636174696F6E20737461727473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "514"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "496E76616C696420616C6C6F636174696F6E2074696D65730000000000000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "512"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1A"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "496E76616C696420726567697374726174696F6E2074696D6573000000000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "19"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "218"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "520"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 2336,
											"end": 2623,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "tag",
											"source": 9,
											"value": "520"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 9,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "500"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "524"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "524"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "526563697069656E74206E6F7420726567697374657265640000000000000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "23"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 13122,
											"end": 13264,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 13122,
											"end": 13264,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "29E40D4B"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 13199,
											"end": 13203,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1026"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "STATICCALL",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "530"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "532"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13122,
											"end": 13264,
											"name": "tag",
											"source": 7,
											"value": "533"
										},
										{
											"begin": 13122,
											"end": 13264,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13198,
											"end": 13234,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13198,
											"end": 13234,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 13194,
											"end": 13257,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "504"
										},
										{
											"begin": 13194,
											"end": 13257,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13122,
											"end": 13264,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "tag",
											"source": 7,
											"value": "532"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "536"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "537"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "tag",
											"source": 7,
											"value": "538"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "539"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 13199,
											"end": 13234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "tag",
											"source": 7,
											"value": "539"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 13199,
											"end": 13234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "tag",
											"source": 7,
											"value": "536"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "CODESIZE",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "533"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "tag",
											"source": 7,
											"value": "537"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "538"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "tag",
											"source": 7,
											"value": "530"
										},
										{
											"begin": 13199,
											"end": 13234,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "540"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "541"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "541"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "540"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 941,
											"end": 1116,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 941,
											"end": 1116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "460"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "545"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "546"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "546"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "547"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "549"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "549"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "550"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 825,
											"end": 13863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "550"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 5535,
											"end": 5604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "tag",
											"source": 13,
											"value": "545"
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5728,
											"end": 5750,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5750,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5750,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5750,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "552"
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "553"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "554"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 941,
											"end": 1116,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 941,
											"end": 1116,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "554"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "2A"
										},
										{
											"begin": 1050,
											"end": 1108,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "tag",
											"source": 12,
											"value": "552"
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "556"
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 5754,
											"end": 5784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "tag",
											"source": 12,
											"value": "556"
										},
										{
											"begin": 5754,
											"end": 5784,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "CODESIZE",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "553"
										},
										{
											"begin": 5728,
											"end": 5784,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "547"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "tag",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "557"
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7906,
											"end": 7928,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "559"
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8201,
											"end": 8218,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "tag",
											"source": 13,
											"value": "559"
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "561"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8201,
											"end": 8218,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "561"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1D"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "tag",
											"source": 13,
											"value": "557"
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8980,
											"end": 9001,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 8980,
											"end": 8997,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 8980,
											"end": 8997,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9152,
											"end": 9294,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9152,
											"end": 9294,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 9152,
											"end": 9294,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 9152,
											"end": 9294,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9152,
											"end": 9294,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 9152,
											"end": 9294,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9152,
											"end": 9294,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "tag",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9000,
											"end": 9001,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "565"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "566"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 9000,
											"end": 9001,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "tag",
											"source": 16,
											"value": "566"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "565"
										},
										{
											"begin": 825,
											"end": 13863,
											"name": "JUMP",
											"source": 16
										}
									],
									".data": {
										"AEF723AAF2A9471D0444688035CD22EE9E9408F4D3390CE0A2A80B76AEAB390A": "6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af"
									}
								}
							},
							"sourceList": [
								"lib/allo-v2/contracts/core/interfaces/IAllo.sol",
								"lib/allo-v2/contracts/core/interfaces/IRegistry.sol",
								"lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
								"lib/allo-v2/contracts/core/libraries/Errors.sol",
								"lib/allo-v2/contracts/core/libraries/Metadata.sol",
								"lib/allo-v2/contracts/core/libraries/Native.sol",
								"lib/allo-v2/contracts/core/libraries/Transfer.sol",
								"lib/allo-v2/contracts/strategies/BaseStrategy.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol",
								"src/SNDRStrategy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"NATIVE()": "a0cf0aea",
							"allocate(bytes,address)": "ef2920fc",
							"allocationEndTime()": "4533d678",
							"allocationStartTime()": "d2e17f59",
							"distribute(address[],bytes,address)": "0a6f0ee9",
							"getAllo()": "15cc481e",
							"getPayouts(address[],bytes[])": "b2b878d0",
							"getPoolAmount()": "4ab4ba42",
							"getPoolId()": "38fff2d0",
							"getRecipientDetails(address)": "b9bd12e4",
							"getRecipientStatus(address)": "eb11af93",
							"getStrategyId()": "42fda9c7",
							"getTotalRecipients()": "2d30e6bf",
							"increasePoolAmount(uint256)": "f5b0dfb7",
							"initialize(uint256,bytes)": "edd146cc",
							"isPoolActive()": "df868ed3",
							"isValidAllocator(address)": "4d31d087",
							"owner()": "8da5cb5b",
							"recipientList(uint256)": "6d40f85b",
							"recipients(address)": "eb820312",
							"registerRecipient(bytes,address)": "2bbe0cae",
							"registrationEndTime()": "dff7d2c7",
							"registrationStartTime()": "9af5c09d",
							"renounceOwnership()": "715018a6",
							"sndrCore()": "19220dbc",
							"token()": "fc0c546a",
							"transferOwnership(address)": "f2fde38b",
							"updatePoolTimestamps(uint64,uint64,uint64,uint64)": "2143e92f",
							"updateRecipientStatus(address,uint8)": "2cb5b5ed",
							"updateWhitelistedCollectors(address[])": "00912917",
							"whitelistedCollectors(uint256)": "14f20ef9",
							"withdrawRemainingTokens()": "8afbf669"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sndrCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ALLOCATION_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ENDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALREADY_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMOUNT_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ANCHOR_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ARRAY_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_METADATA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_REGISTRATION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IS_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NONCE_NOT_AVAILABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NON_ZERO_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ENOUGH_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_IMPLEMENTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_PENDING_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_INACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_ALREADY_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"}],\"name\":\"RECIPIENT_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_NOT_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REGISTRATION_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REGISTRATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAllocation\",\"type\":\"uint256\"}],\"name\":\"AllocationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAllocated\",\"type\":\"uint256\"}],\"name\":\"BatchAllocationCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipientIds\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAllocation\",\"type\":\"uint256\"}],\"name\":\"DistributionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"PoolActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAllocation\",\"type\":\"uint256\"}],\"name\":\"RecipientRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IStrategy.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"RecipientStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"registrationStartTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"registrationEndTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"allocationStartTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"allocationEndTime\",\"type\":\"uint64\"}],\"name\":\"TimestampsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newWhitelistedCollectors\",\"type\":\"address[]\"}],\"name\":\"WhitelistedCollectorsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationEndTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationStartTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllo\",\"outputs\":[{\"internalType\":\"contract IAllo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"getPayouts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategy.PayoutSummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"}],\"name\":\"getRecipientDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocation\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategy.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct SNDRStrategy.Recipient\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientId\",\"type\":\"address\"}],\"name\":\"getRecipientStatus\",\"outputs\":[{\"internalType\":\"enum IStrategy.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRecipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increasePoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"}],\"name\":\"isValidAllocator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipientList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocation\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategy.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationEndTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationStartTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sndrCore\",\"outputs\":[{\"internalType\":\"contract ISNDRCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_registrationStartTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_registrationEndTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_allocationStartTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_allocationEndTime\",\"type\":\"uint64\"}],\"name\":\"updatePoolTimestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"},{\"internalType\":\"enum IStrategy.Status\",\"name\":\"_newStatus\",\"type\":\"uint8\"}],\"name\":\"updateRecipientStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newWhitelistedCollectors\",\"type\":\"address[]\"}],\"name\":\"updateWhitelistedCollectors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedCollectors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Inherits from BaseStrategy, Ownable, and ReentrancyGuard\",\"errors\":{\"ANCHOR_ERROR()\":[{\"details\":\"Thrown if the anchor creation fails\"}],\"NONCE_NOT_AVAILABLE()\":[{\"details\":\"Thrown when the nonce passed has been used or not available\"}],\"NOT_PENDING_OWNER()\":[{\"details\":\"Thrown when the 'msg.sender' is not the pending owner on ownership transfer\"}]},\"events\":{\"Allocated(address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount allocated\",\"recipientId\":\"The ID of the recipient\",\"token\":\"The token allocated\"}},\"Distributed(address,address,uint256,address)\":{\"params\":{\"amount\":\"The amount distributed\",\"recipientAddress\":\"The recipient\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}},\"Initialized(uint256,bytes)\":{\"params\":{\"data\":\"The data passed to the 'initialize' function\",\"poolId\":\"The ID of the pool\"}},\"PoolActive(bool)\":{\"params\":{\"active\":\"The status of the pool\"}},\"Registered(address,bytes,address)\":{\"params\":{\"data\":\"The data passed to the 'registerRecipient' function\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}}},\"kind\":\"dev\",\"methods\":{\"allocate(bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to allocate to the recipient\",\"_sender\":\"The address of the sender\"}},\"constructor\":{\"params\":{\"_allo\":\"Address of the Allo contract\",\"_sndrCore\":\"Address of the SNDR core contract\",\"_token\":\"Address of the ERC20 token used for distributions\"}},\"distribute(address[],bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to distribute to the recipients\",\"_recipientIds\":\"The IDs of the recipients\",\"_sender\":\"The address of the sender\"}},\"getAllo()\":{\"returns\":{\"_0\":\"The Allo contract\"}},\"getPayouts(address[],bytes[])\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to get the payout summary for the recipients\",\"_recipientIds\":\"The IDs of the recipients\"},\"returns\":{\"_0\":\"The payout summary for the recipients\"}},\"getPoolAmount()\":{\"returns\":{\"_0\":\"The balance of the pool\"}},\"getPoolId()\":{\"returns\":{\"_0\":\"The ID of the pool\"}},\"getRecipientDetails(address)\":{\"params\":{\"_recipientAddress\":\"Address of the recipient\"},\"returns\":{\"_0\":\"Recipient struct containing recipient details\"}},\"getRecipientStatus(address)\":{\"params\":{\"_recipientId\":\"The ID of the recipient\"},\"returns\":{\"_0\":\"The status of the recipient\"}},\"getStrategyId()\":{\"returns\":{\"_0\":\"The ID of the strategy\"}},\"getTotalRecipients()\":{\"returns\":{\"_0\":\"uint256 Total number of recipients\"}},\"increasePoolAmount(uint256)\":{\"details\":\"Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.\",\"params\":{\"_amount\":\"The amount to increase the pool by\"}},\"initialize(uint256,bytes)\":{\"details\":\"Overrides BaseStrategy's initialize function\",\"params\":{\"_data\":\"Encoded initialization parameters\",\"_poolId\":\"ID of the pool\"}},\"isPoolActive()\":{\"returns\":{\"_0\":\"'true' if the pool is active, otherwise 'false'\"}},\"isValidAllocator(address)\":{\"details\":\"How the allocator is determined is up to the strategy implementation.\",\"params\":{\"_allocator\":\"The address to check if it is a valid allocator for the strategy.\"},\"returns\":{\"_0\":\"'true' if the address is a valid allocator, 'false' otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerRecipient(bytes,address)\":{\"details\":\"Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to register the recipient\",\"_sender\":\"The address of the sender\"},\"returns\":{\"recipientId\":\"The recipientId\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePoolTimestamps(uint64,uint64,uint64,uint64)\":{\"params\":{\"_allocationEndTime\":\"New allocation end time\",\"_allocationStartTime\":\"New allocation start time\",\"_registrationEndTime\":\"New registration end time\",\"_registrationStartTime\":\"New registration start time\"}},\"updateRecipientStatus(address,uint8)\":{\"params\":{\"_newStatus\":\"New status to set\",\"_recipientAddress\":\"Address of the recipient\"}},\"updateWhitelistedCollectors(address[])\":{\"params\":{\"_newWhitelistedCollectors\":\"Address of the collector\"}},\"withdrawRemainingTokens()\":{\"details\":\"Can only be called by the owner\"}},\"title\":\"SNDRStrategy Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ALLOCATION_ACTIVE()\":[{\"notice\":\"Thrown when the allocation is active.\"}],\"ALLOCATION_NOT_ACTIVE()\":[{\"notice\":\"Thrown when the allocation is not active.\"}],\"ALLOCATION_NOT_ENDED()\":[{\"notice\":\"Thrown when the allocation is not ended.\"}],\"ALREADY_INITIALIZED()\":[{\"notice\":\"Thrown when data is already intialized\"}],\"AMOUNT_MISMATCH()\":[{\"notice\":\"Thrown when the amount of tokens sent does not match the amount of tokens expected\"}],\"ARRAY_MISMATCH()\":[{\"notice\":\"Thrown when two arrays length are not equal\"}],\"INVALID()\":[{\"notice\":\"Thrown as a general error when input / data is invalid\"}],\"INVALID_ADDRESS()\":[{\"notice\":\"Thrown when an invalid address is used\"}],\"INVALID_FEE()\":[{\"notice\":\"Thrown when the fee is below 1e18 which is the fee percentage denominator\"}],\"INVALID_METADATA()\":[{\"notice\":\"Thrown when the metadata is invalid.\"}],\"INVALID_REGISTRATION()\":[{\"notice\":\"Thrown when the registration is invalid.\"}],\"IS_APPROVED_STRATEGY()\":[{\"notice\":\"Thrown when the strategy is approved and should be cloned\"}],\"MISMATCH()\":[{\"notice\":\"Thrown when mismatch in decoding data\"}],\"NON_ZERO_VALUE()\":[{\"notice\":\"Thrown when the value is non-zero\"}],\"NOT_APPROVED_STRATEGY()\":[{\"notice\":\"Thrown when the strategy is not approved\"}],\"NOT_ENOUGH_FUNDS()\":[{\"notice\":\"Thrown when not enough funds are available\"}],\"NOT_IMPLEMENTED()\":[{\"notice\":\"Thrown when the function is not implemented\"}],\"NOT_INITIALIZED()\":[{\"notice\":\"Thrown when data is yet to be initialized\"}],\"POOL_ACTIVE()\":[{\"notice\":\"Thrown when a pool is already active\"}],\"POOL_INACTIVE()\":[{\"notice\":\"Thrown when a pool is inactive\"}],\"RECIPIENT_ALREADY_ACCEPTED()\":[{\"notice\":\"Thrown when recipient is already accepted.\"}],\"RECIPIENT_ERROR(address)\":[{\"notice\":\"Thrown when there is an error in recipient.\"}],\"RECIPIENT_NOT_ACCEPTED()\":[{\"notice\":\"Thrown when the recipient is not accepted.\"}],\"REGISTRATION_ACTIVE()\":[{\"notice\":\"Thrown when registration is active.\"}],\"REGISTRATION_NOT_ACTIVE()\":[{\"notice\":\"Thrown when registration is not active.\"}],\"UNAUTHORIZED()\":[{\"notice\":\"Thrown when user is not authorized\"}],\"ZERO_ADDRESS()\":[{\"notice\":\"Thrown when address is the zero address\"}]},\"events\":{\"Allocated(address,uint256,address,address)\":{\"notice\":\"Emitted when a recipient is allocated to.\"},\"Distributed(address,address,uint256,address)\":{\"notice\":\"Emitted when tokens are distributed.\"},\"Initialized(uint256,bytes)\":{\"notice\":\"Emitted when strategy is initialized.\"},\"PoolActive(bool)\":{\"notice\":\"Emitted when pool is set to active status.\"},\"Registered(address,bytes,address)\":{\"notice\":\"Emitted when a recipient is registered.\"}},\"kind\":\"user\",\"methods\":{\"NATIVE()\":{\"notice\":\"Address of the native token\"},\"allocate(bytes,address)\":{\"notice\":\"Allocates to a recipient.\"},\"constructor\":{\"notice\":\"Constructor to set the Allo contract, SNDR core, and token addresses\"},\"distribute(address[],bytes,address)\":{\"notice\":\"Distributes funds (tokens) to recipients.\"},\"getAllo()\":{\"notice\":\"Getter for the 'Allo' contract.\"},\"getPayouts(address[],bytes[])\":{\"notice\":\"Gets the payout summary for recipients.\"},\"getPoolAmount()\":{\"notice\":\"Getter for the 'poolAmount'.\"},\"getPoolId()\":{\"notice\":\"Getter for the 'poolId'.\"},\"getRecipientDetails(address)\":{\"notice\":\"Returns the details of a recipient\"},\"getRecipientStatus(address)\":{\"notice\":\"Getter for the status of a recipient.\"},\"getStrategyId()\":{\"notice\":\"Getter for the 'strategyId'.\"},\"getTotalRecipients()\":{\"notice\":\"Returns the total number of registered recipients\"},\"increasePoolAmount(uint256)\":{\"notice\":\"Increases the pool amount.\"},\"initialize(uint256,bytes)\":{\"notice\":\"Initializes the strategy with pool-specific parameters\"},\"isPoolActive()\":{\"notice\":\"Getter for whether or not the pool is active.\"},\"isValidAllocator(address)\":{\"notice\":\"Checks if the '_allocator' is a valid allocator.\"},\"registerRecipient(bytes,address)\":{\"notice\":\"Registers a recipient.\"},\"updatePoolTimestamps(uint64,uint64,uint64,uint64)\":{\"notice\":\"Updates the pool timestamps\"},\"updateRecipientStatus(address,uint8)\":{\"notice\":\"Updates the status of a recipient\"},\"updateWhitelistedCollectors(address[])\":{\"notice\":\"Updates whitelisted collectors\"},\"withdrawRemainingTokens()\":{\"notice\":\"Withdraws any remaining tokens from the contract\"}},\"notice\":\"This contract implements a custom strategy for distributing funds to recipients\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SNDRStrategy.sol\":\"SNDRStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/allo-v2/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/allo-v2/lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":@sablier/v2-core/=lib/allo-v2/lib/v2-core/\",\":@superfluid-finance/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/\",\":ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":allo-v2/=lib/allo-v2/contracts/\",\":ds-test/=lib/allo-v2/lib/forge-std/lib/ds-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eas-contracts/=lib/allo-v2/lib/eas-contracts/contracts/\",\":eas-proxy/=lib/allo-v2/lib/eas-proxy/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/allo-v2/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hats-protocol/=lib/allo-v2/lib/hats-protocol/\",\":hedgey-vesting/=lib/allo-v2/lib/hedgey-vesting/contracts/\",\":lib/ERC1155/=lib/allo-v2/lib/hats-protocol/lib/ERC1155/\",\":openzeppelin-contracts-upgradeable/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/allo-v2/lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/allo-v2/lib/permit2/\",\":prb-math/=lib/allo-v2/lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/allo-v2/lib/v2-core/lib/prb-test/src/\",\":solady/=lib/allo-v2/lib/solady/src/\",\":solarray/=lib/allo-v2/lib/v2-core/lib/solarray/src/\",\":solbase/=lib/allo-v2/lib/hats-protocol/lib/solbase/src/\",\":solmate/=lib/allo-v2/lib/permit2/lib/solmate/\",\":superfluid-protocol-monorepo/=lib/allo-v2/lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\",\":utils/=lib/allo-v2/lib/hats-protocol/lib/utils/\",\":v2-core/=lib/allo-v2/lib/v2-core/\"],\"viaIR\":true},\"sources\":{\"lib/allo-v2/contracts/core/interfaces/IAllo.sol\":{\"keccak256\":\"0x7bc06a262ffe042092c58949452b043546788a66616bec2a40f55975fd537c1d\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7420316020e25430b295e876562932810f274c7c651cbda8c09989a3ad9837d2\",\"dweb:/ipfs/QmfNx7MHNK9t4ReeA71CBUXHEhYNj6suDYHY7pjqUDc1T3\"]},\"lib/allo-v2/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"lib/allo-v2/contracts/core/interfaces/IStrategy.sol\":{\"keccak256\":\"0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487\",\"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH\"]},\"lib/allo-v2/contracts/core/libraries/Errors.sol\":{\"keccak256\":\"0x67e3c1109948a92cb3a01e8c2325c5f1b748ecbd4c9cd5bee34e81fa737f77ea\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://9603d3f1c4bb4b44a55663e71688a9d10786038e5dfa5039aa354572af1a53c3\",\"dweb:/ipfs/QmWNxsPH9YaJJkFiiU6oJ642i5kHxPzpRYfR5H8zSH4KaP\"]},\"lib/allo-v2/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://2cc5507da2550ab9bfa0fbb263e703f9e70b831190bb7b2bcdbb231cab49795c\",\"dweb:/ipfs/QmQXCD8v2HppXAX17aH49JvNyyfDYzGMrg63QNabUEXPpn\"]},\"lib/allo-v2/contracts/core/libraries/Native.sol\":{\"keccak256\":\"0x23dacace24a8c570a659dcc7e52fca2d39cc7577c6cfa674820cafaf194b29d5\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0727880a600b1803f02b58ad002938462dc61aacf841f5e1ee38f296fdd67e8a\",\"dweb:/ipfs/QmdrEiJxFFnUfn2QUNxRAUMS1qwCnRtGeWPChaGzhAkRnv\"]},\"lib/allo-v2/contracts/core/libraries/Transfer.sol\":{\"keccak256\":\"0x99f4e3bfd5cea354c2ef9e9774d7bdb2310faec5e7a21a619d87377b40eba135\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://f84412d189fa7c6ea3656409af156fad084b1a541850798da3e76549e3124588\",\"dweb:/ipfs/QmT3roFjt41PX7zgjT7KdThFU37Fh7F6vEyKooSzpfTBvq\"]},\"lib/allo-v2/contracts/strategies/BaseStrategy.sol\":{\"keccak256\":\"0x3f1382dc6c35d50545e327e7ed6016f2bd752357d446bd698014073f0b812873\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://99500abcd617fa43f6dde49e2c7802821ceaf54a65a8055cbbf2695ecd107974\",\"dweb:/ipfs/QmUktZkWuu3GCMEijY1fqt7NMy7BzpTvEtcmpB1fuoa7zt\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a\",\"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68\",\"dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0x06d3261d13cf5a08f9bcda05e17be0a6a0380193116298fdf8eabf9bf80d3624\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96965a8a2b1bd2d6cff4a8f78bcb33b0de8848834f8e4be28c03609ae08e9298\",\"dweb:/ipfs/QmSoNDxaEozMZgNdVEygfEvnk26Tu4UeFeapvtMsoUFftt\"]},\"src/SNDRStrategy.sol\":{\"keccak256\":\"0x79d0341cb7bab9713e47e4a4036435b19ab471a4924b7265e40f804a1f113470\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d079cb89bf9bb1a4d6a11b03c4f9c5b6e46a4b8b42c8dff1a0ad18f5496ade77\",\"dweb:/ipfs/QmWqeViEkpFRx4TqZ83RavYHrivyhnGyoNUW2j9FiNVHGV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1030,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "poolActive",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1032,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "poolId",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1034,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "poolAmount",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1622,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "_owner",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 1738,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "_status",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 2834,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "sndrCore",
								"offset": 0,
								"slot": "5",
								"type": "t_contract(ISNDRCore)2820"
							},
							{
								"astId": 2837,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "token",
								"offset": 0,
								"slot": "6",
								"type": "t_contract(IERC20)1870"
							},
							{
								"astId": 2850,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "recipients",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Recipient)2845_storage)"
							},
							{
								"astId": 2853,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "recipientList",
								"offset": 0,
								"slot": "8",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 2856,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "whitelistedCollectors",
								"offset": 0,
								"slot": "9",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 2858,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "registrationStartTime",
								"offset": 0,
								"slot": "10",
								"type": "t_uint64"
							},
							{
								"astId": 2860,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "registrationEndTime",
								"offset": 8,
								"slot": "10",
								"type": "t_uint64"
							},
							{
								"astId": 2862,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "allocationStartTime",
								"offset": 16,
								"slot": "10",
								"type": "t_uint64"
							},
							{
								"astId": 2864,
								"contract": "src/SNDRStrategy.sol:SNDRStrategy",
								"label": "allocationEndTime",
								"offset": 24,
								"slot": "10",
								"type": "t_uint64"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IERC20)1870": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_contract(ISNDRCore)2820": {
								"encoding": "inplace",
								"label": "contract ISNDRCore",
								"numberOfBytes": "20"
							},
							"t_enum(Status)533": {
								"encoding": "inplace",
								"label": "enum IStrategy.Status",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Recipient)2845_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct SNDRStrategy.Recipient)",
								"numberOfBytes": "32",
								"value": "t_struct(Recipient)2845_storage"
							},
							"t_struct(Recipient)2845_storage": {
								"encoding": "inplace",
								"label": "struct SNDRStrategy.Recipient",
								"members": [
									{
										"astId": 2839,
										"contract": "src/SNDRStrategy.sol:SNDRStrategy",
										"label": "recipientAddress",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 2841,
										"contract": "src/SNDRStrategy.sol:SNDRStrategy",
										"label": "totalAllocation",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 2844,
										"contract": "src/SNDRStrategy.sol:SNDRStrategy",
										"label": "status",
										"offset": 0,
										"slot": "2",
										"type": "t_enum(Status)533"
									}
								],
								"numberOfBytes": "96"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							}
						}
					},
					"userdoc": {
						"errors": {
							"ALLOCATION_ACTIVE()": [
								{
									"notice": "Thrown when the allocation is active."
								}
							],
							"ALLOCATION_NOT_ACTIVE()": [
								{
									"notice": "Thrown when the allocation is not active."
								}
							],
							"ALLOCATION_NOT_ENDED()": [
								{
									"notice": "Thrown when the allocation is not ended."
								}
							],
							"ALREADY_INITIALIZED()": [
								{
									"notice": "Thrown when data is already intialized"
								}
							],
							"AMOUNT_MISMATCH()": [
								{
									"notice": "Thrown when the amount of tokens sent does not match the amount of tokens expected"
								}
							],
							"ARRAY_MISMATCH()": [
								{
									"notice": "Thrown when two arrays length are not equal"
								}
							],
							"INVALID()": [
								{
									"notice": "Thrown as a general error when input / data is invalid"
								}
							],
							"INVALID_ADDRESS()": [
								{
									"notice": "Thrown when an invalid address is used"
								}
							],
							"INVALID_FEE()": [
								{
									"notice": "Thrown when the fee is below 1e18 which is the fee percentage denominator"
								}
							],
							"INVALID_METADATA()": [
								{
									"notice": "Thrown when the metadata is invalid."
								}
							],
							"INVALID_REGISTRATION()": [
								{
									"notice": "Thrown when the registration is invalid."
								}
							],
							"IS_APPROVED_STRATEGY()": [
								{
									"notice": "Thrown when the strategy is approved and should be cloned"
								}
							],
							"MISMATCH()": [
								{
									"notice": "Thrown when mismatch in decoding data"
								}
							],
							"NON_ZERO_VALUE()": [
								{
									"notice": "Thrown when the value is non-zero"
								}
							],
							"NOT_APPROVED_STRATEGY()": [
								{
									"notice": "Thrown when the strategy is not approved"
								}
							],
							"NOT_ENOUGH_FUNDS()": [
								{
									"notice": "Thrown when not enough funds are available"
								}
							],
							"NOT_IMPLEMENTED()": [
								{
									"notice": "Thrown when the function is not implemented"
								}
							],
							"NOT_INITIALIZED()": [
								{
									"notice": "Thrown when data is yet to be initialized"
								}
							],
							"POOL_ACTIVE()": [
								{
									"notice": "Thrown when a pool is already active"
								}
							],
							"POOL_INACTIVE()": [
								{
									"notice": "Thrown when a pool is inactive"
								}
							],
							"RECIPIENT_ALREADY_ACCEPTED()": [
								{
									"notice": "Thrown when recipient is already accepted."
								}
							],
							"RECIPIENT_ERROR(address)": [
								{
									"notice": "Thrown when there is an error in recipient."
								}
							],
							"RECIPIENT_NOT_ACCEPTED()": [
								{
									"notice": "Thrown when the recipient is not accepted."
								}
							],
							"REGISTRATION_ACTIVE()": [
								{
									"notice": "Thrown when registration is active."
								}
							],
							"REGISTRATION_NOT_ACTIVE()": [
								{
									"notice": "Thrown when registration is not active."
								}
							],
							"UNAUTHORIZED()": [
								{
									"notice": "Thrown when user is not authorized"
								}
							],
							"ZERO_ADDRESS()": [
								{
									"notice": "Thrown when address is the zero address"
								}
							]
						},
						"events": {
							"Allocated(address,uint256,address,address)": {
								"notice": "Emitted when a recipient is allocated to."
							},
							"Distributed(address,address,uint256,address)": {
								"notice": "Emitted when tokens are distributed."
							},
							"Initialized(uint256,bytes)": {
								"notice": "Emitted when strategy is initialized."
							},
							"PoolActive(bool)": {
								"notice": "Emitted when pool is set to active status."
							},
							"Registered(address,bytes,address)": {
								"notice": "Emitted when a recipient is registered."
							}
						},
						"kind": "user",
						"methods": {
							"NATIVE()": {
								"notice": "Address of the native token"
							},
							"allocate(bytes,address)": {
								"notice": "Allocates to a recipient."
							},
							"constructor": {
								"notice": "Constructor to set the Allo contract, SNDR core, and token addresses"
							},
							"distribute(address[],bytes,address)": {
								"notice": "Distributes funds (tokens) to recipients."
							},
							"getAllo()": {
								"notice": "Getter for the 'Allo' contract."
							},
							"getPayouts(address[],bytes[])": {
								"notice": "Gets the payout summary for recipients."
							},
							"getPoolAmount()": {
								"notice": "Getter for the 'poolAmount'."
							},
							"getPoolId()": {
								"notice": "Getter for the 'poolId'."
							},
							"getRecipientDetails(address)": {
								"notice": "Returns the details of a recipient"
							},
							"getRecipientStatus(address)": {
								"notice": "Getter for the status of a recipient."
							},
							"getStrategyId()": {
								"notice": "Getter for the 'strategyId'."
							},
							"getTotalRecipients()": {
								"notice": "Returns the total number of registered recipients"
							},
							"increasePoolAmount(uint256)": {
								"notice": "Increases the pool amount."
							},
							"initialize(uint256,bytes)": {
								"notice": "Initializes the strategy with pool-specific parameters"
							},
							"isPoolActive()": {
								"notice": "Getter for whether or not the pool is active."
							},
							"isValidAllocator(address)": {
								"notice": "Checks if the '_allocator' is a valid allocator."
							},
							"registerRecipient(bytes,address)": {
								"notice": "Registers a recipient."
							},
							"updatePoolTimestamps(uint64,uint64,uint64,uint64)": {
								"notice": "Updates the pool timestamps"
							},
							"updateRecipientStatus(address,uint8)": {
								"notice": "Updates the status of a recipient"
							},
							"updateWhitelistedCollectors(address[])": {
								"notice": "Updates whitelisted collectors"
							},
							"withdrawRemainingTokens()": {
								"notice": "Withdraws any remaining tokens from the contract"
							}
						},
						"notice": "This contract implements a custom strategy for distributing funds to recipients",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/allo-v2/contracts/core/interfaces/IAllo.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/contracts/core/interfaces/IAllo.sol",
					"exportedSymbols": {
						"IAllo": [
							328
						],
						"IRegistry": [
							520
						],
						"IStrategy": [
							687
						],
						"Metadata": [
							789
						]
					},
					"id": 329,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "42:24:0"
						},
						{
							"absolutePath": "lib/allo-v2/contracts/core/interfaces/IRegistry.sol",
							"file": "./IRegistry.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 329,
							"sourceUnit": 521,
							"src": "82:42:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IRegistry",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 520,
										"src": "90:9:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
							"file": "./IStrategy.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 329,
							"sourceUnit": 688,
							"src": "125:42:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "IStrategy",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 687,
										"src": "133:9:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/contracts/core/libraries/Metadata.sol",
							"file": "../libraries/Metadata.sol",
							"id": 7,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 329,
							"sourceUnit": 790,
							"src": "190:51:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 6,
										"name": "Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 789,
										"src": "198:8:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAllo",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 8,
								"nodeType": "StructuredDocumentation",
								"src": "4234:297:0",
								"text": "@title Allo Interface\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice Interface for the Allo contract. It exposes all functions needed to use the Allo protocol."
							},
							"fullyImplemented": false,
							"id": 328,
							"linearizedBaseContracts": [
								328
							],
							"name": "IAllo",
							"nameLocation": "4541:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IAllo.Pool",
									"id": 23,
									"members": [
										{
											"constant": false,
											"id": 10,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "4748:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 23,
											"src": "4740:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 9,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "4740:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 13,
											"mutability": "mutable",
											"name": "strategy",
											"nameLocation": "4777:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 23,
											"src": "4767:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IStrategy_$687",
												"typeString": "contract IStrategy"
											},
											"typeName": {
												"id": 12,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 11,
													"name": "IStrategy",
													"nameLocations": [
														"4767:9:0"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 687,
													"src": "4767:9:0"
												},
												"referencedDeclaration": 687,
												"src": "4767:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IStrategy_$687",
													"typeString": "contract IStrategy"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 15,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "4803:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 23,
											"src": "4795:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 14,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4795:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 18,
											"mutability": "mutable",
											"name": "metadata",
											"nameLocation": "4827:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 23,
											"src": "4818:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
												"typeString": "struct Metadata"
											},
											"typeName": {
												"id": 17,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 16,
													"name": "Metadata",
													"nameLocations": [
														"4818:8:0"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 789,
													"src": "4818:8:0"
												},
												"referencedDeclaration": 789,
												"src": "4818:8:0",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
													"typeString": "struct Metadata"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 20,
											"mutability": "mutable",
											"name": "managerRole",
											"nameLocation": "4853:11:0",
											"nodeType": "VariableDeclaration",
											"scope": 23,
											"src": "4845:19:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 19,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "4845:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 22,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "4882:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 23,
											"src": "4874:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 21,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "4874:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Pool",
									"nameLocation": "4725:4:0",
									"nodeType": "StructDefinition",
									"scope": 328,
									"src": "4718:180:0",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "4998:402:0",
										"text": "@notice Event emitted when a new pool is created\n @param poolId ID of the pool created\n @param profileId ID of the profile the pool is associated with\n @param strategy Address of the strategy contract\n @param token Address of the token pool was funded with when created\n @param amount Amount pool was funded with when created\n @param metadata Pool metadata"
									},
									"eventSelector": "69bcb5a6cf6a3c95185cbb451e77787240c866dd2e8332597e3013ff18a1aba1",
									"id": 40,
									"name": "PoolCreated",
									"nameLocation": "5411:11:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "5448:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "5432:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5432:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "5480:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "5464:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 27,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5464:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"indexed": false,
												"mutability": "mutable",
												"name": "strategy",
												"nameLocation": "5509:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "5499:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IStrategy_$687",
													"typeString": "contract IStrategy"
												},
												"typeName": {
													"id": 30,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 29,
														"name": "IStrategy",
														"nameLocations": [
															"5499:9:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 687,
														"src": "5499:9:0"
													},
													"referencedDeclaration": 687,
													"src": "5499:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IStrategy_$687",
														"typeString": "contract IStrategy"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"indexed": false,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5535:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "5527:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5527:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 35,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5558:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "5550:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 34,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5550:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"indexed": false,
												"mutability": "mutable",
												"name": "metadata",
												"nameLocation": "5583:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "5574:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 37,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 36,
														"name": "Metadata",
														"nameLocations": [
															"5574:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 789,
														"src": "5574:8:0"
													},
													"referencedDeclaration": 789,
													"src": "5574:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5422:175:0"
									},
									"src": "5405:193:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "5604:152:0",
										"text": "@notice Emitted when a pools metadata is updated\n @param poolId ID of the pool updated\n @param metadata Pool metadata that was updated"
									},
									"eventSelector": "14f52b76bda9e4c482842cefda2968d332933577988f224e80aae18fba10edf0",
									"id": 48,
									"name": "PoolMetadataUpdated",
									"nameLocation": "5767:19:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "5803:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "5787:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 46,
												"indexed": false,
												"mutability": "mutable",
												"name": "metadata",
												"nameLocation": "5820:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "5811:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 45,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 44,
														"name": "Metadata",
														"nameLocations": [
															"5811:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 789,
														"src": "5811:8:0"
													},
													"referencedDeclaration": 789,
													"src": "5811:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5786:43:0"
									},
									"src": "5761:69:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 49,
										"nodeType": "StructuredDocumentation",
										"src": "5836:191:0",
										"text": "@notice Emitted when a pool is funded\n @param poolId ID of the pool funded\n @param amount Amount funded to the pool\n @param fee Amount of the fee paid to the treasury"
									},
									"eventSelector": "bf59838198f4ea92f663f5c1fc697f151a1b746b7dff86d564f250a55cbb4851",
									"id": 57,
									"name": "PoolFunded",
									"nameLocation": "6038:10:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "6065:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "6049:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 50,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6049:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6081:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "6073:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 52,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6073:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"indexed": false,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "6097:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "6089:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6089:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6048:53:0"
									},
									"src": "6032:70:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 58,
										"nodeType": "StructuredDocumentation",
										"src": "6108:158:0",
										"text": "@notice Emitted when the base fee is paid\n @param poolId ID of the pool the base fee was paid for\n @param amount Amount of the base fee paid"
									},
									"eventSelector": "02e340b51c6ae66fd22509c9b016f224c47a54063d4259fe3d860958e9eaac72",
									"id": 64,
									"name": "BaseFeePaid",
									"nameLocation": "6277:11:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "6305:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "6289:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 59,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6289:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 62,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6321:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "6313:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 61,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6313:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6288:40:0"
									},
									"src": "6271:58:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "6335:108:0",
										"text": "@notice Emitted when the treasury address is updated\n @param treasury Address of the new treasury"
									},
									"eventSelector": "7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d1",
									"id": 69,
									"name": "TreasuryUpdated",
									"nameLocation": "6454:15:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"indexed": false,
												"mutability": "mutable",
												"name": "treasury",
												"nameLocation": "6478:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "6470:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6470:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6469:18:0"
									},
									"src": "6448:40:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 70,
										"nodeType": "StructuredDocumentation",
										"src": "6494:104:0",
										"text": "@notice Emitted when the percent fee is updated\n @param percentFee New percentage for the fee"
									},
									"eventSelector": "9e826789de2de708fd9f09edea1182545e543893caa8ff71f8eb3aab50a4b065",
									"id": 74,
									"name": "PercentFeeUpdated",
									"nameLocation": "6609:17:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 72,
												"indexed": false,
												"mutability": "mutable",
												"name": "percentFee",
												"nameLocation": "6635:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "6627:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 71,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6627:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6626:20:0"
									},
									"src": "6603:44:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "6653:91:0",
										"text": "@notice Emitted when the base fee is updated\n @param baseFee New base fee amount"
									},
									"eventSelector": "803bee7e92bbc6ae7a1551f9f4ed3e31a8ea8df32e93332f41b0028f1091f9c3",
									"id": 79,
									"name": "BaseFeeUpdated",
									"nameLocation": "6755:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"indexed": false,
												"mutability": "mutable",
												"name": "baseFee",
												"nameLocation": "6778:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "6770:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6770:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6769:17:0"
									},
									"src": "6749:38:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 80,
										"nodeType": "StructuredDocumentation",
										"src": "6793:108:0",
										"text": "@notice Emitted when the registry address is updated\n @param registry Address of the new registry"
									},
									"eventSelector": "d6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd",
									"id": 84,
									"name": "RegistryUpdated",
									"nameLocation": "6912:15:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"indexed": false,
												"mutability": "mutable",
												"name": "registry",
												"nameLocation": "6936:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "6928:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 81,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6928:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6927:18:0"
									},
									"src": "6906:40:0"
								},
								{
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "7088:280:0",
										"text": "@notice Initialize the Allo contract\n @param _owner Address of the owner\n @param _registry Address of the registry contract\n @param _treasury Address of the treasury\n @param _percentFee Percentage for the fee\n @param _baseFee Base fee amount"
									},
									"functionSelector": "a6b63eb8",
									"id": 98,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "7382:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "7410:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "7402:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7402:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "_registry",
												"nameLocation": "7434:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "7426:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7426:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "_treasury",
												"nameLocation": "7469:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "7453:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 90,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7453:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "_percentFee",
												"nameLocation": "7496:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "7488:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 92,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7488:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "_baseFee",
												"nameLocation": "7525:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "7517:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 94,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7517:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7392:147:0"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7548:0:0"
									},
									"scope": 328,
									"src": "7373:176:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "7555:1176:0",
										"text": "@notice Creates a new pool (with a custom strategy)\n @dev 'msg.sender' must be a member or owner of a profile to create a pool with or without a custom strategy, The encoded data\n      will be specific to a given strategy requirements, reference the strategy implementation of 'initialize()'. The strategy\n      address passed must not be the zero address. 'msg.sender' must be a member or owner of the profile id passed as '_profileId'.\n @param _profileId The 'profileId' of the registry profile, used to check if 'msg.sender' is a member or owner of the profile\n @param _strategy The address of the deployed custom strategy\n @param _initStrategyData The data to initialize the strategy\n @param _token The address of the token you want to use in your pool\n @param _amount The amount of the token you want to deposit into the pool on initialization\n @param _metadata The 'Metadata' of the pool, this uses our 'Meatdata.sol' struct (consistent throughout the protocol)\n @param _managers The managers of the pool, and can be added/removed later by the pool admin\n @return poolId The ID of the pool"
									},
									"functionSelector": "e1007d4a",
									"id": 120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPoolWithCustomStrategy",
									"nameLocation": "8745:28:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "8791:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "8783:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 100,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8783:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "_strategy",
												"nameLocation": "8819:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "8811:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8811:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "_initStrategyData",
												"nameLocation": "8851:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "8838:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 104,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8838:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "8886:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "8878:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8878:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "8910:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "8902:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8902:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "_metadata",
												"nameLocation": "8943:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "8927:25:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 111,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 110,
														"name": "Metadata",
														"nameLocations": [
															"8927:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 789,
														"src": "8927:8:0"
													},
													"referencedDeclaration": 789,
													"src": "8927:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "_managers",
												"nameLocation": "8979:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "8962:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 113,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "8962:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 114,
													"nodeType": "ArrayTypeName",
													"src": "8962:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8773:221:0"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "9029:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "9021:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9021:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9020:16:0"
									},
									"scope": 328,
									"src": "8736:301:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "9043:865:0",
										"text": "@notice Creates a new pool (by cloning a deployed strategies).\n @dev 'msg.sender' must be owner or member of the profile id passed as '_profileId'. The strategy address passed\n      must not be the zero address.\n @param _profileId The ID of the registry profile, used to check if 'msg.sender' is a member or owner of the profile\n @param _strategy The address of the strategy contract the pool will use.\n @param _initStrategyData The data to initialize the strategy\n @param _token The address of the token\n @param _amount The amount of the token\n @param _metadata The metadata of the pool\n @param _managers The managers of the pool\n @custom:initstrategydata The encoded data will be specific to a given strategy requirements,\n    reference the strategy implementation of 'initialize()'"
									},
									"functionSelector": "77da8caf",
									"id": 142,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nameLocation": "9922:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "9950:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "9942:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 122,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9942:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "_strategy",
												"nameLocation": "9978:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "9970:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9970:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "_initStrategyData",
												"nameLocation": "10010:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "9997:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 126,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9997:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "10045:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "10037:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10037:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "10069:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "10061:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10061:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "_metadata",
												"nameLocation": "10102:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "10086:25:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 133,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 132,
														"name": "Metadata",
														"nameLocations": [
															"10086:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 789,
														"src": "10086:8:0"
													},
													"referencedDeclaration": 789,
													"src": "10086:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "_managers",
												"nameLocation": "10138:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "10121:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 135,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10121:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 136,
													"nodeType": "ArrayTypeName",
													"src": "10121:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9932:221:0"
									},
									"returnParameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "10188:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "10180:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10180:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10179:16:0"
									},
									"scope": 328,
									"src": "9913:283:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 143,
										"nodeType": "StructuredDocumentation",
										"src": "10202:186:0",
										"text": "@notice Updates a pools metadata.\n @dev 'msg.sender' must be a pool admin.\n @param _poolId The ID of the pool to update\n @param _metadata The new metadata to set"
									},
									"functionSelector": "5f9ca138",
									"id": 151,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updatePoolMetadata",
									"nameLocation": "10402:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "10429:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "10421:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10421:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "_metadata",
												"nameLocation": "10454:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "10438:25:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 147,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 146,
														"name": "Metadata",
														"nameLocations": [
															"10438:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 789,
														"src": "10438:8:0"
													},
													"referencedDeclaration": 789,
													"src": "10438:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10420:44:0"
									},
									"returnParameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10473:0:0"
									},
									"scope": 328,
									"src": "10393:81:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "10480:149:0",
										"text": "@notice Update the registry address.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _registry The new registry address"
									},
									"functionSelector": "1a5da6c8",
									"id": 157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateRegistry",
									"nameLocation": "10643:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "_registry",
												"nameLocation": "10666:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "10658:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10658:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10657:19:0"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10685:0:0"
									},
									"scope": 328,
									"src": "10634:52:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "10692:150:0",
										"text": "@notice Updates the treasury address.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _treasury The new treasury address"
									},
									"functionSelector": "7f51bb1f",
									"id": 163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateTreasury",
									"nameLocation": "10856:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "_treasury",
												"nameLocation": "10887:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "10871:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10871:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10870:27:0"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10906:0:0"
									},
									"scope": 328,
									"src": "10847:60:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "10913:164:0",
										"text": "@notice Updates the percentage for the fee.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _percentFee The new percentage for the fee"
									},
									"functionSelector": "f54fc4a0",
									"id": 169,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updatePercentFee",
									"nameLocation": "11091:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "_percentFee",
												"nameLocation": "11116:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "11108:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11108:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11107:21:0"
									},
									"returnParameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11137:0:0"
									},
									"scope": 328,
									"src": "11082:56:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "11144:133:0",
										"text": "@notice Updates the base fee.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _baseFee The new base fee"
									},
									"functionSelector": "8e690186",
									"id": 175,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateBaseFee",
									"nameLocation": "11291:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "_baseFee",
												"nameLocation": "11313:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "11305:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11305:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11304:18:0"
									},
									"returnParameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11331:0:0"
									},
									"scope": 328,
									"src": "11282:50:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "11338:214:0",
										"text": "@notice Adds a pool manager to the pool.\n @dev 'msg.sender' must be a pool admin.\n @param _poolId The ID of the pool to add the manager to\n @param _manager The address of the manager to add"
									},
									"functionSelector": "2cf682b0",
									"id": 183,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addPoolManager",
									"nameLocation": "11566:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "11589:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "11581:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11581:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "_manager",
												"nameLocation": "11606:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "11598:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11598:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11580:35:0"
									},
									"returnParameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11624:0:0"
									},
									"scope": 328,
									"src": "11557:68:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "11631:227:0",
										"text": "@notice Removes a pool manager from the pool.\n @dev 'msg.sender' must be a pool admin.\n @param _poolId The ID of the pool to remove the manager from\n @param _manager The address of the manager to remove"
									},
									"functionSelector": "7f5a70bd",
									"id": 191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removePoolManager",
									"nameLocation": "11872:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "11898:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "11890:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11890:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "_manager",
												"nameLocation": "11915:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "11907:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11907:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11889:35:0"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11933:0:0"
									},
									"scope": 328,
									"src": "11863:71:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "11940:199:0",
										"text": "@notice Recovers funds from a pool.\n @dev 'msg.sender' must be a pool admin.\n @param _token The token to recover\n @param _recipient The address to send the recovered funds to"
									},
									"functionSelector": "24ae6a27",
									"id": 199,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "recoverFunds",
									"nameLocation": "12153:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "12174:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "12166:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12166:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "_recipient",
												"nameLocation": "12190:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "12182:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12182:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12165:36:0"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12210:0:0"
									},
									"scope": 328,
									"src": "12144:67:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "12217:197:0",
										"text": "@notice Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy.\n @param _poolId The ID of the pool to register the recipient for"
									},
									"functionSelector": "075c0e9c",
									"id": 209,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerRecipient",
									"nameLocation": "12428:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "12454:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "12446:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12446:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "12476:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "12463:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 203,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12463:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12445:37:0"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "12509:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12509:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12508:9:0"
									},
									"scope": 328,
									"src": "12419:99:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 210,
										"nodeType": "StructuredDocumentation",
										"src": "12524:215:0",
										"text": "@notice Registers a batch of recipients.\n @param _poolIds The pool ID's to register the recipients for\n @param _data The data to pass to the strategy and may be handled differently by each strategy"
									},
									"functionSelector": "1a20bd88",
									"id": 222,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchRegisterRecipient",
									"nameLocation": "12753:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "_poolIds",
												"nameLocation": "12793:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "12776:25:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 211,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12776:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 212,
													"nodeType": "ArrayTypeName",
													"src": "12776:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "12818:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "12803:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 214,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "12803:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 215,
													"nodeType": "ArrayTypeName",
													"src": "12803:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12775:49:0"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "12859:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 218,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12859:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 219,
													"nodeType": "ArrayTypeName",
													"src": "12859:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12858:18:0"
									},
									"scope": 328,
									"src": "12744:133:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "12883:300:0",
										"text": "@notice Funds a pool.\n @dev 'msg.value' must be greater than 0 if the token is the native token\n       or '_amount' must be greater than 0 if the token is not the native token.\n @param _poolId The ID of the pool to fund\n @param _amount The amount to fund the pool with"
									},
									"functionSelector": "5acd6fac",
									"id": 230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fundPool",
									"nameLocation": "13197:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "13214:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "13206:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13206:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "13231:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "13223:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13205:34:0"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13256:0:0"
									},
									"scope": 328,
									"src": "13188:69:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 231,
										"nodeType": "StructuredDocumentation",
										"src": "13263:287:0",
										"text": "@notice Allocates funds to a recipient.\n @dev Each strategy will handle the allocation of funds differently.\n @param _poolId The ID of the pool to allocate funds from\n @param _data The data to pass to the strategy and may be handled differently by each strategy."
									},
									"functionSelector": "2ec38188",
									"id": 238,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allocate",
									"nameLocation": "13564:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "13581:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "13573:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13573:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "13603:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "13590:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 234,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13590:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13572:37:0"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13626:0:0"
									},
									"scope": 328,
									"src": "13555:72:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "13633:126:0",
										"text": "@notice Allocates funds to multiple recipients.\n @dev Each strategy will handle the allocation of funds differently"
									},
									"functionSelector": "c6dff1cf",
									"id": 248,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchAllocate",
									"nameLocation": "13773:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "_poolIds",
												"nameLocation": "13806:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "13787:27:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 240,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "13787:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 241,
													"nodeType": "ArrayTypeName",
													"src": "13787:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "_datas",
												"nameLocation": "13831:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "13816:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 243,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "13816:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 244,
													"nodeType": "ArrayTypeName",
													"src": "13816:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13786:52:0"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13847:0:0"
									},
									"scope": 328,
									"src": "13764:84:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 249,
										"nodeType": "StructuredDocumentation",
										"src": "13854:391:0",
										"text": "@notice Distributes funds to recipients and emits {Distributed} event if successful\n @dev Each strategy will handle the distribution of funds differently\n @param _poolId The ID of the pool to distribute from\n @param _recipientIds The recipient ids to distribute to\n @param _data The data to pass to the strategy and may be handled differently by each strategy"
									},
									"functionSelector": "3a5fbd92",
									"id": 259,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nameLocation": "14259:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "14278:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "14270:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14270:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "14304:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "14287:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 252,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "14287:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 253,
													"nodeType": "ArrayTypeName",
													"src": "14287:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "14332:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "14319:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 255,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14319:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14269:69:0"
									},
									"returnParameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14347:0:0"
									},
									"scope": 328,
									"src": "14250:98:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "14457:221:0",
										"text": "@notice Checks if an address is a pool admin.\n @param _poolId The ID of the pool to check\n @param _address The address to check\n @return 'true' if the '_address' is a pool admin, otherwise 'false'"
									},
									"functionSelector": "ab3febc6",
									"id": 269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolAdmin",
									"nameLocation": "14692:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "14712:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "14704:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14704:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "14729:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "14721:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14721:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14703:35:0"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "14762:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 266,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14762:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14761:6:0"
									},
									"scope": 328,
									"src": "14683:85:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "14774:225:0",
										"text": "@notice Checks if an address is a pool manager.\n @param _poolId The ID of the pool to check\n @param _address The address to check\n @return 'true' if the '_address' is a pool manager, otherwise 'false'"
									},
									"functionSelector": "29e40d4b",
									"id": 279,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolManager",
									"nameLocation": "15013:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "15035:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "15027:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15027:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "15052:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "15044:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15044:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15026:35:0"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "15085:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 276,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15085:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15084:6:0"
									},
									"scope": 328,
									"src": "15004:87:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "15097:205:0",
										"text": "@notice Returns the address of the strategy for a given 'poolId'\n @param _poolId The ID of the pool to check\n @return strategy The address of the strategy for the ID of the pool passed in"
									},
									"functionSelector": "cfc0cc34",
									"id": 287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getStrategy",
									"nameLocation": "15316:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "15336:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "15328:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15328:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15327:17:0"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "15368:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15368:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15367:9:0"
									},
									"scope": 328,
									"src": "15307:70:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "15383:105:0",
										"text": "@notice Returns the current percent fee\n @return percentFee The current percentage for the fee"
									},
									"functionSelector": "4edbaadc",
									"id": 293,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPercentFee",
									"nameLocation": "15502:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15515:2:0"
									},
									"returnParameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "15541:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15541:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15540:9:0"
									},
									"scope": 328,
									"src": "15493:57:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "15556:85:0",
										"text": "@notice Returns the current base fee\n @return baseFee The current base fee"
									},
									"functionSelector": "15e812ad",
									"id": 299,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getBaseFee",
									"nameLocation": "15655:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15665:2:0"
									},
									"returnParameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "15691:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 296,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15691:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15690:9:0"
									},
									"scope": 328,
									"src": "15646:54:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 300,
										"nodeType": "StructuredDocumentation",
										"src": "15706:102:0",
										"text": "@notice Returns the current treasury address\n @return treasury The current treasury address"
									},
									"functionSelector": "3b19e84a",
									"id": 305,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTreasury",
									"nameLocation": "15822:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15833:2:0"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "15859:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15859:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15858:17:0"
									},
									"scope": 328,
									"src": "15813:63:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "15882:102:0",
										"text": "@notice Returns the current registry address\n @return registry The current registry address"
									},
									"functionSelector": "5ab1bd53",
									"id": 312,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRegistry",
									"nameLocation": "15998:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16009:2:0"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "16035:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IRegistry_$520",
													"typeString": "contract IRegistry"
												},
												"typeName": {
													"id": 309,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 308,
														"name": "IRegistry",
														"nameLocations": [
															"16035:9:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 520,
														"src": "16035:9:0"
													},
													"referencedDeclaration": 520,
													"src": "16035:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IRegistry_$520",
														"typeString": "contract IRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16034:11:0"
									},
									"scope": 328,
									"src": "15989:57:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "16052:181:0",
										"text": "@notice Returns the 'Pool' struct for a given 'poolId'\n @param _poolId The ID of the pool to check\n @return pool The 'Pool' struct for the ID of the pool passed in"
									},
									"functionSelector": "068bcd8d",
									"id": 321,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nameLocation": "16247:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "16263:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "16255:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16255:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16254:17:0"
									},
									"returnParameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "16295:11:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Pool_$23_memory_ptr",
													"typeString": "struct IAllo.Pool"
												},
												"typeName": {
													"id": 318,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 317,
														"name": "Pool",
														"nameLocations": [
															"16295:4:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 23,
														"src": "16295:4:0"
													},
													"referencedDeclaration": 23,
													"src": "16295:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Pool_$23_storage_ptr",
														"typeString": "struct IAllo.Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16294:13:0"
									},
									"scope": 328,
									"src": "16238:70:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 322,
										"nodeType": "StructuredDocumentation",
										"src": "16314:140:0",
										"text": "@notice Returns the current fee denominator\n @dev 1e18 represents 100%\n @return feeDenominator The current fee denominator"
									},
									"functionSelector": "f4e1fc41",
									"id": 327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFeeDenominator",
									"nameLocation": "16468:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16485:2:0"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "16511:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16511:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16510:9:0"
									},
									"scope": 328,
									"src": "16459:61:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 329,
							"src": "4531:11991:0",
							"usedErrors": []
						}
					],
					"src": "42:16481:0"
				},
				"id": 0
			},
			"lib/allo-v2/contracts/core/interfaces/IRegistry.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/contracts/core/interfaces/IRegistry.sol",
					"exportedSymbols": {
						"IRegistry": [
							520
						],
						"Metadata": [
							789
						]
					},
					"id": 521,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 330,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:1"
						},
						{
							"absolutePath": "lib/allo-v2/contracts/core/libraries/Metadata.sol",
							"file": "../libraries/Metadata.sol",
							"id": 332,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 521,
							"sourceUnit": 790,
							"src": "80:51:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 331,
										"name": "Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 789,
										"src": "88:8:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 333,
								"nodeType": "StructuredDocumentation",
								"src": "4124:931:1",
								"text": "@title IRegistry Interface\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice Interface for the Registry contract and exposes all functions needed to use the Registry\n         within the Allo protocol.\n @dev The Registry Interface is used to interact with the Allo protocol and create profiles\n      that can be used to interact with the Allo protocol. The Registry is the main contract\n      that all other contracts interact with to get the 'Profile' information needed to\n      interact with the Allo protocol. The Registry is also used to create new profiles\n      and update existing profiles. The Registry is also used to add and remove members\n      from a profile. The Registry will not always be used in a strategy and will depend on\n      the strategy being used."
							},
							"fullyImplemented": false,
							"id": 520,
							"linearizedBaseContracts": [
								520
							],
							"name": "IRegistry",
							"nameLocation": "5065:9:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IRegistry.Profile",
									"id": 347,
									"members": [
										{
											"constant": false,
											"id": 335,
											"mutability": "mutable",
											"name": "id",
											"nameLocation": "5273:2:1",
											"nodeType": "VariableDeclaration",
											"scope": 347,
											"src": "5265:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 334,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "5265:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 337,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "5293:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 347,
											"src": "5285:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 336,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5285:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 339,
											"mutability": "mutable",
											"name": "name",
											"nameLocation": "5315:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 347,
											"src": "5308:11:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 338,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "5308:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 342,
											"mutability": "mutable",
											"name": "metadata",
											"nameLocation": "5338:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 347,
											"src": "5329:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
												"typeString": "struct Metadata"
											},
											"typeName": {
												"id": 341,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 340,
													"name": "Metadata",
													"nameLocations": [
														"5329:8:1"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 789,
													"src": "5329:8:1"
												},
												"referencedDeclaration": 789,
												"src": "5329:8:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
													"typeString": "struct Metadata"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 344,
											"mutability": "mutable",
											"name": "owner",
											"nameLocation": "5364:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 347,
											"src": "5356:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 343,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "5356:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 346,
											"mutability": "mutable",
											"name": "anchor",
											"nameLocation": "5387:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 347,
											"src": "5379:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 345,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "5379:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Profile",
									"nameLocation": "5247:7:1",
									"nodeType": "StructDefinition",
									"scope": 520,
									"src": "5240:160:1",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 348,
										"nodeType": "StructuredDocumentation",
										"src": "5500:81:1",
										"text": "@dev Emitted when a profile is created. This will return your anchor address."
									},
									"eventSelector": "1e28352ff00d67474b59b87e6817d6ba65daa0130446266db8640214d8b80609",
									"id": 363,
									"name": "ProfileCreated",
									"nameLocation": "5592:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "5632:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5616:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 349,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5616:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "5651:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5643:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 351,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5643:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"indexed": false,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5665:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5658:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 353,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5658:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 357,
												"indexed": false,
												"mutability": "mutable",
												"name": "metadata",
												"nameLocation": "5680:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5671:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 356,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 355,
														"name": "Metadata",
														"nameLocations": [
															"5671:8:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 789,
														"src": "5671:8:1"
													},
													"referencedDeclaration": 789,
													"src": "5671:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"indexed": false,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5698:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5690:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5690:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"indexed": false,
												"mutability": "mutable",
												"name": "anchor",
												"nameLocation": "5713:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5705:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5705:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5606:119:1"
									},
									"src": "5586:140:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "5732:116:1",
										"text": "@dev Emitted when a profile name is updated. This will update the anchor when the name is updated and return it."
									},
									"eventSelector": "54cd733148631b9ff1cb945f2d0dcd33c0692e154763bfa2f35e2d10a76c432f",
									"id": 372,
									"name": "ProfileNameUpdated",
									"nameLocation": "5859:18:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 366,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "5894:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "5878:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 365,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5878:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 368,
												"indexed": false,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5912:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "5905:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 367,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5905:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"indexed": false,
												"mutability": "mutable",
												"name": "anchor",
												"nameLocation": "5926:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "5918:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5918:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5877:56:1"
									},
									"src": "5853:81:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 373,
										"nodeType": "StructuredDocumentation",
										"src": "5940:54:1",
										"text": "@dev Emitted when a profile's metadata is updated."
									},
									"eventSelector": "a366054a574e4f861cb295fd23b5440c5119c1ba329c36f5dfeb5643537cb0f3",
									"id": 380,
									"name": "ProfileMetadataUpdated",
									"nameLocation": "6005:22:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "6044:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 380,
												"src": "6028:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 374,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6028:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"indexed": false,
												"mutability": "mutable",
												"name": "metadata",
												"nameLocation": "6064:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 380,
												"src": "6055:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 377,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 376,
														"name": "Metadata",
														"nameLocations": [
															"6055:8:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 789,
														"src": "6055:8:1"
													},
													"referencedDeclaration": 789,
													"src": "6055:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6027:46:1"
									},
									"src": "5999:75:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 381,
										"nodeType": "StructuredDocumentation",
										"src": "6080:49:1",
										"text": "@dev Emitted when a profile owner is updated."
									},
									"eventSelector": "fd9ad63830df7bdf1586c8293dc88a30864cb43e9037e7afdb2c7210facf217d",
									"id": 387,
									"name": "ProfileOwnerUpdated",
									"nameLocation": "6140:19:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 383,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "6176:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "6160:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 382,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6160:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 385,
												"indexed": false,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6195:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "6187:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 384,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6187:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6159:42:1"
									},
									"src": "6134:68:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 388,
										"nodeType": "StructuredDocumentation",
										"src": "6208:57:1",
										"text": "@dev Emitted when a profile pending owner is updated."
									},
									"eventSelector": "21fe5cd61055ef88f636a264885b927f3ec2b380b6053a6b4a7495a6336a95c8",
									"id": 394,
									"name": "ProfilePendingOwnerUpdated",
									"nameLocation": "6276:26:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "6319:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "6303:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 389,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6303:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"indexed": false,
												"mutability": "mutable",
												"name": "pendingOwner",
												"nameLocation": "6338:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "6330:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 391,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6330:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6302:49:1"
									},
									"src": "6270:82:1"
								},
								{
									"documentation": {
										"id": 395,
										"nodeType": "StructuredDocumentation",
										"src": "6461:192:1",
										"text": "@dev Returns the 'Profile' for a '_profileId' passed\n @param _profileId The 'profileId' to return the 'Profile' for\n @return profile The 'Profile' for the '_profileId' passed"
									},
									"functionSelector": "0114cf0a",
									"id": 403,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getProfileById",
									"nameLocation": "6667:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "6690:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "6682:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 396,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6681:20:1"
									},
									"returnParameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"mutability": "mutable",
												"name": "profile",
												"nameLocation": "6740:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "6725:22:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Profile_$347_memory_ptr",
													"typeString": "struct IRegistry.Profile"
												},
												"typeName": {
													"id": 400,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 399,
														"name": "Profile",
														"nameLocations": [
															"6725:7:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 347,
														"src": "6725:7:1"
													},
													"referencedDeclaration": 347,
													"src": "6725:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Profile_$347_storage_ptr",
														"typeString": "struct IRegistry.Profile"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6724:24:1"
									},
									"scope": 520,
									"src": "6658:91:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 404,
										"nodeType": "StructuredDocumentation",
										"src": "6755:181:1",
										"text": "@dev Returns the 'Profile' for an '_anchor' passed\n @param _anchor The 'anchor' to return the 'Profile' for\n @return profile The 'Profile' for the '_anchor' passed"
									},
									"functionSelector": "dd93da43",
									"id": 412,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getProfileByAnchor",
									"nameLocation": "6950:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "_anchor",
												"nameLocation": "6977:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "6969:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 405,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6969:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6968:17:1"
									},
									"returnParameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "profile",
												"nameLocation": "7024:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "7009:22:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Profile_$347_memory_ptr",
													"typeString": "struct IRegistry.Profile"
												},
												"typeName": {
													"id": 409,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 408,
														"name": "Profile",
														"nameLocations": [
															"7009:7:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 347,
														"src": "7009:7:1"
													},
													"referencedDeclaration": 347,
													"src": "7009:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Profile_$347_storage_ptr",
														"typeString": "struct IRegistry.Profile"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7008:24:1"
									},
									"scope": 520,
									"src": "6941:92:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "7039:415:1",
										"text": "@dev Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in\n @param _profileId The 'profileId' to check if the '_account' is a member or owner of\n @param _account The 'account' to check if they are a member or owner of the '_profileId' passed in\n @return isOwnerOrMemberOfProfile A boolean if the '_account' is a member or owner of the '_profileId' passed in"
									},
									"functionSelector": "5e8a7915",
									"id": 422,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOwnerOrMemberOfProfile",
									"nameLocation": "7468:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "7501:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "7493:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 414,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7493:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "_account",
												"nameLocation": "7521:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "7513:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7513:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7492:38:1"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "isOwnerOrMemberOfProfile",
												"nameLocation": "7583:24:1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "7578:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 419,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7578:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7577:31:1"
									},
									"scope": 520,
									"src": "7459:150:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 423,
										"nodeType": "StructuredDocumentation",
										"src": "7615:367:1",
										"text": "@dev Returns a boolean if the '_account' is an owner of the '_profileId' passed in\n @param _profileId The 'profileId' to check if the '_account' is an owner of\n @param _owner The 'owner' to check if they are an owner of the '_profileId' passed in\n @return isOwnerOfProfile A boolean if the '_account' is an owner of the '_profileId' passed in"
									},
									"functionSelector": "39b86b8c",
									"id": 432,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOwnerOfProfile",
									"nameLocation": "7996:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "8021:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "8013:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 424,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8013:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "8041:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "8033:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8033:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8012:36:1"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "isOwnerOfProfile",
												"nameLocation": "8077:16:1",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "8072:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 429,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8072:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8071:23:1"
									},
									"scope": 520,
									"src": "7987:108:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 433,
										"nodeType": "StructuredDocumentation",
										"src": "8101:370:1",
										"text": "@dev Returns a boolean if the '_account' is a member of the '_profileId' passed in\n @param _profileId The 'profileId' to check if the '_account' is a member of\n @param _member The 'member' to check if they are a member of the '_profileId' passed in\n @return isMemberOfProfile A boolean if the '_account' is a member of the '_profileId' passed in"
									},
									"functionSelector": "0ec1fbac",
									"id": 442,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isMemberOfProfile",
									"nameLocation": "8485:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "8511:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "8503:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 434,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8503:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "_member",
												"nameLocation": "8531:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "8523:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8523:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8502:37:1"
									},
									"returnParameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "isMemberOfProfile",
												"nameLocation": "8568:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "8563:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 439,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8563:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8562:24:1"
									},
									"scope": 520,
									"src": "8476:111:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 443,
										"nodeType": "StructuredDocumentation",
										"src": "8729:677:1",
										"text": "@dev Creates a new 'Profile' and returns the 'profileId' of the new profile\n Note: The 'name' and 'nonce' are used to generate the 'anchor' address\n Requirements: None, anyone can create a new profile\n @param _nonce The nonce to use to generate the 'anchor' address\n @param _name The name to use to generate the 'anchor' address\n @param _metadata The 'Metadata' to use to generate the 'anchor' address\n @param _owner The 'owner' to use to generate the 'anchor' address\n @param _members The 'members' to use to generate the 'anchor' address\n @return profileId The 'profileId' of the new profile"
									},
									"functionSelector": "3a92f65f",
									"id": 460,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createProfile",
									"nameLocation": "9420:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "_nonce",
												"nameLocation": "9451:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "9443:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9443:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "_name",
												"nameLocation": "9481:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "9467:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 446,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9467:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "_metadata",
												"nameLocation": "9512:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "9496:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 449,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 448,
														"name": "Metadata",
														"nameLocations": [
															"9496:8:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 789,
														"src": "9496:8:1"
													},
													"referencedDeclaration": 789,
													"src": "9496:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "9539:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "9531:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9531:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "_members",
												"nameLocation": "9572:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "9555:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 453,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "9555:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 454,
													"nodeType": "ArrayTypeName",
													"src": "9555:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9433:153:1"
									},
									"returnParameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "9613:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "9605:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 457,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9605:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9604:19:1"
									},
									"scope": 520,
									"src": "9411:213:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 461,
										"nodeType": "StructuredDocumentation",
										"src": "9630:625:1",
										"text": "@dev Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address\n Requirements: Only the 'Profile' owner can update the name\n Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'\n       so please use caution. You can always recreate your 'anchor' address by updating the name back\n       to the original name used to create the profile.\n @param _profileId The 'profileId' to update the name for\n @param _name The new 'name' value\n @return anchor The new 'anchor' address"
									},
									"functionSelector": "cf189ff2",
									"id": 470,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateProfileName",
									"nameLocation": "10269:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "10295:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "10287:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 462,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10287:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "_name",
												"nameLocation": "10321:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "10307:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 464,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "10307:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10286:41:1"
									},
									"returnParameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "anchor",
												"nameLocation": "10354:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "10346:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10346:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10345:16:1"
									},
									"scope": 520,
									"src": "10260:102:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 471,
										"nodeType": "StructuredDocumentation",
										"src": "10368:267:1",
										"text": "@dev Updates the 'Metadata' of the '_profileId' passed in\n Requirements: Only the 'Profile' owner can update the metadata\n @param _profileId The 'profileId' to update the metadata for\n @param _metadata The new 'Metadata' value"
									},
									"functionSelector": "ac402839",
									"id": 479,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateProfileMetadata",
									"nameLocation": "10649:21:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "10679:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "10671:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 472,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10671:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "_metadata",
												"nameLocation": "10707:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "10691:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$789_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 475,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 474,
														"name": "Metadata",
														"nameLocations": [
															"10691:8:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 789,
														"src": "10691:8:1"
													},
													"referencedDeclaration": 789,
													"src": "10691:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$789_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10670:47:1"
									},
									"returnParameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10726:0:1"
									},
									"scope": 520,
									"src": "10640:87:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 480,
										"nodeType": "StructuredDocumentation",
										"src": "10733:291:1",
										"text": "@dev Updates the pending 'owner' of the '_profileId' passed in\n Requirements: Only the 'Profile' owner can update the pending owner\n @param _profileId The 'profileId' to update the pending owner for\n @param _pendingOwner The new pending 'owner' value"
									},
									"functionSelector": "3b66dacd",
									"id": 487,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateProfilePendingOwner",
									"nameLocation": "11038:25:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "11072:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "11064:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 481,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11064:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "_pendingOwner",
												"nameLocation": "11092:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "11084:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 483,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11084:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11063:43:1"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11115:0:1"
									},
									"scope": 520,
									"src": "11029:87:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 488,
										"nodeType": "StructuredDocumentation",
										"src": "11122:222:1",
										"text": "@dev Accepts the pending 'owner' of the '_profileId' passed in\n Requirements: Only the pending owner can accept the ownership\n @param _profileId The 'profileId' to accept the ownership for"
									},
									"functionSelector": "2497f3c6",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "acceptProfileOwnership",
									"nameLocation": "11358:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "11389:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "11381:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 489,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11381:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11380:20:1"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11409:0:1"
									},
									"scope": 520,
									"src": "11349:61:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "11416:263:1",
										"text": "@dev Adds members to the '_profileId' passed in\n Requirements: Only the 'Profile' owner can add members\n @param _profileId The 'profileId' to add members to\n @param _members The members to add to the '_profileId' passed in"
									},
									"functionSelector": "5063f361",
									"id": 502,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addMembers",
									"nameLocation": "11693:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "11712:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "11704:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 495,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11704:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "_members",
												"nameLocation": "11741:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "11724:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 497,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11724:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 498,
													"nodeType": "ArrayTypeName",
													"src": "11724:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11703:47:1"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11759:0:1"
									},
									"scope": 520,
									"src": "11684:76:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 503,
										"nodeType": "StructuredDocumentation",
										"src": "11766:281:1",
										"text": "@dev Removes members from the '_profileId' passed in\n Requirements: Only the 'Profile' owner can remove members\n @param _profileId The 'profileId' to remove members from\n @param _members The members to remove from the '_profileId' passed in"
									},
									"functionSelector": "e0cf1e4c",
									"id": 511,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeMembers",
									"nameLocation": "12061:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "12083:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "12075:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 504,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12075:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "_members",
												"nameLocation": "12112:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "12095:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 506,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12095:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 507,
													"nodeType": "ArrayTypeName",
													"src": "12095:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12074:47:1"
									},
									"returnParameters": {
										"id": 510,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12130:0:1"
									},
									"scope": 520,
									"src": "12052:79:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 512,
										"nodeType": "StructuredDocumentation",
										"src": "12137:230:1",
										"text": "@dev Recovers funds from the contract\n Requirements: Must be the Allo owner\n @param _token The token you want to use to recover funds\n @param _recipient The recipient of the recovered funds"
									},
									"functionSelector": "24ae6a27",
									"id": 519,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "recoverFunds",
									"nameLocation": "12381:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "12402:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "12394:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12394:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "_recipient",
												"nameLocation": "12418:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "12410:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12410:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12393:36:1"
									},
									"returnParameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12438:0:1"
									},
									"scope": 520,
									"src": "12372:67:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 521,
							"src": "5055:7386:1",
							"usedErrors": []
						}
					],
					"src": "32:12410:1"
				},
				"id": 1
			},
			"lib/allo-v2/contracts/core/interfaces/IStrategy.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
					"exportedSymbols": {
						"IAllo": [
							328
						],
						"IStrategy": [
							687
						]
					},
					"id": 688,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 522,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "42:24:2"
						},
						{
							"absolutePath": "lib/allo-v2/contracts/core/interfaces/IAllo.sol",
							"file": "./IAllo.sol",
							"id": 524,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 688,
							"sourceUnit": 329,
							"src": "82:34:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 523,
										"name": "IAllo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 328,
										"src": "90:5:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IStrategy",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 525,
								"nodeType": "StructuredDocumentation",
								"src": "4109:368:2",
								"text": "@title IStrategy Interface\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice BaseStrategy is the base contract that all strategies should inherit from and uses this interface."
							},
							"fullyImplemented": false,
							"id": 687,
							"linearizedBaseContracts": [
								687
							],
							"name": "IStrategy",
							"nameLocation": "4488:9:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IStrategy.Status",
									"id": 533,
									"members": [
										{
											"id": 526,
											"name": "None",
											"nameLocation": "4687:4:2",
											"nodeType": "EnumValue",
											"src": "4687:4:2"
										},
										{
											"id": 527,
											"name": "Pending",
											"nameLocation": "4701:7:2",
											"nodeType": "EnumValue",
											"src": "4701:7:2"
										},
										{
											"id": 528,
											"name": "Accepted",
											"nameLocation": "4718:8:2",
											"nodeType": "EnumValue",
											"src": "4718:8:2"
										},
										{
											"id": 529,
											"name": "Rejected",
											"nameLocation": "4736:8:2",
											"nodeType": "EnumValue",
											"src": "4736:8:2"
										},
										{
											"id": 530,
											"name": "Appealed",
											"nameLocation": "4754:8:2",
											"nodeType": "EnumValue",
											"src": "4754:8:2"
										},
										{
											"id": 531,
											"name": "InReview",
											"nameLocation": "4772:8:2",
											"nodeType": "EnumValue",
											"src": "4772:8:2"
										},
										{
											"id": 532,
											"name": "Canceled",
											"nameLocation": "4790:8:2",
											"nodeType": "EnumValue",
											"src": "4790:8:2"
										}
									],
									"name": "Status",
									"nameLocation": "4670:6:2",
									"nodeType": "EnumDefinition",
									"src": "4665:139:2"
								},
								{
									"canonicalName": "IStrategy.PayoutSummary",
									"id": 538,
									"members": [
										{
											"constant": false,
											"id": 535,
											"mutability": "mutable",
											"name": "recipientAddress",
											"nameLocation": "4911:16:2",
											"nodeType": "VariableDeclaration",
											"scope": 538,
											"src": "4903:24:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 534,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4903:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 537,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "4945:6:2",
											"nodeType": "VariableDeclaration",
											"scope": 538,
											"src": "4937:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 536,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4937:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PayoutSummary",
									"nameLocation": "4879:13:2",
									"nodeType": "StructDefinition",
									"scope": 687,
									"src": "4872:86:2",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 539,
										"nodeType": "StructuredDocumentation",
										"src": "5058:155:2",
										"text": "@notice Emitted when strategy is initialized.\n @param poolId The ID of the pool\n @param data The data passed to the 'initialize' function"
									},
									"eventSelector": "91efa3d50feccde0d0d202f8ae5c41ca0b2be614cebcb2bd2f4b019396e6568a",
									"id": 545,
									"name": "Initialized",
									"nameLocation": "5224:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 541,
												"indexed": false,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "5244:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "5236:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 540,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5236:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 543,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5258:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "5252:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 542,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5252:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5235:28:2"
									},
									"src": "5218:46:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 546,
										"nodeType": "StructuredDocumentation",
										"src": "5270:207:2",
										"text": "@notice Emitted when a recipient is registered.\n @param recipientId The ID of the recipient\n @param data The data passed to the 'registerRecipient' function\n @param sender The sender"
									},
									"eventSelector": "a197306e3dd5494a61a695381aa809a53b8e377a685e84e404a85d5a8da6cc62",
									"id": 554,
									"name": "Registered",
									"nameLocation": "5488:10:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 548,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "5515:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5499:27:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 547,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5499:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 550,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5534:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5528:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 549,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5528:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 552,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5548:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5540:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 551,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5540:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5498:57:2"
									},
									"src": "5482:74:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "5562:188:2",
										"text": "@notice Emitted when a recipient is allocated to.\n @param recipientId The ID of the recipient\n @param amount The amount allocated\n @param token The token allocated"
									},
									"eventSelector": "463ffc2cf8b1596445c417388ed30e53eb67cf6668cb2be7f0addf8a78c8441b",
									"id": 565,
									"name": "Allocated",
									"nameLocation": "5761:9:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "5787:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "5771:27:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5771:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5808:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "5800:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 558,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5800:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"indexed": false,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5824:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "5816:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5816:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5839:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "5831:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 562,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5831:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5770:76:2"
									},
									"src": "5755:92:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 566,
										"nodeType": "StructuredDocumentation",
										"src": "5853:223:2",
										"text": "@notice Emitted when tokens are distributed.\n @param recipientId The ID of the recipient\n @param recipientAddress The recipient\n @param amount The amount distributed\n @param sender The sender"
									},
									"eventSelector": "b5b51454adfa840bd593658325a60a50b0216f12eb5d2937efe6cea935675b7d",
									"id": 576,
									"name": "Distributed",
									"nameLocation": "6087:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 568,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "6115:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "6099:27:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 567,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6099:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 570,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipientAddress",
												"nameLocation": "6136:16:2",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "6128:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6128:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 572,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6162:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "6154:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 571,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6154:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 574,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "6178:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "6170:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 573,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6170:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6098:87:2"
									},
									"src": "6081:105:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 577,
										"nodeType": "StructuredDocumentation",
										"src": "6192:99:2",
										"text": "@notice Emitted when pool is set to active status.\n @param active The status of the pool"
									},
									"eventSelector": "d94c9bc4d43c51d8dc345a016d8e3d994432fac68e72832e4cf3a616bd8efae0",
									"id": 581,
									"name": "PoolActive",
									"nameLocation": "6302:10:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 579,
												"indexed": false,
												"mutability": "mutable",
												"name": "active",
												"nameLocation": "6318:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "6313:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 578,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6313:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6312:13:2"
									},
									"src": "6296:30:2"
								},
								{
									"documentation": {
										"id": 582,
										"nodeType": "StructuredDocumentation",
										"src": "6426:92:2",
										"text": "@notice Getter for the address of the Allo contract.\n @return The 'Allo' contract"
									},
									"functionSelector": "15cc481e",
									"id": 588,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAllo",
									"nameLocation": "6532:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6539:2:2"
									},
									"returnParameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "6565:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAllo_$328",
													"typeString": "contract IAllo"
												},
												"typeName": {
													"id": 585,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 584,
														"name": "IAllo",
														"nameLocations": [
															"6565:5:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "6565:5:2"
													},
													"referencedDeclaration": 328,
													"src": "6565:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAllo_$328",
														"typeString": "contract IAllo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6564:7:2"
									},
									"scope": 687,
									"src": "6523:49:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "6578:89:2",
										"text": "@notice Getter for the 'poolId' for this strategy.\n @return The ID of the pool"
									},
									"functionSelector": "38fff2d0",
									"id": 594,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolId",
									"nameLocation": "6681:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6690:2:2"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "6716:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 591,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6716:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6715:9:2"
									},
									"scope": 687,
									"src": "6672:53:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 595,
										"nodeType": "StructuredDocumentation",
										"src": "6731:87:2",
										"text": "@notice Getter for the 'id' of the strategy.\n @return The ID of the strategy"
									},
									"functionSelector": "42fda9c7",
									"id": 600,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getStrategyId",
									"nameLocation": "6832:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6845:2:2"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 600,
												"src": "6871:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 597,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6871:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6870:9:2"
									},
									"scope": 687,
									"src": "6823:57:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 601,
										"nodeType": "StructuredDocumentation",
										"src": "6886:259:2",
										"text": "@notice Checks whether a allocator is valid or not, will usually be true for all strategies\n      and will depend on the strategy implementation.\n @param _allocator The allocator to check\n @return Whether the allocator is valid or not"
									},
									"functionSelector": "4d31d087",
									"id": 608,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isValidAllocator",
									"nameLocation": "7159:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "_allocator",
												"nameLocation": "7184:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "7176:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 602,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7176:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7175:20:2"
									},
									"returnParameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "7219:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 605,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7219:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7218:6:2"
									},
									"scope": 687,
									"src": "7150:75:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 609,
										"nodeType": "StructuredDocumentation",
										"src": "7231:85:2",
										"text": "@notice whether pool is active.\n @return Whether the pool is active or not"
									},
									"functionSelector": "df868ed3",
									"id": 614,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolActive",
									"nameLocation": "7330:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7342:2:2"
									},
									"returnParameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 614,
												"src": "7363:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 611,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7363:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7362:6:2"
									},
									"scope": 687,
									"src": "7321:48:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 615,
										"nodeType": "StructuredDocumentation",
										"src": "7375:92:2",
										"text": "@notice Checks the amount of tokens in the pool.\n @return The balance of the pool"
									},
									"functionSelector": "4ab4ba42",
									"id": 620,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolAmount",
									"nameLocation": "7481:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7494:2:2"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "7520:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 617,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7520:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7519:9:2"
									},
									"scope": 687,
									"src": "7472:57:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 621,
										"nodeType": "StructuredDocumentation",
										"src": "7535:104:2",
										"text": "@notice Increases the balance of the pool.\n @param _amount The amount to increase the pool by"
									},
									"functionSelector": "f5b0dfb7",
									"id": 626,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increasePoolAmount",
									"nameLocation": "7653:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "7680:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 626,
												"src": "7672:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 622,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7672:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7671:17:2"
									},
									"returnParameters": {
										"id": 625,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7697:0:2"
									},
									"scope": 687,
									"src": "7644:54:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 627,
										"nodeType": "StructuredDocumentation",
										"src": "7704:382:2",
										"text": "@notice Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation\n      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those\n      since there is no need for Pending or Rejected.\n @param _recipientId The ID of the recipient\n @return The status of the recipient"
									},
									"functionSelector": "eb11af93",
									"id": 635,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRecipientStatus",
									"nameLocation": "8100:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "8127:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "8119:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 628,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8119:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8118:22:2"
									},
									"returnParameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "8164:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$533",
													"typeString": "enum IStrategy.Status"
												},
												"typeName": {
													"id": 632,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 631,
														"name": "Status",
														"nameLocations": [
															"8164:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 533,
														"src": "8164:6:2"
													},
													"referencedDeclaration": 533,
													"src": "8164:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$533",
														"typeString": "enum IStrategy.Status"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8163:8:2"
									},
									"scope": 687,
									"src": "8091:81:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 636,
										"nodeType": "StructuredDocumentation",
										"src": "8178:397:2",
										"text": "@notice Checks the amount allocated to a recipient for distribution.\n @dev Input the values you would send to distribute(), get the amounts each recipient in the array would receive.\n      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\n @param _recipientIds The IDs of the recipients\n @param _data The encoded data"
									},
									"functionSelector": "b2b878d0",
									"id": 649,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPayouts",
									"nameLocation": "8589:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "8617:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "8600:30:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 637,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "8600:7:2",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 638,
													"nodeType": "ArrayTypeName",
													"src": "8600:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "8647:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "8632:20:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 640,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "8632:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 641,
													"nodeType": "ArrayTypeName",
													"src": "8632:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8599:54:2"
									},
									"returnParameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "8701:22:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IStrategy.PayoutSummary[]"
												},
												"typeName": {
													"baseType": {
														"id": 645,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 644,
															"name": "PayoutSummary",
															"nameLocations": [
																"8701:13:2"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 538,
															"src": "8701:13:2"
														},
														"referencedDeclaration": 538,
														"src": "8701:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PayoutSummary_$538_storage_ptr",
															"typeString": "struct IStrategy.PayoutSummary"
														}
													},
													"id": 646,
													"nodeType": "ArrayTypeName",
													"src": "8701:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_storage_$dyn_storage_ptr",
														"typeString": "struct IStrategy.PayoutSummary[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8700:24:2"
									},
									"scope": 687,
									"src": "8580:145:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 650,
										"nodeType": "StructuredDocumentation",
										"src": "8825:270:2",
										"text": "@notice\n @dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,\n      use it, and then call super.initialize().\n @param _poolId The ID of the pool\n @param _data The encoded data"
									},
									"functionSelector": "edd146cc",
									"id": 657,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "9109:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "9128:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "9120:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 651,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9120:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "9150:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "9137:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 653,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9137:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9119:37:2"
									},
									"returnParameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9165:0:2"
									},
									"scope": 687,
									"src": "9100:66:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "9172:655:2",
										"text": "@notice This will register a recipient, set their status (and any other strategy specific values), and\n         return the ID of the recipient.\n @dev Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional\n      functions should be added to allow the owner to check this. The owner could also check attestations directly\n      and then accept for instance. The '_data' will be determined by the strategy implementation.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender\n @return The ID of the recipient"
									},
									"functionSelector": "2bbe0cae",
									"id": 667,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerRecipient",
									"nameLocation": "9841:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "9872:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "9859:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 659,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9859:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "9887:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "9879:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 661,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9879:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9858:37:2"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "9922:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 664,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9922:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9921:9:2"
									},
									"scope": 687,
									"src": "9832:99:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "9937:245:2",
										"text": "@notice This will allocate to a recipient.\n @dev The encoded '_data' will be determined by the strategy implementation.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"functionSelector": "ef2920fc",
									"id": 675,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allocate",
									"nameLocation": "10196:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10218:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "10205:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 669,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10205:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "10233:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "10225:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10225:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10204:37:2"
									},
									"returnParameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10258:0:2"
									},
									"scope": 687,
									"src": "10187:72:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "10265:271:2",
										"text": "@notice This will distribute funds (tokens) to recipients.\n @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\n this contract will need to track the amount paid already, so that it doesn't double pay."
									},
									"functionSelector": "0a6f0ee9",
									"id": 686,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nameLocation": "10550:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "10578:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "10561:30:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 677,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10561:7:2",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 678,
													"nodeType": "ArrayTypeName",
													"src": "10561:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10606:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "10593:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 680,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10593:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "10621:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "10613:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 682,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10613:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10560:69:2"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10638:0:2"
									},
									"scope": 687,
									"src": "10541:98:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 688,
							"src": "4478:6163:2",
							"usedErrors": []
						}
					],
					"src": "42:10600:2"
				},
				"id": 2
			},
			"lib/allo-v2/contracts/core/libraries/Errors.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/contracts/core/libraries/Errors.sol",
					"exportedSymbols": {
						"Errors": [
							780
						]
					},
					"id": 781,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 689,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Errors",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 690,
								"nodeType": "StructuredDocumentation",
								"src": "4058:211:3",
								"text": "@title Errors\n @author @thelostone-mc <aditya@gitcoin.co>, @KurtMerbeth <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>\n @notice Library containing all custom errors the protocol may revert with."
							},
							"fullyImplemented": true,
							"id": 780,
							"linearizedBaseContracts": [
								780
							],
							"name": "Errors",
							"nameLocation": "4278:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "4385:66:3",
										"text": "@notice Thrown as a general error when input / data is invalid"
									},
									"errorSelector": "7fcce2a9",
									"id": 693,
									"name": "INVALID",
									"nameLocation": "4462:7:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4469:2:3"
									},
									"src": "4456:16:3"
								},
								{
									"documentation": {
										"id": 694,
										"nodeType": "StructuredDocumentation",
										"src": "4478:49:3",
										"text": "@notice Thrown when mismatch in decoding data"
									},
									"errorSelector": "636e39bb",
									"id": 696,
									"name": "MISMATCH",
									"nameLocation": "4538:8:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4546:2:3"
									},
									"src": "4532:17:3"
								},
								{
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "4555:54:3",
										"text": "@notice Thrown when not enough funds are available"
									},
									"errorSelector": "1f04ddc8",
									"id": 699,
									"name": "NOT_ENOUGH_FUNDS",
									"nameLocation": "4620:16:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 698,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4636:2:3"
									},
									"src": "4614:25:3"
								},
								{
									"documentation": {
										"id": 700,
										"nodeType": "StructuredDocumentation",
										"src": "4645:46:3",
										"text": "@notice Thrown when user is not authorized"
									},
									"errorSelector": "075fd2b1",
									"id": 702,
									"name": "UNAUTHORIZED",
									"nameLocation": "4702:12:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4714:2:3"
									},
									"src": "4696:21:3"
								},
								{
									"documentation": {
										"id": 703,
										"nodeType": "StructuredDocumentation",
										"src": "4723:51:3",
										"text": "@notice Thrown when address is the zero address"
									},
									"errorSelector": "538ba4f9",
									"id": 705,
									"name": "ZERO_ADDRESS",
									"nameLocation": "4785:12:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4797:2:3"
									},
									"src": "4779:21:3"
								},
								{
									"documentation": {
										"id": 706,
										"nodeType": "StructuredDocumentation",
										"src": "4806:55:3",
										"text": "@notice Thrown when the function is not implemented"
									},
									"errorSelector": "43f6e4ab",
									"id": 708,
									"name": "NOT_IMPLEMENTED",
									"nameLocation": "4872:15:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4887:2:3"
									},
									"src": "4866:24:3"
								},
								{
									"documentation": {
										"id": 709,
										"nodeType": "StructuredDocumentation",
										"src": "4896:45:3",
										"text": "@notice Thrown when the value is non-zero"
									},
									"errorSelector": "22d8ddab",
									"id": 711,
									"name": "NON_ZERO_VALUE",
									"nameLocation": "4952:14:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4966:2:3"
									},
									"src": "4946:23:3"
								},
								{
									"documentation": {
										"id": 712,
										"nodeType": "StructuredDocumentation",
										"src": "5069:68:3",
										"text": "@dev Thrown when the nonce passed has been used or not available"
									},
									"errorSelector": "527e0590",
									"id": 714,
									"name": "NONCE_NOT_AVAILABLE",
									"nameLocation": "5148:19:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 713,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5167:2:3"
									},
									"src": "5142:28:3"
								},
								{
									"documentation": {
										"id": 715,
										"nodeType": "StructuredDocumentation",
										"src": "5176:84:3",
										"text": "@dev Thrown when the 'msg.sender' is not the pending owner on ownership transfer"
									},
									"errorSelector": "b4d48c10",
									"id": 717,
									"name": "NOT_PENDING_OWNER",
									"nameLocation": "5271:17:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5288:2:3"
									},
									"src": "5265:26:3"
								},
								{
									"documentation": {
										"id": 718,
										"nodeType": "StructuredDocumentation",
										"src": "5297:44:3",
										"text": "@dev Thrown if the anchor creation fails"
									},
									"errorSelector": "113b81f0",
									"id": 720,
									"name": "ANCHOR_ERROR",
									"nameLocation": "5352:12:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 719,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5364:2:3"
									},
									"src": "5346:21:3"
								},
								{
									"documentation": {
										"id": 721,
										"nodeType": "StructuredDocumentation",
										"src": "5467:52:3",
										"text": "@notice Thrown when the strategy is not approved"
									},
									"errorSelector": "93699238",
									"id": 723,
									"name": "NOT_APPROVED_STRATEGY",
									"nameLocation": "5530:21:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5551:2:3"
									},
									"src": "5524:30:3"
								},
								{
									"documentation": {
										"id": 724,
										"nodeType": "StructuredDocumentation",
										"src": "5560:69:3",
										"text": "@notice Thrown when the strategy is approved and should be cloned"
									},
									"errorSelector": "eeffa721",
									"id": 726,
									"name": "IS_APPROVED_STRATEGY",
									"nameLocation": "5640:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5660:2:3"
									},
									"src": "5634:29:3"
								},
								{
									"documentation": {
										"id": 727,
										"nodeType": "StructuredDocumentation",
										"src": "5669:85:3",
										"text": "@notice Thrown when the fee is below 1e18 which is the fee percentage denominator"
									},
									"errorSelector": "2fb15b87",
									"id": 729,
									"name": "INVALID_FEE",
									"nameLocation": "5765:11:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 728,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5776:2:3"
									},
									"src": "5759:20:3"
								},
								{
									"documentation": {
										"id": 730,
										"nodeType": "StructuredDocumentation",
										"src": "5879:50:3",
										"text": "@notice Thrown when data is already intialized"
									},
									"errorSelector": "439a74c9",
									"id": 732,
									"name": "ALREADY_INITIALIZED",
									"nameLocation": "5940:19:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5959:2:3"
									},
									"src": "5934:28:3"
								},
								{
									"documentation": {
										"id": 733,
										"nodeType": "StructuredDocumentation",
										"src": "5968:53:3",
										"text": "@notice Thrown when data is yet to be initialized"
									},
									"errorSelector": "3da3f98c",
									"id": 735,
									"name": "NOT_INITIALIZED",
									"nameLocation": "6032:15:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6047:2:3"
									},
									"src": "6026:24:3"
								},
								{
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "6056:50:3",
										"text": "@notice Thrown when an invalid address is used"
									},
									"errorSelector": "5963709b",
									"id": 738,
									"name": "INVALID_ADDRESS",
									"nameLocation": "6117:15:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6132:2:3"
									},
									"src": "6111:24:3"
								},
								{
									"documentation": {
										"id": 739,
										"nodeType": "StructuredDocumentation",
										"src": "6141:42:3",
										"text": "@notice Thrown when a pool is inactive"
									},
									"errorSelector": "cfe7975b",
									"id": 741,
									"name": "POOL_INACTIVE",
									"nameLocation": "6194:13:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6207:2:3"
									},
									"src": "6188:22:3"
								},
								{
									"documentation": {
										"id": 742,
										"nodeType": "StructuredDocumentation",
										"src": "6216:48:3",
										"text": "@notice Thrown when a pool is already active"
									},
									"errorSelector": "b1862670",
									"id": 744,
									"name": "POOL_ACTIVE",
									"nameLocation": "6275:11:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6286:2:3"
									},
									"src": "6269:20:3"
								},
								{
									"documentation": {
										"id": 745,
										"nodeType": "StructuredDocumentation",
										"src": "6295:55:3",
										"text": "@notice Thrown when two arrays length are not equal"
									},
									"errorSelector": "7b498056",
									"id": 747,
									"name": "ARRAY_MISMATCH",
									"nameLocation": "6361:14:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 746,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6375:2:3"
									},
									"src": "6355:23:3"
								},
								{
									"documentation": {
										"id": 748,
										"nodeType": "StructuredDocumentation",
										"src": "6384:52:3",
										"text": "@notice Thrown when the registration is invalid."
									},
									"errorSelector": "03b167dd",
									"id": 750,
									"name": "INVALID_REGISTRATION",
									"nameLocation": "6447:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6467:2:3"
									},
									"src": "6441:29:3"
								},
								{
									"documentation": {
										"id": 751,
										"nodeType": "StructuredDocumentation",
										"src": "6476:48:3",
										"text": "@notice Thrown when the metadata is invalid."
									},
									"errorSelector": "c19e07c5",
									"id": 753,
									"name": "INVALID_METADATA",
									"nameLocation": "6535:16:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6551:2:3"
									},
									"src": "6529:25:3"
								},
								{
									"documentation": {
										"id": 754,
										"nodeType": "StructuredDocumentation",
										"src": "6560:54:3",
										"text": "@notice Thrown when the recipient is not accepted."
									},
									"errorSelector": "e4b05bec",
									"id": 756,
									"name": "RECIPIENT_NOT_ACCEPTED",
									"nameLocation": "6625:22:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6647:2:3"
									},
									"src": "6619:31:3"
								},
								{
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "6656:54:3",
										"text": "@notice Thrown when recipient is already accepted."
									},
									"errorSelector": "41d40fb8",
									"id": 759,
									"name": "RECIPIENT_ALREADY_ACCEPTED",
									"nameLocation": "6721:26:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6747:2:3"
									},
									"src": "6715:35:3"
								},
								{
									"documentation": {
										"id": 760,
										"nodeType": "StructuredDocumentation",
										"src": "6756:51:3",
										"text": "@notice Thrown when registration is not active."
									},
									"errorSelector": "b609ed5a",
									"id": 762,
									"name": "REGISTRATION_NOT_ACTIVE",
									"nameLocation": "6818:23:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6841:2:3"
									},
									"src": "6812:32:3"
								},
								{
									"documentation": {
										"id": 763,
										"nodeType": "StructuredDocumentation",
										"src": "6850:47:3",
										"text": "@notice Thrown when registration is active."
									},
									"errorSelector": "b99c70a8",
									"id": 765,
									"name": "REGISTRATION_ACTIVE",
									"nameLocation": "6908:19:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6927:2:3"
									},
									"src": "6902:28:3"
								},
								{
									"documentation": {
										"id": 766,
										"nodeType": "StructuredDocumentation",
										"src": "6936:55:3",
										"text": "@notice Thrown when there is an error in recipient."
									},
									"errorSelector": "f4a513b9",
									"id": 770,
									"name": "RECIPIENT_ERROR",
									"nameLocation": "7002:15:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "7026:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "7018:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 767,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7018:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7017:21:3"
									},
									"src": "6996:43:3"
								},
								{
									"documentation": {
										"id": 771,
										"nodeType": "StructuredDocumentation",
										"src": "7045:53:3",
										"text": "@notice Thrown when the allocation is not active."
									},
									"errorSelector": "b828c900",
									"id": 773,
									"name": "ALLOCATION_NOT_ACTIVE",
									"nameLocation": "7109:21:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7130:2:3"
									},
									"src": "7103:30:3"
								},
								{
									"documentation": {
										"id": 774,
										"nodeType": "StructuredDocumentation",
										"src": "7139:52:3",
										"text": "@notice Thrown when the allocation is not ended."
									},
									"errorSelector": "8a879da2",
									"id": 776,
									"name": "ALLOCATION_NOT_ENDED",
									"nameLocation": "7202:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7222:2:3"
									},
									"src": "7196:29:3"
								},
								{
									"documentation": {
										"id": 777,
										"nodeType": "StructuredDocumentation",
										"src": "7231:49:3",
										"text": "@notice Thrown when the allocation is active."
									},
									"errorSelector": "077c7060",
									"id": 779,
									"name": "ALLOCATION_ACTIVE",
									"nameLocation": "7291:17:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7308:2:3"
									},
									"src": "7285:26:3"
								}
							],
							"scope": 781,
							"src": "4269:3044:3",
							"usedErrors": [
								693,
								696,
								699,
								702,
								705,
								708,
								711,
								714,
								717,
								720,
								723,
								726,
								729,
								732,
								735,
								738,
								741,
								744,
								747,
								750,
								753,
								756,
								759,
								762,
								765,
								770,
								773,
								776,
								779
							]
						}
					],
					"src": "42:7272:3"
				},
				"id": 3
			},
			"lib/allo-v2/contracts/core/libraries/Metadata.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/contracts/core/libraries/Metadata.sol",
					"exportedSymbols": {
						"Metadata": [
							789
						]
					},
					"id": 790,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 782,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:4"
						},
						{
							"canonicalName": "Metadata",
							"id": 789,
							"members": [
								{
									"constant": false,
									"id": 785,
									"mutability": "mutable",
									"name": "protocol",
									"nameLocation": "4473:8:4",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "4465:16:4",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 784,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "4465:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 788,
									"mutability": "mutable",
									"name": "pointer",
									"nameLocation": "4570:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "4563:14:4",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 787,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "4563:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "Metadata",
							"nameLocation": "4358:8:4",
							"nodeType": "StructDefinition",
							"scope": 790,
							"src": "4351:229:4",
							"visibility": "public"
						}
					],
					"src": "42:4539:4"
				},
				"id": 4
			},
			"lib/allo-v2/contracts/core/libraries/Native.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/contracts/core/libraries/Native.sol",
					"exportedSymbols": {
						"Native": [
							797
						]
					},
					"id": 798,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 791,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Native",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 792,
								"nodeType": "StructuredDocumentation",
								"src": "4058:288:5",
								"text": "@title Native token information\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice This is used to define the address of the native token for the protocol"
							},
							"fullyImplemented": true,
							"id": 797,
							"linearizedBaseContracts": [
								797
							],
							"name": "Native",
							"nameLocation": "4355:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "4368:39:5",
										"text": "@notice Address of the native token"
									},
									"functionSelector": "a0cf0aea",
									"id": 796,
									"mutability": "constant",
									"name": "NATIVE",
									"nameLocation": "4436:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 797,
									"src": "4412:75:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 794,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "4412:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307845656565654565656545654565654565456545656545454565656565456565656565656545456545",
										"id": 795,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "4445:42:5",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
									},
									"visibility": "public"
								}
							],
							"scope": 798,
							"src": "4346:144:5",
							"usedErrors": []
						}
					],
					"src": "42:4449:5"
				},
				"id": 5
			},
			"lib/allo-v2/contracts/core/libraries/Transfer.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/contracts/core/libraries/Transfer.sol",
					"exportedSymbols": {
						"Native": [
							797
						],
						"SafeTransferLib": [
							2792
						],
						"Transfer": [
							1008
						]
					},
					"id": 1009,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 799,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:6"
						},
						{
							"absolutePath": "lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol",
							"file": "solady/utils/SafeTransferLib.sol",
							"id": 801,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1009,
							"sourceUnit": 2793,
							"src": "89:65:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 800,
										"name": "SafeTransferLib",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2792,
										"src": "97:15:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/contracts/core/libraries/Native.sol",
							"file": "./Native.sol",
							"id": 802,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1009,
							"sourceUnit": 798,
							"src": "177:22:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 804,
										"name": "Native",
										"nameLocations": [
											"4534:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 797,
										"src": "4534:6:6"
									},
									"id": 805,
									"nodeType": "InheritanceSpecifier",
									"src": "4534:6:6"
								}
							],
							"canonicalName": "Transfer",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 803,
								"nodeType": "StructuredDocumentation",
								"src": "4192:321:6",
								"text": "@title Transfer contract\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice A helper contract to transfer tokens within Allo protocol\n @dev Handles the transfer of tokens to an address"
							},
							"fullyImplemented": true,
							"id": 1008,
							"linearizedBaseContracts": [
								1008,
								797
							],
							"name": "Transfer",
							"nameLocation": "4522:8:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 806,
										"nodeType": "StructuredDocumentation",
										"src": "4547:94:6",
										"text": "@notice Thrown when the amount of tokens sent does not match the amount of tokens expected"
									},
									"errorSelector": "74c5672b",
									"id": 808,
									"name": "AMOUNT_MISMATCH",
									"nameLocation": "4652:15:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4667:2:6"
									},
									"src": "4646:24:6"
								},
								{
									"canonicalName": "Transfer.TransferData",
									"id": 815,
									"members": [
										{
											"constant": false,
											"id": 810,
											"mutability": "mutable",
											"name": "from",
											"nameLocation": "4768:4:6",
											"nodeType": "VariableDeclaration",
											"scope": 815,
											"src": "4760:12:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 809,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4760:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 812,
											"mutability": "mutable",
											"name": "to",
											"nameLocation": "4790:2:6",
											"nodeType": "VariableDeclaration",
											"scope": 815,
											"src": "4782:10:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 811,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4782:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 814,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "4810:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 815,
											"src": "4802:14:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 813,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4802:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TransferData",
									"nameLocation": "4737:12:6",
									"nodeType": "StructDefinition",
									"scope": 1008,
									"src": "4730:93:6",
									"visibility": "public"
								},
								{
									"body": {
										"id": 893,
										"nodeType": "Block",
										"src": "5193:633:6",
										"statements": [
											{
												"assignments": [
													828
												],
												"declarations": [
													{
														"constant": false,
														"id": 828,
														"mutability": "mutable",
														"name": "msgValue",
														"nameLocation": "5211:8:6",
														"nodeType": "VariableDeclaration",
														"scope": 893,
														"src": "5203:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 827,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5203:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 831,
												"initialValue": {
													"expression": {
														"id": 829,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "5222:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5226:5:6",
													"memberName": "value",
													"nodeType": "MemberAccess",
													"src": "5222:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5203:28:6"
											},
											{
												"body": {
													"id": 882,
													"nodeType": "Block",
													"src": "5285:459:6",
													"statements": [
														{
															"assignments": [
																841
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 841,
																	"mutability": "mutable",
																	"name": "transferData",
																	"nameLocation": "5319:12:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 882,
																	"src": "5299:32:6",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																		"typeString": "struct Transfer.TransferData"
																	},
																	"typeName": {
																		"id": 840,
																		"nodeType": "UserDefinedTypeName",
																		"pathNode": {
																			"id": 839,
																			"name": "TransferData",
																			"nameLocations": [
																				"5299:12:6"
																			],
																			"nodeType": "IdentifierPath",
																			"referencedDeclaration": 815,
																			"src": "5299:12:6"
																		},
																		"referencedDeclaration": 815,
																		"src": "5299:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_TransferData_$815_storage_ptr",
																			"typeString": "struct Transfer.TransferData"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 845,
															"initialValue": {
																"baseExpression": {
																	"id": 842,
																	"name": "_transferData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 822,
																	"src": "5334:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_TransferData_$815_memory_ptr_$dyn_memory_ptr",
																		"typeString": "struct Transfer.TransferData memory[] memory"
																	}
																},
																"id": 844,
																"indexExpression": {
																	"id": 843,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 833,
																	"src": "5348:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5334:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																	"typeString": "struct Transfer.TransferData memory"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5299:51:6"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 848,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 846,
																	"name": "_token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 818,
																	"src": "5369:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 847,
																	"name": "NATIVE",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 796,
																	"src": "5379:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "5369:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 876,
																"nodeType": "Block",
																"src": "5544:130:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 867,
																					"name": "_token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 818,
																					"src": "5595:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 868,
																						"name": "transferData",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 841,
																						"src": "5603:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																							"typeString": "struct Transfer.TransferData memory"
																						}
																					},
																					"id": 869,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "5616:4:6",
																					"memberName": "from",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 810,
																					"src": "5603:17:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 870,
																						"name": "transferData",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 841,
																						"src": "5622:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																							"typeString": "struct Transfer.TransferData memory"
																						}
																					},
																					"id": 871,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "5635:2:6",
																					"memberName": "to",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 812,
																					"src": "5622:15:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 872,
																						"name": "transferData",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 841,
																						"src": "5639:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																							"typeString": "struct Transfer.TransferData memory"
																						}
																					},
																					"id": 873,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "5652:6:6",
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 814,
																					"src": "5639:19:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 864,
																					"name": "SafeTransferLib",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2792,
																					"src": "5562:15:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SafeTransferLib_$2792_$",
																						"typeString": "type(library SafeTransferLib)"
																					}
																				},
																				"id": 866,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5578:16:6",
																				"memberName": "safeTransferFrom",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2717,
																				"src": "5562:32:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,address,address,uint256)"
																				}
																			},
																			"id": 874,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5562:97:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 875,
																		"nodeType": "ExpressionStatement",
																		"src": "5562:97:6"
																	}
																]
															},
															"id": 877,
															"nodeType": "IfStatement",
															"src": "5365:309:6",
															"trueBody": {
																"id": 863,
																"nodeType": "Block",
																"src": "5387:151:6",
																"statements": [
																	{
																		"expression": {
																			"id": 852,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 849,
																				"name": "msgValue",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 828,
																				"src": "5405:8:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "-=",
																			"rightHandSide": {
																				"expression": {
																					"id": 850,
																					"name": "transferData",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 841,
																					"src": "5417:12:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																						"typeString": "struct Transfer.TransferData memory"
																					}
																				},
																				"id": 851,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5430:6:6",
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 814,
																				"src": "5417:19:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5405:31:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 853,
																		"nodeType": "ExpressionStatement",
																		"src": "5405:31:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 857,
																						"name": "transferData",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 841,
																						"src": "5486:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																							"typeString": "struct Transfer.TransferData memory"
																						}
																					},
																					"id": 858,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "5499:2:6",
																					"memberName": "to",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 812,
																					"src": "5486:15:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 859,
																						"name": "transferData",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 841,
																						"src": "5503:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																							"typeString": "struct Transfer.TransferData memory"
																						}
																					},
																					"id": 860,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "5516:6:6",
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 814,
																					"src": "5503:19:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 854,
																					"name": "SafeTransferLib",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2792,
																					"src": "5454:15:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SafeTransferLib_$2792_$",
																						"typeString": "type(library SafeTransferLib)"
																					}
																				},
																				"id": 856,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5470:15:6",
																				"memberName": "safeTransferETH",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2667,
																				"src": "5454:31:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256)"
																				}
																			},
																			"id": 861,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5454:69:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 862,
																		"nodeType": "ExpressionStatement",
																		"src": "5454:69:6"
																	}
																]
															}
														},
														{
															"id": 881,
															"nodeType": "UncheckedBlock",
															"src": "5688:46:6",
															"statements": [
																{
																	"expression": {
																		"id": 879,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "5716:3:6",
																		"subExpression": {
																			"id": 878,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 833,
																			"src": "5716:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 880,
																	"nodeType": "ExpressionStatement",
																	"src": "5716:3:6"
																}
															]
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 835,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 833,
														"src": "5258:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 836,
															"name": "_transferData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 822,
															"src": "5262:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_TransferData_$815_memory_ptr_$dyn_memory_ptr",
																"typeString": "struct Transfer.TransferData memory[] memory"
															}
														},
														"id": 837,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5276:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5262:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5258:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 883,
												"initializationExpression": {
													"assignments": [
														833
													],
													"declarations": [
														{
															"constant": false,
															"id": 833,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "5255:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 883,
															"src": "5247:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 832,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "5247:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 834,
													"nodeType": "VariableDeclarationStatement",
													"src": "5247:9:6"
												},
												"nodeType": "ForStatement",
												"src": "5242:502:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 884,
														"name": "msgValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 828,
														"src": "5758:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 885,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5770:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5758:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 890,
												"nodeType": "IfStatement",
												"src": "5754:43:6",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 887,
															"name": "AMOUNT_MISMATCH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "5780:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5780:17:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 889,
													"nodeType": "RevertStatement",
													"src": "5773:24:6"
												}
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 891,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5815:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 826,
												"id": 892,
												"nodeType": "Return",
												"src": "5808:11:6"
											}
										]
									},
									"documentation": {
										"id": 816,
										"nodeType": "StructuredDocumentation",
										"src": "4829:216:6",
										"text": "@notice Transfer an amount of a token to an array of addresses\n @param _token The address of the token\n @param _transferData TransferData[]\n @return Whether the transfer was successful or not"
									},
									"id": 894,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferAmountsFrom",
									"nameLocation": "5059:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "5088:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "5080:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 817,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5080:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 822,
												"mutability": "mutable",
												"name": "_transferData",
												"nameLocation": "5118:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "5096:35:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_TransferData_$815_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct Transfer.TransferData[]"
												},
												"typeName": {
													"baseType": {
														"id": 820,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 819,
															"name": "TransferData",
															"nameLocations": [
																"5096:12:6"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 815,
															"src": "5096:12:6"
														},
														"referencedDeclaration": 815,
														"src": "5096:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TransferData_$815_storage_ptr",
															"typeString": "struct Transfer.TransferData"
														}
													},
													"id": 821,
													"nodeType": "ArrayTypeName",
													"src": "5096:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_TransferData_$815_storage_$dyn_storage_ptr",
														"typeString": "struct Transfer.TransferData[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5079:53:6"
									},
									"returnParameters": {
										"id": 826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "5183:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 824,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5183:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5182:6:6"
									},
									"scope": 1008,
									"src": "5050:776:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 945,
										"nodeType": "Block",
										"src": "6163:396:6",
										"statements": [
											{
												"assignments": [
													906
												],
												"declarations": [
													{
														"constant": false,
														"id": 906,
														"mutability": "mutable",
														"name": "amount",
														"nameLocation": "6181:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 945,
														"src": "6173:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 905,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6173:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 909,
												"initialValue": {
													"expression": {
														"id": 907,
														"name": "_transferData",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 900,
														"src": "6190:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
															"typeString": "struct Transfer.TransferData memory"
														}
													},
													"id": 908,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6204:6:6",
													"memberName": "amount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 814,
													"src": "6190:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6173:37:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 910,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 897,
														"src": "6224:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 911,
														"name": "NATIVE",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 796,
														"src": "6234:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6224:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 941,
													"nodeType": "Block",
													"src": "6421:111:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 933,
																		"name": "_token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 897,
																		"src": "6468:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 934,
																			"name": "_transferData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 900,
																			"src": "6476:13:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																				"typeString": "struct Transfer.TransferData memory"
																			}
																		},
																		"id": 935,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6490:4:6",
																		"memberName": "from",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 810,
																		"src": "6476:18:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 936,
																			"name": "_transferData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 900,
																			"src": "6496:13:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																				"typeString": "struct Transfer.TransferData memory"
																			}
																		},
																		"id": 937,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6510:2:6",
																		"memberName": "to",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 812,
																		"src": "6496:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 938,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 906,
																		"src": "6514:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 930,
																		"name": "SafeTransferLib",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2792,
																		"src": "6435:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeTransferLib_$2792_$",
																			"typeString": "type(library SafeTransferLib)"
																		}
																	},
																	"id": 932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6451:16:6",
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2717,
																	"src": "6435:32:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,address,uint256)"
																	}
																},
																"id": 939,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6435:86:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 940,
															"nodeType": "ExpressionStatement",
															"src": "6435:86:6"
														}
													]
												},
												"id": 942,
												"nodeType": "IfStatement",
												"src": "6220:312:6",
												"trueBody": {
													"id": 929,
													"nodeType": "Block",
													"src": "6242:173:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 916,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 913,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "6288:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 914,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6292:5:6",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"src": "6288:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 915,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 906,
																	"src": "6300:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6288:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 920,
															"nodeType": "IfStatement",
															"src": "6284:48:6",
															"trueBody": {
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 917,
																		"name": "AMOUNT_MISMATCH",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 808,
																		"src": "6315:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 918,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6315:17:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 919,
																"nodeType": "RevertStatement",
																"src": "6308:24:6"
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 924,
																			"name": "_transferData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 900,
																			"src": "6379:13:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
																				"typeString": "struct Transfer.TransferData memory"
																			}
																		},
																		"id": 925,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6393:2:6",
																		"memberName": "to",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 812,
																		"src": "6379:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 926,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 906,
																		"src": "6397:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 921,
																		"name": "SafeTransferLib",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2792,
																		"src": "6347:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeTransferLib_$2792_$",
																			"typeString": "type(library SafeTransferLib)"
																		}
																	},
																	"id": 923,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6363:15:6",
																	"memberName": "safeTransferETH",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2667,
																	"src": "6347:31:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6347:57:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 928,
															"nodeType": "ExpressionStatement",
															"src": "6347:57:6"
														}
													]
												}
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 943,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6548:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 904,
												"id": 944,
												"nodeType": "Return",
												"src": "6541:11:6"
											}
										]
									},
									"documentation": {
										"id": 895,
										"nodeType": "StructuredDocumentation",
										"src": "5832:214:6",
										"text": "@notice Transfer an amount of a token to an address\n @param _token The address of the token\n @param _transferData Individual TransferData\n @return Whether the transfer was successful or not"
									},
									"id": 946,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferAmountFrom",
									"nameLocation": "6060:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "6088:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "6080:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 896,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6080:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "_transferData",
												"nameLocation": "6116:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "6096:33:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TransferData_$815_memory_ptr",
													"typeString": "struct Transfer.TransferData"
												},
												"typeName": {
													"id": 899,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 898,
														"name": "TransferData",
														"nameLocations": [
															"6096:12:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 815,
														"src": "6096:12:6"
													},
													"referencedDeclaration": 815,
													"src": "6096:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TransferData_$815_storage_ptr",
														"typeString": "struct Transfer.TransferData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6079:51:6"
									},
									"returnParameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "6157:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 902,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6157:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6156:6:6"
									},
									"scope": 1008,
									"src": "6051:508:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 977,
										"nodeType": "Block",
										"src": "6849:189:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 956,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 949,
														"src": "6863:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 957,
														"name": "NATIVE",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 796,
														"src": "6873:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6863:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 975,
													"nodeType": "Block",
													"src": "6957:75:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 970,
																		"name": "_token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 949,
																		"src": "7000:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 971,
																		"name": "_to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 951,
																		"src": "7008:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 972,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 953,
																		"src": "7013:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 967,
																		"name": "SafeTransferLib",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2792,
																		"src": "6971:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeTransferLib_$2792_$",
																			"typeString": "type(library SafeTransferLib)"
																		}
																	},
																	"id": 969,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6987:12:6",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2743,
																	"src": "6971:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 973,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6971:50:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 974,
															"nodeType": "ExpressionStatement",
															"src": "6971:50:6"
														}
													]
												},
												"id": 976,
												"nodeType": "IfStatement",
												"src": "6859:173:6",
												"trueBody": {
													"id": 966,
													"nodeType": "Block",
													"src": "6881:70:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 962,
																		"name": "_to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 951,
																		"src": "6927:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 963,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 953,
																		"src": "6932:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 959,
																		"name": "SafeTransferLib",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2792,
																		"src": "6895:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeTransferLib_$2792_$",
																			"typeString": "type(library SafeTransferLib)"
																		}
																	},
																	"id": 961,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6911:15:6",
																	"memberName": "safeTransferETH",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2667,
																	"src": "6895:31:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 964,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6895:45:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 965,
															"nodeType": "ExpressionStatement",
															"src": "6895:45:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 947,
										"nodeType": "StructuredDocumentation",
										"src": "6565:191:6",
										"text": "@notice Transfer an amount of a token to an address\n @param _token The token to transfer\n @param _to The address to transfer to\n @param _amount The amount to transfer"
									},
									"id": 978,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferAmount",
									"nameLocation": "6770:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "6794:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "6786:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 948,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6786:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "6810:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "6802:11:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "6823:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "6815:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 952,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6815:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6785:46:6"
									},
									"returnParameters": {
										"id": 955,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6849:0:6"
									},
									"scope": 1008,
									"src": "6761:277:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1006,
										"nodeType": "Block",
										"src": "7359:176:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 988,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 981,
														"src": "7373:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 989,
														"name": "NATIVE",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 796,
														"src": "7383:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7373:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1004,
													"nodeType": "Block",
													"src": "7454:75:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1000,
																		"name": "_token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 981,
																		"src": "7501:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1001,
																		"name": "_account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 983,
																		"src": "7509:8:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 998,
																		"name": "SafeTransferLib",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2792,
																		"src": "7475:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeTransferLib_$2792_$",
																			"typeString": "type(library SafeTransferLib)"
																		}
																	},
																	"id": 999,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7491:9:6",
																	"memberName": "balanceOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2791,
																	"src": "7475:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 1002,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7475:43:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 987,
															"id": 1003,
															"nodeType": "Return",
															"src": "7468:50:6"
														}
													]
												},
												"id": 1005,
												"nodeType": "IfStatement",
												"src": "7369:160:6",
												"trueBody": {
													"id": 997,
													"nodeType": "Block",
													"src": "7391:57:6",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 993,
																			"name": "_account",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 983,
																			"src": "7420:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 992,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7412:8:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_payable_$",
																			"typeString": "type(address payable)"
																		},
																		"typeName": {
																			"id": 991,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "7412:8:6",
																			"stateMutability": "payable",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 994,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7412:17:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"id": 995,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7430:7:6",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "7412:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 987,
															"id": 996,
															"nodeType": "Return",
															"src": "7405:32:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 979,
										"nodeType": "StructuredDocumentation",
										"src": "7044:223:6",
										"text": "@notice Get the balance of a token for an account\n @param _token The token to get the balance of\n @param _account The account to get the balance for\n @return The balance of the token for the account"
									},
									"id": 1007,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getBalance",
									"nameLocation": "7281:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 981,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "7301:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "7293:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 980,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7293:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "_account",
												"nameLocation": "7317:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "7309:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 982,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7309:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7292:34:6"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "7350:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 985,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7350:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7349:9:6"
									},
									"scope": 1008,
									"src": "7272:263:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1009,
							"src": "4513:3024:6",
							"usedErrors": [
								808
							]
						}
					],
					"src": "42:7496:6"
				},
				"id": 6
			},
			"lib/allo-v2/contracts/strategies/BaseStrategy.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/contracts/strategies/BaseStrategy.sol",
					"exportedSymbols": {
						"BaseStrategy": [
							1614
						],
						"Errors": [
							780
						],
						"IAllo": [
							328
						],
						"IStrategy": [
							687
						],
						"Transfer": [
							1008
						]
					},
					"id": 1615,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1010,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "42:24:7"
						},
						{
							"absolutePath": "lib/allo-v2/contracts/core/interfaces/IStrategy.sol",
							"file": "../core/interfaces/IStrategy.sol",
							"id": 1011,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1615,
							"sourceUnit": 688,
							"src": "82:42:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/contracts/core/libraries/Transfer.sol",
							"file": "../core/libraries/Transfer.sol",
							"id": 1013,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1615,
							"sourceUnit": 1009,
							"src": "139:56:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1012,
										"name": "Transfer",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1008,
										"src": "147:8:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/contracts/core/libraries/Errors.sol",
							"file": "../core/libraries/Errors.sol",
							"id": 1015,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1615,
							"sourceUnit": 781,
							"src": "196:52:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1014,
										"name": "Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 780,
										"src": "204:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1017,
										"name": "IStrategy",
										"nameLocations": [
											"4599:9:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 687,
										"src": "4599:9:7"
									},
									"id": 1018,
									"nodeType": "InheritanceSpecifier",
									"src": "4599:9:7"
								},
								{
									"baseName": {
										"id": 1019,
										"name": "Transfer",
										"nameLocations": [
											"4610:8:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1008,
										"src": "4610:8:7"
									},
									"id": 1020,
									"nodeType": "InheritanceSpecifier",
									"src": "4610:8:7"
								},
								{
									"baseName": {
										"id": 1021,
										"name": "Errors",
										"nameLocations": [
											"4620:6:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 780,
										"src": "4620:6:7"
									},
									"id": 1022,
									"nodeType": "InheritanceSpecifier",
									"src": "4620:6:7"
								}
							],
							"canonicalName": "BaseStrategy",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1016,
								"nodeType": "StructuredDocumentation",
								"src": "4241:324:7",
								"text": "@title BaseStrategy Contract\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice This contract is the base contract for all strategies\n @dev This contract is implemented by all strategies."
							},
							"fullyImplemented": false,
							"id": 1614,
							"linearizedBaseContracts": [
								1614,
								780,
								1008,
								797,
								687
							],
							"name": "BaseStrategy",
							"nameLocation": "4583:12:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 1023,
										"nodeType": "StructuredDocumentation",
										"src": "4633:101:7",
										"text": "==========================\n === Storage Variables ====\n =========================="
									},
									"id": 1026,
									"mutability": "immutable",
									"name": "allo",
									"nameLocation": "4764:4:7",
									"nodeType": "VariableDeclaration",
									"scope": 1614,
									"src": "4739:29:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IAllo_$328",
										"typeString": "contract IAllo"
									},
									"typeName": {
										"id": 1025,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1024,
											"name": "IAllo",
											"nameLocations": [
												"4739:5:7"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 328,
											"src": "4739:5:7"
										},
										"referencedDeclaration": 328,
										"src": "4739:5:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IAllo_$328",
											"typeString": "contract IAllo"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1028,
									"mutability": "immutable",
									"name": "strategyId",
									"nameLocation": "4801:10:7",
									"nodeType": "VariableDeclaration",
									"scope": 1614,
									"src": "4774:37:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1027,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "4774:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1030,
									"mutability": "mutable",
									"name": "poolActive",
									"nameLocation": "4831:10:7",
									"nodeType": "VariableDeclaration",
									"scope": 1614,
									"src": "4817:24:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1029,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "4817:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1032,
									"mutability": "mutable",
									"name": "poolId",
									"nameLocation": "4864:6:7",
									"nodeType": "VariableDeclaration",
									"scope": 1614,
									"src": "4847:23:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1031,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "4847:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1034,
									"mutability": "mutable",
									"name": "poolAmount",
									"nameLocation": "4893:10:7",
									"nodeType": "VariableDeclaration",
									"scope": 1614,
									"src": "4876:27:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1033,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "4876:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1057,
										"nodeType": "Block",
										"src": "5258:87:7",
										"statements": [
											{
												"expression": {
													"id": 1046,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1042,
														"name": "allo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1026,
														"src": "5268:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAllo_$328",
															"typeString": "contract IAllo"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1044,
																"name": "_allo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1037,
																"src": "5281:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1043,
															"name": "IAllo",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 328,
															"src": "5275:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IAllo_$328_$",
																"typeString": "type(contract IAllo)"
															}
														},
														"id": 1045,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5275:12:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAllo_$328",
															"typeString": "contract IAllo"
														}
													},
													"src": "5268:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAllo_$328",
														"typeString": "contract IAllo"
													}
												},
												"id": 1047,
												"nodeType": "ExpressionStatement",
												"src": "5268:19:7"
											},
											{
												"expression": {
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1048,
														"name": "strategyId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1028,
														"src": "5297:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1052,
																		"name": "_name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1039,
																		"src": "5331:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 1050,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "5320:3:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1051,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "5324:6:7",
																	"memberName": "encode",
																	"nodeType": "MemberAccess",
																	"src": "5320:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1053,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5320:17:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1049,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "5310:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1054,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5310:28:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "5297:41:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1056,
												"nodeType": "ExpressionStatement",
												"src": "5297:41:7"
											}
										]
									},
									"documentation": {
										"id": 1035,
										"nodeType": "StructuredDocumentation",
										"src": "5046:159:7",
										"text": "@notice Constructor to set the Allo contract and \"strategyId'.\n @param _allo Address of the Allo contract.\n @param _name Name of the strategy"
									},
									"id": 1058,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "_allo",
												"nameLocation": "5230:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "5222:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1036,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5222:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "_name",
												"nameLocation": "5251:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "5237:19:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1038,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5237:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5221:36:7"
									},
									"returnParameters": {
										"id": 1041,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5258:0:7"
									},
									"scope": 1614,
									"src": "5210:135:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1065,
										"nodeType": "Block",
										"src": "5650:44:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1061,
														"name": "_checkOnlyAllo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1408,
														"src": "5660:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5660:16:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1063,
												"nodeType": "ExpressionStatement",
												"src": "5660:16:7"
											},
											{
												"id": 1064,
												"nodeType": "PlaceholderStatement",
												"src": "5686:1:7"
											}
										]
									},
									"documentation": {
										"id": 1059,
										"nodeType": "StructuredDocumentation",
										"src": "5487:138:7",
										"text": "@notice Modifier to check if the 'msg.sender' is the Allo contract.\n @dev Reverts if the 'msg.sender' is not the Allo contract."
									},
									"id": 1066,
									"name": "onlyAllo",
									"nameLocation": "5639:8:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5647:2:7"
									},
									"src": "5630:64:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1076,
										"nodeType": "Block",
										"src": "5944:58:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1072,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1069,
															"src": "5976:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1071,
														"name": "_checkOnlyPoolManager",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1425,
														"src": "5954:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$__$",
															"typeString": "function (address) view"
														}
													},
													"id": 1073,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5954:30:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1074,
												"nodeType": "ExpressionStatement",
												"src": "5954:30:7"
											},
											{
												"id": 1075,
												"nodeType": "PlaceholderStatement",
												"src": "5994:1:7"
											}
										]
									},
									"documentation": {
										"id": 1067,
										"nodeType": "StructuredDocumentation",
										"src": "5700:197:7",
										"text": "@notice Modifier to check if the '_sender' is a pool manager.\n @dev Reverts if the '_sender' is not a pool manager.\n @param _sender The address to check if they are a pool manager"
									},
									"id": 1077,
									"name": "onlyPoolManager",
									"nameLocation": "5911:15:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "5935:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "5927:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5926:17:7"
									},
									"src": "5902:100:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1084,
										"nodeType": "Block",
										"src": "6139:50:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1080,
														"name": "_checkOnlyActivePool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1436,
														"src": "6149:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1081,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6149:22:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1082,
												"nodeType": "ExpressionStatement",
												"src": "6149:22:7"
											},
											{
												"id": 1083,
												"nodeType": "PlaceholderStatement",
												"src": "6181:1:7"
											}
										]
									},
									"documentation": {
										"id": 1078,
										"nodeType": "StructuredDocumentation",
										"src": "6008:100:7",
										"text": "@notice Modifier to check if the pool is active.\n @dev Reverts if the pool is not active."
									},
									"id": 1085,
									"name": "onlyActivePool",
									"nameLocation": "6122:14:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1079,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6136:2:7"
									},
									"src": "6113:76:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1092,
										"nodeType": "Block",
										"src": "6326:48:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1088,
														"name": "_checkInactivePool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1446,
														"src": "6336:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1089,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6336:20:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1090,
												"nodeType": "ExpressionStatement",
												"src": "6336:20:7"
											},
											{
												"id": 1091,
												"nodeType": "PlaceholderStatement",
												"src": "6366:1:7"
											}
										]
									},
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "6195:98:7",
										"text": "@notice Modifier to check if the pool is inactive.\n @dev Reverts if the pool is active."
									},
									"id": 1093,
									"name": "onlyInactivePool",
									"nameLocation": "6307:16:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6323:2:7"
									},
									"src": "6298:76:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1100,
										"nodeType": "Block",
										"src": "6522:51:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1096,
														"name": "_checkOnlyInitialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1458,
														"src": "6532:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1097,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6532:23:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1098,
												"nodeType": "ExpressionStatement",
												"src": "6532:23:7"
											},
											{
												"id": 1099,
												"nodeType": "PlaceholderStatement",
												"src": "6565:1:7"
											}
										]
									},
									"documentation": {
										"id": 1094,
										"nodeType": "StructuredDocumentation",
										"src": "6380:110:7",
										"text": "@notice Modifier to check if the pool is initialized.\n @dev Reverts if the pool is not initialized."
									},
									"id": 1101,
									"name": "onlyInitialized",
									"nameLocation": "6504:15:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6519:2:7"
									},
									"src": "6495:78:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										588
									],
									"body": {
										"id": 1111,
										"nodeType": "Block",
										"src": "6843:28:7",
										"statements": [
											{
												"expression": {
													"id": 1109,
													"name": "allo",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1026,
													"src": "6860:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAllo_$328",
														"typeString": "contract IAllo"
													}
												},
												"functionReturnParameters": 1108,
												"id": 1110,
												"nodeType": "Return",
												"src": "6853:11:7"
											}
										]
									},
									"documentation": {
										"id": 1102,
										"nodeType": "StructuredDocumentation",
										"src": "6703:77:7",
										"text": "@notice Getter for the 'Allo' contract.\n @return The Allo contract"
									},
									"functionSelector": "15cc481e",
									"id": 1112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAllo",
									"nameLocation": "6794:7:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1104,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6818:8:7"
									},
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6801:2:7"
									},
									"returnParameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "6836:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAllo_$328",
													"typeString": "contract IAllo"
												},
												"typeName": {
													"id": 1106,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1105,
														"name": "IAllo",
														"nameLocations": [
															"6836:5:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "6836:5:7"
													},
													"referencedDeclaration": 328,
													"src": "6836:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAllo_$328",
														"typeString": "contract IAllo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6835:7:7"
									},
									"scope": 1614,
									"src": "6785:86:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										594
									],
									"body": {
										"id": 1121,
										"nodeType": "Block",
										"src": "7015:30:7",
										"statements": [
											{
												"expression": {
													"id": 1119,
													"name": "poolId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1032,
													"src": "7032:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1118,
												"id": 1120,
												"nodeType": "Return",
												"src": "7025:13:7"
											}
										]
									},
									"documentation": {
										"id": 1113,
										"nodeType": "StructuredDocumentation",
										"src": "6877:71:7",
										"text": "@notice Getter for the 'poolId'.\n @return The ID of the pool"
									},
									"functionSelector": "38fff2d0",
									"id": 1122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolId",
									"nameLocation": "6962:9:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1115,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6988:8:7"
									},
									"parameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6971:2:7"
									},
									"returnParameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "7006:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7006:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7005:9:7"
									},
									"scope": 1614,
									"src": "6953:92:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										600
									],
									"body": {
										"id": 1131,
										"nodeType": "Block",
										"src": "7201:34:7",
										"statements": [
											{
												"expression": {
													"id": 1129,
													"name": "strategyId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1028,
													"src": "7218:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1128,
												"id": 1130,
												"nodeType": "Return",
												"src": "7211:17:7"
											}
										]
									},
									"documentation": {
										"id": 1123,
										"nodeType": "StructuredDocumentation",
										"src": "7051:79:7",
										"text": "@notice Getter for the 'strategyId'.\n @return The ID of the strategy"
									},
									"functionSelector": "42fda9c7",
									"id": 1132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStrategyId",
									"nameLocation": "7144:13:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1125,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7174:8:7"
									},
									"parameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7157:2:7"
									},
									"returnParameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "7192:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1126,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7192:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7191:9:7"
									},
									"scope": 1614,
									"src": "7135:100:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										620
									],
									"body": {
										"id": 1141,
										"nodeType": "Block",
										"src": "7400:34:7",
										"statements": [
											{
												"expression": {
													"id": 1139,
													"name": "poolAmount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1034,
													"src": "7417:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1138,
												"id": 1140,
												"nodeType": "Return",
												"src": "7410:17:7"
											}
										]
									},
									"documentation": {
										"id": 1133,
										"nodeType": "StructuredDocumentation",
										"src": "7241:80:7",
										"text": "@notice Getter for the 'poolAmount'.\n @return The balance of the pool"
									},
									"functionSelector": "4ab4ba42",
									"id": 1142,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolAmount",
									"nameLocation": "7335:13:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1135,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7373:8:7"
									},
									"parameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7348:2:7"
									},
									"returnParameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1142,
												"src": "7391:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7391:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7390:9:7"
									},
									"scope": 1614,
									"src": "7326:108:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										614
									],
									"body": {
										"id": 1152,
										"nodeType": "Block",
										"src": "7628:39:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1149,
														"name": "_isPoolActive",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1482,
														"src": "7645:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
															"typeString": "function () view returns (bool)"
														}
													},
													"id": 1150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7645:15:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1148,
												"id": 1151,
												"nodeType": "Return",
												"src": "7638:22:7"
											}
										]
									},
									"documentation": {
										"id": 1143,
										"nodeType": "StructuredDocumentation",
										"src": "7440:121:7",
										"text": "@notice Getter for whether or not the pool is active.\n @return 'true' if the pool is active, otherwise 'false'"
									},
									"functionSelector": "df868ed3",
									"id": 1153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolActive",
									"nameLocation": "7575:12:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1145,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7604:8:7"
									},
									"parameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7587:2:7"
									},
									"returnParameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1153,
												"src": "7622:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1146,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7622:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7621:6:7"
									},
									"scope": 1614,
									"src": "7566:101:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										635
									],
									"body": {
										"id": 1166,
										"nodeType": "Block",
										"src": "7912:57:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1163,
															"name": "_recipientId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1156,
															"src": "7949:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1162,
														"name": "_getRecipientStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1539,
														"src": "7929:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_enum$_Status_$533_$",
															"typeString": "function (address) view returns (enum IStrategy.Status)"
														}
													},
													"id": 1164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7929:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$533",
														"typeString": "enum IStrategy.Status"
													}
												},
												"functionReturnParameters": 1161,
												"id": 1165,
												"nodeType": "Return",
												"src": "7922:40:7"
											}
										]
									},
									"documentation": {
										"id": 1154,
										"nodeType": "StructuredDocumentation",
										"src": "7673:145:7",
										"text": "@notice Getter for the status of a recipient.\n @param _recipientId The ID of the recipient\n @return The status of the recipient"
									},
									"functionSelector": "eb11af93",
									"id": 1167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRecipientStatus",
									"nameLocation": "7832:18:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "7859:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "7851:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7851:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7850:22:7"
									},
									"returnParameters": {
										"id": 1161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1160,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "7904:6:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$533",
													"typeString": "enum IStrategy.Status"
												},
												"typeName": {
													"id": 1159,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1158,
														"name": "Status",
														"nameLocations": [
															"7904:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 533,
														"src": "7904:6:7"
													},
													"referencedDeclaration": 533,
													"src": "7904:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$533",
														"typeString": "enum IStrategy.Status"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7903:8:7"
									},
									"scope": 1614,
									"src": "7823:146:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1193,
										"nodeType": "Block",
										"src": "8341:278:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1175,
														"name": "poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "8428:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1176,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8438:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8428:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1181,
												"nodeType": "IfStatement",
												"src": "8424:45:7",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1178,
															"name": "ALREADY_INITIALIZED",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 732,
															"src": "8448:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1179,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8448:21:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1180,
													"nodeType": "RevertStatement",
													"src": "8441:28:7"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1182,
														"name": "_poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1170,
														"src": "8556:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1183,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8567:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8556:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1188,
												"nodeType": "IfStatement",
												"src": "8552:34:7",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1185,
															"name": "INVALID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "8577:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8577:9:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1187,
													"nodeType": "RevertStatement",
													"src": "8570:16:7"
												}
											},
											{
												"expression": {
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1189,
														"name": "poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "8596:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1190,
														"name": "_poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1170,
														"src": "8605:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8596:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1192,
												"nodeType": "ExpressionStatement",
												"src": "8596:16:7"
											}
										]
									},
									"documentation": {
										"id": 1168,
										"nodeType": "StructuredDocumentation",
										"src": "8111:153:7",
										"text": "@notice Initializes the 'Basetrategy'.\n @dev Will revert if the poolId is invalid or already initialized\n @param _poolId ID of the pool"
									},
									"id": 1194,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1173,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1172,
												"name": "onlyAllo",
												"nameLocations": [
													"8332:8:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1066,
												"src": "8332:8:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "8332:8:7"
										}
									],
									"name": "__BaseStrategy_init",
									"nameLocation": "8278:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1170,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "8306:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1194,
												"src": "8298:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8298:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8297:17:7"
									},
									"returnParameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8341:0:7"
									},
									"scope": 1614,
									"src": "8269:350:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										626
									],
									"body": {
										"id": 1215,
										"nodeType": "Block",
										"src": "8888:125:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1204,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1197,
															"src": "8924:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1203,
														"name": "_beforeIncreasePoolAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1546,
														"src": "8898:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8898:34:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1206,
												"nodeType": "ExpressionStatement",
												"src": "8898:34:7"
											},
											{
												"expression": {
													"id": 1209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1207,
														"name": "poolAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1034,
														"src": "8942:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1208,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1197,
														"src": "8956:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8942:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1210,
												"nodeType": "ExpressionStatement",
												"src": "8942:21:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1212,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1197,
															"src": "8998:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1211,
														"name": "_afterIncreasePoolAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1553,
														"src": "8973:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8973:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1214,
												"nodeType": "ExpressionStatement",
												"src": "8973:33:7"
											}
										]
									},
									"documentation": {
										"id": 1195,
										"nodeType": "StructuredDocumentation",
										"src": "8625:186:7",
										"text": "@notice Increases the pool amount.\n @dev Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.\n @param _amount The amount to increase the pool by"
									},
									"functionSelector": "f5b0dfb7",
									"id": 1216,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1201,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1200,
												"name": "onlyAllo",
												"nameLocations": [
													"8879:8:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1066,
												"src": "8879:8:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "8879:8:7"
										}
									],
									"name": "increasePoolAmount",
									"nameLocation": "8825:18:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1199,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8870:8:7"
									},
									"parameters": {
										"id": 1198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "8852:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1216,
												"src": "8844:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8844:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8843:17:7"
									},
									"returnParameters": {
										"id": 1202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8888:0:7"
									},
									"scope": 1614,
									"src": "8816:197:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										667
									],
									"body": {
										"id": 1247,
										"nodeType": "Block",
										"src": "9609:164:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1231,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "9644:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1232,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1221,
															"src": "9651:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1230,
														"name": "_beforeRegisterRecipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1562,
														"src": "9619:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 1233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9619:40:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1234,
												"nodeType": "ExpressionStatement",
												"src": "9619:40:7"
											},
											{
												"expression": {
													"id": 1240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1235,
														"name": "recipientId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1228,
														"src": "9669:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1237,
																"name": "_data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1219,
																"src": "9702:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															{
																"id": 1238,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1221,
																"src": "9709:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1236,
															"name": "_registerRecipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1500,
															"src": "9683:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$_t_address_$",
																"typeString": "function (bytes memory,address) returns (address)"
															}
														},
														"id": 1239,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9683:34:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9669:48:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1241,
												"nodeType": "ExpressionStatement",
												"src": "9669:48:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1243,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "9751:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1244,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1221,
															"src": "9758:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1242,
														"name": "_afterRegisterRecipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1571,
														"src": "9727:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 1245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9727:39:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1246,
												"nodeType": "ExpressionStatement",
												"src": "9727:39:7"
											}
										]
									},
									"documentation": {
										"id": 1217,
										"nodeType": "StructuredDocumentation",
										"src": "9019:405:7",
										"text": "@notice Registers a recipient.\n @dev Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the\n      strategy implementation. Only 'Allo' contract can call this when it is initialized.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender\n @return recipientId The recipientId"
									},
									"functionSelector": "2bbe0cae",
									"id": 1248,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1224,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1223,
												"name": "onlyAllo",
												"nameLocations": [
													"9534:8:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1066,
												"src": "9534:8:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "9534:8:7"
										},
										{
											"id": 1226,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1225,
												"name": "onlyInitialized",
												"nameLocations": [
													"9551:15:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1101,
												"src": "9551:15:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "9551:15:7"
										}
									],
									"name": "registerRecipient",
									"nameLocation": "9438:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1219,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "9469:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1248,
												"src": "9456:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1218,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9456:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "9484:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1248,
												"src": "9476:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1220,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9476:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9455:37:7"
									},
									"returnParameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "9592:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1248,
												"src": "9584:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9584:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9583:21:7"
									},
									"scope": 1614,
									"src": "9429:344:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										675
									],
									"body": {
										"id": 1275,
										"nodeType": "Block",
										"src": "10189:123:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1261,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1251,
															"src": "10215:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1262,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1253,
															"src": "10222:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1260,
														"name": "_beforeAllocate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1580,
														"src": "10199:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 1263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10199:31:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1264,
												"nodeType": "ExpressionStatement",
												"src": "10199:31:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1266,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1251,
															"src": "10250:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1267,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1253,
															"src": "10257:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1265,
														"name": "_allocate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1508,
														"src": "10240:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 1268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10240:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1269,
												"nodeType": "ExpressionStatement",
												"src": "10240:25:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1271,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1251,
															"src": "10290:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1272,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1253,
															"src": "10297:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1270,
														"name": "_afterAllocate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1589,
														"src": "10275:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10275:30:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1274,
												"nodeType": "ExpressionStatement",
												"src": "10275:30:7"
											}
										]
									},
									"documentation": {
										"id": 1249,
										"nodeType": "StructuredDocumentation",
										"src": "9779:308:7",
										"text": "@notice Allocates to a recipient.\n @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\n      call this when it is initialized.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"functionSelector": "ef2920fc",
									"id": 1276,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1256,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1255,
												"name": "onlyAllo",
												"nameLocations": [
													"10164:8:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1066,
												"src": "10164:8:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "10164:8:7"
										},
										{
											"id": 1258,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1257,
												"name": "onlyInitialized",
												"nameLocations": [
													"10173:15:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1101,
												"src": "10173:15:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "10173:15:7"
										}
									],
									"name": "allocate",
									"nameLocation": "10101:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10123:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "10110:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1250,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10110:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "10138:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "10130:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1252,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10130:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10109:37:7"
									},
									"returnParameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10189:0:7"
									},
									"scope": 1614,
									"src": "10092:220:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										686
									],
									"body": {
										"id": 1309,
										"nodeType": "Block",
										"src": "10856:174:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1292,
															"name": "_recipientIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1280,
															"src": "10884:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 1293,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "10899:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1294,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "10906:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1291,
														"name": "_beforeDistribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1601,
														"src": "10866:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (address[] memory,bytes memory,address)"
														}
													},
													"id": 1295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10866:48:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1296,
												"nodeType": "ExpressionStatement",
												"src": "10866:48:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1298,
															"name": "_recipientIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1280,
															"src": "10936:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 1299,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "10951:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1300,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "10958:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1297,
														"name": "_distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1519,
														"src": "10924:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (address[] memory,bytes memory,address)"
														}
													},
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10924:42:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1302,
												"nodeType": "ExpressionStatement",
												"src": "10924:42:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1304,
															"name": "_recipientIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1280,
															"src": "10993:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 1305,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "11008:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1306,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "11015:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1303,
														"name": "_afterDistribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1613,
														"src": "10976:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (address[] memory,bytes memory,address)"
														}
													},
													"id": 1307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10976:47:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1308,
												"nodeType": "ExpressionStatement",
												"src": "10976:47:7"
											}
										]
									},
									"documentation": {
										"id": 1277,
										"nodeType": "StructuredDocumentation",
										"src": "10318:382:7",
										"text": "@notice Distributes funds (tokens) to recipients.\n @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\n      call this when it is initialized.\n @param _recipientIds The IDs of the recipients\n @param _data The data to use to distribute to the recipients\n @param _sender The address of the sender"
									},
									"functionSelector": "0a6f0ee9",
									"id": 1310,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1287,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1286,
												"name": "onlyAllo",
												"nameLocations": [
													"10819:8:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1066,
												"src": "10819:8:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "10819:8:7"
										},
										{
											"id": 1289,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1288,
												"name": "onlyInitialized",
												"nameLocations": [
													"10836:15:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1101,
												"src": "10836:15:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "10836:15:7"
										}
									],
									"name": "distribute",
									"nameLocation": "10714:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "10742:13:7",
												"nodeType": "VariableDeclaration",
												"scope": 1310,
												"src": "10725:30:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1278,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10725:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1279,
													"nodeType": "ArrayTypeName",
													"src": "10725:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10770:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1310,
												"src": "10757:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1281,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10757:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "10785:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1310,
												"src": "10777:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10777:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10724:69:7"
									},
									"returnParameters": {
										"id": 1290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10856:0:7"
									},
									"scope": 1614,
									"src": "10705:325:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										649
									],
									"body": {
										"id": 1377,
										"nodeType": "Block",
										"src": "11549:522:7",
										"statements": [
											{
												"assignments": [
													1326
												],
												"declarations": [
													{
														"constant": false,
														"id": 1326,
														"mutability": "mutable",
														"name": "recipientLength",
														"nameLocation": "11567:15:7",
														"nodeType": "VariableDeclaration",
														"scope": 1377,
														"src": "11559:23:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1325,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11559:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1329,
												"initialValue": {
													"expression": {
														"id": 1327,
														"name": "_recipientIds",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1314,
														"src": "11585:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"id": 1328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "11599:6:7",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "11585:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11559:46:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1330,
														"name": "recipientLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1326,
														"src": "11722:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 1331,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1317,
															"src": "11741:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																"typeString": "bytes memory[] memory"
															}
														},
														"id": 1332,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11747:6:7",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "11741:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11722:31:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1337,
												"nodeType": "IfStatement",
												"src": "11718:60:7",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1334,
															"name": "ARRAY_MISMATCH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 747,
															"src": "11762:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1335,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11762:16:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1336,
													"nodeType": "RevertStatement",
													"src": "11755:23:7"
												}
											},
											{
												"assignments": [
													1342
												],
												"declarations": [
													{
														"constant": false,
														"id": 1342,
														"mutability": "mutable",
														"name": "payouts",
														"nameLocation": "11812:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1377,
														"src": "11789:30:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_memory_ptr_$dyn_memory_ptr",
															"typeString": "struct IStrategy.PayoutSummary[]"
														},
														"typeName": {
															"baseType": {
																"id": 1340,
																"nodeType": "UserDefinedTypeName",
																"pathNode": {
																	"id": 1339,
																	"name": "PayoutSummary",
																	"nameLocations": [
																		"11789:13:7"
																	],
																	"nodeType": "IdentifierPath",
																	"referencedDeclaration": 538,
																	"src": "11789:13:7"
																},
																"referencedDeclaration": 538,
																"src": "11789:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PayoutSummary_$538_storage_ptr",
																	"typeString": "struct IStrategy.PayoutSummary"
																}
															},
															"id": 1341,
															"nodeType": "ArrayTypeName",
															"src": "11789:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_storage_$dyn_storage_ptr",
																"typeString": "struct IStrategy.PayoutSummary[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1349,
												"initialValue": {
													"arguments": [
														{
															"id": 1347,
															"name": "recipientLength",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1326,
															"src": "11842:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1346,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "11822:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_PayoutSummary_$538_memory_ptr_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (struct IStrategy.PayoutSummary memory[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1344,
																"nodeType": "UserDefinedTypeName",
																"pathNode": {
																	"id": 1343,
																	"name": "PayoutSummary",
																	"nameLocations": [
																		"11826:13:7"
																	],
																	"nodeType": "IdentifierPath",
																	"referencedDeclaration": 538,
																	"src": "11826:13:7"
																},
																"referencedDeclaration": 538,
																"src": "11826:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PayoutSummary_$538_storage_ptr",
																	"typeString": "struct IStrategy.PayoutSummary"
																}
															},
															"id": 1345,
															"nodeType": "ArrayTypeName",
															"src": "11826:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_storage_$dyn_storage_ptr",
																"typeString": "struct IStrategy.PayoutSummary[]"
															}
														}
													},
													"id": 1348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11822:36:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_memory_ptr_$dyn_memory_ptr",
														"typeString": "struct IStrategy.PayoutSummary memory[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11789:69:7"
											},
											{
												"body": {
													"id": 1373,
													"nodeType": "Block",
													"src": "11906:135:7",
													"statements": [
														{
															"expression": {
																"id": 1367,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1356,
																		"name": "payouts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1342,
																		"src": "11920:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_memory_ptr_$dyn_memory_ptr",
																			"typeString": "struct IStrategy.PayoutSummary memory[] memory"
																		}
																	},
																	"id": 1358,
																	"indexExpression": {
																		"id": 1357,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1351,
																		"src": "11928:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "11920:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PayoutSummary_$538_memory_ptr",
																		"typeString": "struct IStrategy.PayoutSummary memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"baseExpression": {
																				"id": 1360,
																				"name": "_recipientIds",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1314,
																				"src": "11944:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																					"typeString": "address[] memory"
																				}
																			},
																			"id": 1362,
																			"indexExpression": {
																				"id": 1361,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1351,
																				"src": "11958:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "11944:16:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 1363,
																				"name": "_data",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1317,
																				"src": "11962:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																					"typeString": "bytes memory[] memory"
																				}
																			},
																			"id": 1365,
																			"indexExpression": {
																				"id": 1364,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1351,
																				"src": "11968:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "11962:8:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 1359,
																		"name": "_getPayout",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1530,
																		"src": "11933:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$returns$_t_struct$_PayoutSummary_$538_memory_ptr_$",
																			"typeString": "function (address,bytes memory) view returns (struct IStrategy.PayoutSummary memory)"
																		}
																	},
																	"id": 1366,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "11933:38:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PayoutSummary_$538_memory_ptr",
																		"typeString": "struct IStrategy.PayoutSummary memory"
																	}
																},
																"src": "11920:51:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PayoutSummary_$538_memory_ptr",
																	"typeString": "struct IStrategy.PayoutSummary memory"
																}
															},
															"id": 1368,
															"nodeType": "ExpressionStatement",
															"src": "11920:51:7"
														},
														{
															"id": 1372,
															"nodeType": "UncheckedBlock",
															"src": "11985:46:7",
															"statements": [
																{
																	"expression": {
																		"id": 1370,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "12013:3:7",
																		"subExpression": {
																			"id": 1369,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1351,
																			"src": "12013:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1371,
																	"nodeType": "ExpressionStatement",
																	"src": "12013:3:7"
																}
															]
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1353,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1351,
														"src": "11884:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1354,
														"name": "recipientLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1326,
														"src": "11888:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11884:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1374,
												"initializationExpression": {
													"assignments": [
														1351
													],
													"declarations": [
														{
															"constant": false,
															"id": 1351,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "11881:1:7",
															"nodeType": "VariableDeclaration",
															"scope": 1374,
															"src": "11873:9:7",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1350,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "11873:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1352,
													"nodeType": "VariableDeclarationStatement",
													"src": "11873:9:7"
												},
												"nodeType": "ForStatement",
												"src": "11868:173:7"
											},
											{
												"expression": {
													"id": 1375,
													"name": "payouts",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1342,
													"src": "12057:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_memory_ptr_$dyn_memory_ptr",
														"typeString": "struct IStrategy.PayoutSummary memory[] memory"
													}
												},
												"functionReturnParameters": 1324,
												"id": 1376,
												"nodeType": "Return",
												"src": "12050:14:7"
											}
										]
									},
									"documentation": {
										"id": 1311,
										"nodeType": "StructuredDocumentation",
										"src": "11036:326:7",
										"text": "@notice Gets the payout summary for recipients.\n @dev The encoded '_data' will be determined by the strategy implementation.\n @param _recipientIds The IDs of the recipients\n @param _data The data to use to get the payout summary for the recipients\n @return The payout summary for the recipients"
									},
									"functionSelector": "b2b878d0",
									"id": 1378,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPayouts",
									"nameLocation": "11376:10:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1319,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "11495:8:7"
									},
									"parameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1314,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "11404:13:7",
												"nodeType": "VariableDeclaration",
												"scope": 1378,
												"src": "11387:30:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1312,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11387:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1313,
													"nodeType": "ArrayTypeName",
													"src": "11387:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "11434:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1378,
												"src": "11419:20:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1315,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "11419:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1316,
													"nodeType": "ArrayTypeName",
													"src": "11419:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11386:54:7"
									},
									"returnParameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1378,
												"src": "11521:22:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IStrategy.PayoutSummary[]"
												},
												"typeName": {
													"baseType": {
														"id": 1321,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1320,
															"name": "PayoutSummary",
															"nameLocations": [
																"11521:13:7"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 538,
															"src": "11521:13:7"
														},
														"referencedDeclaration": 538,
														"src": "11521:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PayoutSummary_$538_storage_ptr",
															"typeString": "struct IStrategy.PayoutSummary"
														}
													},
													"id": 1322,
													"nodeType": "ArrayTypeName",
													"src": "11521:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$538_storage_$dyn_storage_ptr",
														"typeString": "struct IStrategy.PayoutSummary[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11520:24:7"
									},
									"scope": 1614,
									"src": "11367:704:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										608
									],
									"body": {
										"id": 1391,
										"nodeType": "Block",
										"src": "12487:53:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1388,
															"name": "_allocator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "12522:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1387,
														"name": "_isValidAllocator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1490,
														"src": "12504:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 1389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12504:29:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1386,
												"id": 1390,
												"nodeType": "Return",
												"src": "12497:36:7"
											}
										]
									},
									"documentation": {
										"id": 1379,
										"nodeType": "StructuredDocumentation",
										"src": "12077:313:7",
										"text": "@notice Checks if the '_allocator' is a valid allocator.\n @dev How the allocator is determined is up to the strategy implementation.\n @param _allocator The address to check if it is a valid allocator for the strategy.\n @return 'true' if the address is a valid allocator, 'false' otherwise"
									},
									"functionSelector": "4d31d087",
									"id": 1392,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isValidAllocator",
									"nameLocation": "12404:16:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1383,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "12463:8:7"
									},
									"parameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "_allocator",
												"nameLocation": "12429:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1392,
												"src": "12421:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1380,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12421:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12420:20:7"
									},
									"returnParameters": {
										"id": 1386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1385,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1392,
												"src": "12481:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1384,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12481:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12480:6:7"
									},
									"scope": 1614,
									"src": "12395:145:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1407,
										"nodeType": "Block",
										"src": "12854:71:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1402,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1396,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "12868:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1397,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12872:6:7",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "12868:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"id": 1400,
																"name": "allo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1026,
																"src": "12890:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IAllo_$328",
																	"typeString": "contract IAllo"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IAllo_$328",
																	"typeString": "contract IAllo"
																}
															],
															"id": 1399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12882:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1398,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "12882:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1401,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12882:13:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12868:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1406,
												"nodeType": "IfStatement",
												"src": "12864:54:7",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1403,
															"name": "UNAUTHORIZED",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 702,
															"src": "12904:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1404,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12904:14:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1405,
													"nodeType": "RevertStatement",
													"src": "12897:21:7"
												}
											}
										]
									},
									"documentation": {
										"id": 1393,
										"nodeType": "StructuredDocumentation",
										"src": "12682:127:7",
										"text": "@notice Checks if the 'msg.sender' is the Allo contract.\n @dev Reverts if the 'msg.sender' is not the Allo contract."
									},
									"id": 1408,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnlyAllo",
									"nameLocation": "12823:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12837:2:7"
									},
									"returnParameters": {
										"id": 1395,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12854:0:7"
									},
									"scope": 1614,
									"src": "12814:111:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1424,
										"nodeType": "Block",
										"src": "13184:80:7",
										"statements": [
											{
												"condition": {
													"id": 1419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "13198:36:7",
													"subExpression": {
														"arguments": [
															{
																"id": 1416,
																"name": "poolId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1032,
																"src": "13218:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1417,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1411,
																"src": "13226:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 1414,
																"name": "allo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1026,
																"src": "13199:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IAllo_$328",
																	"typeString": "contract IAllo"
																}
															},
															"id": 1415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "13204:13:7",
															"memberName": "isPoolManager",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 279,
															"src": "13199:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_uint256_$_t_address_$returns$_t_bool_$",
																"typeString": "function (uint256,address) view external returns (bool)"
															}
														},
														"id": 1418,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13199:35:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1423,
												"nodeType": "IfStatement",
												"src": "13194:63:7",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1420,
															"name": "UNAUTHORIZED",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 702,
															"src": "13243:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1421,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13243:14:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1422,
													"nodeType": "RevertStatement",
													"src": "13236:21:7"
												}
											}
										]
									},
									"documentation": {
										"id": 1409,
										"nodeType": "StructuredDocumentation",
										"src": "12931:186:7",
										"text": "@notice Checks if the '_sender' is a pool manager.\n @dev Reverts if the '_sender' is not a pool manager.\n @param _sender The address to check if they are a pool manager"
									},
									"id": 1425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnlyPoolManager",
									"nameLocation": "13131:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "13161:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "13153:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13153:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13152:17:7"
									},
									"returnParameters": {
										"id": 1413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13184:0:7"
									},
									"scope": 1614,
									"src": "13122:142:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1435,
										"nodeType": "Block",
										"src": "13410:56:7",
										"statements": [
											{
												"condition": {
													"id": 1430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "13424:11:7",
													"subExpression": {
														"id": 1429,
														"name": "poolActive",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1030,
														"src": "13425:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1434,
												"nodeType": "IfStatement",
												"src": "13420:39:7",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1431,
															"name": "POOL_INACTIVE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 741,
															"src": "13444:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1432,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13444:15:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1433,
													"nodeType": "RevertStatement",
													"src": "13437:22:7"
												}
											}
										]
									},
									"documentation": {
										"id": 1426,
										"nodeType": "StructuredDocumentation",
										"src": "13270:89:7",
										"text": "@notice Checks if the pool is active.\n @dev Reverts if the pool is not active."
									},
									"id": 1436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnlyActivePool",
									"nameLocation": "13373:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13393:2:7"
									},
									"returnParameters": {
										"id": 1428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13410:0:7"
									},
									"scope": 1614,
									"src": "13364:102:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1445,
										"nodeType": "Block",
										"src": "13608:53:7",
										"statements": [
											{
												"condition": {
													"id": 1440,
													"name": "poolActive",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1030,
													"src": "13622:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1444,
												"nodeType": "IfStatement",
												"src": "13618:36:7",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1441,
															"name": "POOL_ACTIVE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "13641:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1442,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13641:13:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1443,
													"nodeType": "RevertStatement",
													"src": "13634:20:7"
												}
											}
										]
									},
									"documentation": {
										"id": 1437,
										"nodeType": "StructuredDocumentation",
										"src": "13472:87:7",
										"text": "@notice Checks if the pool is inactive.\n @dev Reverts if the pool is active."
									},
									"id": 1446,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInactivePool",
									"nameLocation": "13573:18:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13591:2:7"
									},
									"returnParameters": {
										"id": 1439,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13608:0:7"
									},
									"scope": 1614,
									"src": "13564:97:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1457,
										"nodeType": "Block",
										"src": "13818:58:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1450,
														"name": "poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "13832:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1451,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "13842:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "13832:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1456,
												"nodeType": "IfStatement",
												"src": "13828:41:7",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1453,
															"name": "NOT_INITIALIZED",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 735,
															"src": "13852:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13852:17:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1455,
													"nodeType": "RevertStatement",
													"src": "13845:24:7"
												}
											}
										]
									},
									"documentation": {
										"id": 1447,
										"nodeType": "StructuredDocumentation",
										"src": "13667:99:7",
										"text": "@notice Checks if the pool is initialized.\n @dev Reverts if the pool is not initialized."
									},
									"id": 1458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnlyInitialized",
									"nameLocation": "13780:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1448,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13801:2:7"
									},
									"returnParameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13818:0:7"
									},
									"scope": 1614,
									"src": "13771:105:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1472,
										"nodeType": "Block",
										"src": "14163:71:7",
										"statements": [
											{
												"expression": {
													"id": 1466,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1464,
														"name": "poolActive",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1030,
														"src": "14173:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1465,
														"name": "_active",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1461,
														"src": "14186:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "14173:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1467,
												"nodeType": "ExpressionStatement",
												"src": "14173:20:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1469,
															"name": "_active",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1461,
															"src": "14219:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1468,
														"name": "PoolActive",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 581,
														"src": "14208:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bool_$returns$__$",
															"typeString": "function (bool)"
														}
													},
													"id": 1470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14208:19:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1471,
												"nodeType": "EmitStatement",
												"src": "14203:24:7"
											}
										]
									},
									"documentation": {
										"id": 1459,
										"nodeType": "StructuredDocumentation",
										"src": "13882:229:7",
										"text": "@notice Set the pool to active or inactive status.\n @dev This will emit a 'PoolActive()' event. Used by the strategy implementation.\n @param _active The status to set, 'true' means active, 'false' means inactive"
									},
									"id": 1473,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setPoolActive",
									"nameLocation": "14125:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "_active",
												"nameLocation": "14145:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1473,
												"src": "14140:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1460,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14140:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14139:14:7"
									},
									"returnParameters": {
										"id": 1463,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14163:0:7"
									},
									"scope": 1614,
									"src": "14116:118:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1481,
										"nodeType": "Block",
										"src": "14462:34:7",
										"statements": [
											{
												"expression": {
													"id": 1479,
													"name": "poolActive",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1030,
													"src": "14479:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1478,
												"id": 1480,
												"nodeType": "Return",
												"src": "14472:17:7"
											}
										]
									},
									"documentation": {
										"id": 1474,
										"nodeType": "StructuredDocumentation",
										"src": "14240:155:7",
										"text": "@notice Checks if the pool is active.\n @dev Used by the strategy implementation.\n @return 'true' if the pool is active, otherwise 'false'"
									},
									"id": 1482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isPoolActive",
									"nameLocation": "14409:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14422:2:7"
									},
									"returnParameters": {
										"id": 1478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1482,
												"src": "14456:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1476,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14456:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14455:6:7"
									},
									"scope": 1614,
									"src": "14400:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 1483,
										"nodeType": "StructuredDocumentation",
										"src": "14502:160:7",
										"text": "@notice Checks if the allocator is valid\n @param _allocator The allocator address\n @return 'true' if the allocator is valid, otherwise 'false'"
									},
									"id": 1490,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_isValidAllocator",
									"nameLocation": "14676:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "_allocator",
												"nameLocation": "14702:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "14694:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14694:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14693:20:7"
									},
									"returnParameters": {
										"id": 1489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1488,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "14745:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1487,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14745:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14744:6:7"
									},
									"scope": 1614,
									"src": "14667:84:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 1491,
										"nodeType": "StructuredDocumentation",
										"src": "14757:588:7",
										"text": "@notice This will register a recipient, set their status (and any other strategy specific values), and\n         return the ID of the recipient.\n @dev Able to change status all the way up to Accepted, or to Pending and if there are more steps, additional\n      functions should be added to allow the owner to check this. The owner could also check attestations directly\n      and then Accept for instance.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender\n @return The ID of the recipient"
									},
									"id": 1500,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_registerRecipient",
									"nameLocation": "15359:18:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1493,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "15391:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1500,
												"src": "15378:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1492,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15378:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1495,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "15406:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1500,
												"src": "15398:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15398:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15377:37:7"
									},
									"returnParameters": {
										"id": 1499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1500,
												"src": "15441:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1497,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15441:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15440:9:7"
									},
									"scope": 1614,
									"src": "15350:100:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 1501,
										"nodeType": "StructuredDocumentation",
										"src": "15456:245:7",
										"text": "@notice This will allocate to a recipient.\n @dev The encoded '_data' will be determined by the strategy implementation.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"id": 1508,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_allocate",
									"nameLocation": "15715:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "15738:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "15725:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1502,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15725:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "15753:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "15745:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1504,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15745:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15724:37:7"
									},
									"returnParameters": {
										"id": 1507,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15778:0:7"
									},
									"scope": 1614,
									"src": "15706:73:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 1509,
										"nodeType": "StructuredDocumentation",
										"src": "15785:470:7",
										"text": "@notice This will distribute funds (tokens) to recipients.\n @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\n this contract will need to track the amount paid already, so that it doesn't double pay.\n @param _recipientIds The ids of the recipients to distribute to\n @param _data Data required will depend on the strategy implementation\n @param _sender The address of the sender"
									},
									"id": 1519,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_distribute",
									"nameLocation": "16269:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "16298:13:7",
												"nodeType": "VariableDeclaration",
												"scope": 1519,
												"src": "16281:30:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1510,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "16281:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1511,
													"nodeType": "ArrayTypeName",
													"src": "16281:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "16326:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1519,
												"src": "16313:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1513,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16313:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1516,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "16341:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1519,
												"src": "16333:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16333:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16280:69:7"
									},
									"returnParameters": {
										"id": 1518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16366:0:7"
									},
									"scope": 1614,
									"src": "16260:107:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 1520,
										"nodeType": "StructuredDocumentation",
										"src": "16373:331:7",
										"text": "@notice This will get the payout summary for a recipient.\n @dev The encoded '_data' will be determined by the strategy implementation.\n @param _recipientId The ID of the recipient\n @param _data The data to use to get the payout summary for the recipient\n @return The payout summary for the recipient"
									},
									"id": 1530,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_getPayout",
									"nameLocation": "16718:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "16737:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1530,
												"src": "16729:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16729:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1524,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "16764:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1530,
												"src": "16751:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1523,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16751:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16728:42:7"
									},
									"returnParameters": {
										"id": 1529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1530,
												"src": "16834:20:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PayoutSummary_$538_memory_ptr",
													"typeString": "struct IStrategy.PayoutSummary"
												},
												"typeName": {
													"id": 1527,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1526,
														"name": "PayoutSummary",
														"nameLocations": [
															"16834:13:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 538,
														"src": "16834:13:7"
													},
													"referencedDeclaration": 538,
													"src": "16834:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PayoutSummary_$538_storage_ptr",
														"typeString": "struct IStrategy.PayoutSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16833:22:7"
									},
									"scope": 1614,
									"src": "16709:147:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 1531,
										"nodeType": "StructuredDocumentation",
										"src": "16862:148:7",
										"text": "@notice This will get the status of a recipient.\n @param _recipientId The ID of the recipient\n @return The status of the recipient"
									},
									"id": 1539,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_getRecipientStatus",
									"nameLocation": "17024:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1533,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "17052:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "17044:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17044:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17043:22:7"
									},
									"returnParameters": {
										"id": 1538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "17097:6:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$533",
													"typeString": "enum IStrategy.Status"
												},
												"typeName": {
													"id": 1536,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1535,
														"name": "Status",
														"nameLocations": [
															"17097:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 533,
														"src": "17097:6:7"
													},
													"referencedDeclaration": 533,
													"src": "17097:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$533",
														"typeString": "enum IStrategy.Status"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17096:8:7"
									},
									"scope": 1614,
									"src": "17015:90:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1545,
										"nodeType": "Block",
										"src": "17434:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1540,
										"nodeType": "StructuredDocumentation",
										"src": "17244:116:7",
										"text": "@notice Hook called before increasing the pool amount.\n @param _amount The amount to increase the pool by"
									},
									"id": 1546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeIncreasePoolAmount",
									"nameLocation": "17374:25:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "17408:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1546,
												"src": "17400:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17400:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17399:17:7"
									},
									"returnParameters": {
										"id": 1544,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17434:0:7"
									},
									"scope": 1614,
									"src": "17365:71:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1552,
										"nodeType": "Block",
										"src": "17630:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1547,
										"nodeType": "StructuredDocumentation",
										"src": "17442:115:7",
										"text": "@notice Hook called after increasing the pool amount.\n @param _amount The amount to increase the pool by"
									},
									"id": 1553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterIncreasePoolAmount",
									"nameLocation": "17571:24:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1549,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "17604:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "17596:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17596:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17595:17:7"
									},
									"returnParameters": {
										"id": 1551,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17630:0:7"
									},
									"scope": 1614,
									"src": "17562:70:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1561,
										"nodeType": "Block",
										"src": "17898:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1554,
										"nodeType": "StructuredDocumentation",
										"src": "17638:167:7",
										"text": "@notice Hook called before registering a recipient.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender"
									},
									"id": 1562,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeRegisterRecipient",
									"nameLocation": "17819:24:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1556,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "17857:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1562,
												"src": "17844:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1555,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17844:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "17872:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1562,
												"src": "17864:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17864:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17843:37:7"
									},
									"returnParameters": {
										"id": 1560,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17898:0:7"
									},
									"scope": 1614,
									"src": "17810:90:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1570,
										"nodeType": "Block",
										"src": "18164:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1563,
										"nodeType": "StructuredDocumentation",
										"src": "17906:166:7",
										"text": "@notice Hook called after registering a recipient.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender"
									},
									"id": 1571,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterRegisterRecipient",
									"nameLocation": "18086:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1565,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "18123:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "18110:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1564,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18110:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1567,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "18138:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "18130:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18130:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18109:37:7"
									},
									"returnParameters": {
										"id": 1569,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18164:0:7"
									},
									"scope": 1614,
									"src": "18077:89:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1579,
										"nodeType": "Block",
										"src": "18428:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1572,
										"nodeType": "StructuredDocumentation",
										"src": "18172:172:7",
										"text": "@notice Hook called before allocating to a recipient.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"id": 1580,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeAllocate",
									"nameLocation": "18358:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1574,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "18387:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "18374:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1573,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18374:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1576,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "18402:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "18394:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18394:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18373:37:7"
									},
									"returnParameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18428:0:7"
									},
									"scope": 1614,
									"src": "18349:81:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1588,
										"nodeType": "Block",
										"src": "18690:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1581,
										"nodeType": "StructuredDocumentation",
										"src": "18436:171:7",
										"text": "@notice Hook called after allocating to a recipient.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"id": 1589,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterAllocate",
									"nameLocation": "18621:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1583,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "18649:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1589,
												"src": "18636:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1582,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18636:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1585,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "18664:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1589,
												"src": "18656:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1584,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18656:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18635:37:7"
									},
									"returnParameters": {
										"id": 1587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18690:0:7"
									},
									"scope": 1614,
									"src": "18612:80:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1600,
										"nodeType": "Block",
										"src": "19062:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1590,
										"nodeType": "StructuredDocumentation",
										"src": "18698:246:7",
										"text": "@notice Hook called before distributing funds (tokens) to recipients.\n @param _recipientIds The IDs of the recipients\n @param _data The data to use to distribute to the recipients\n @param _sender The address of the sender"
									},
									"id": 1601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeDistribute",
									"nameLocation": "18958:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1593,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "18993:13:7",
												"nodeType": "VariableDeclaration",
												"scope": 1601,
												"src": "18976:30:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1591,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "18976:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1592,
													"nodeType": "ArrayTypeName",
													"src": "18976:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "19021:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1601,
												"src": "19008:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1594,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "19008:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1597,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "19036:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1601,
												"src": "19028:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1596,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19028:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18975:69:7"
									},
									"returnParameters": {
										"id": 1599,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19062:0:7"
									},
									"scope": 1614,
									"src": "18949:115:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1612,
										"nodeType": "Block",
										"src": "19432:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1602,
										"nodeType": "StructuredDocumentation",
										"src": "19070:245:7",
										"text": "@notice Hook called after distributing funds (tokens) to recipients.\n @param _recipientIds The IDs of the recipients\n @param _data The data to use to distribute to the recipients\n @param _sender The address of the sender"
									},
									"id": 1613,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterDistribute",
									"nameLocation": "19329:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1605,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "19363:13:7",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "19346:30:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1603,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "19346:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1604,
													"nodeType": "ArrayTypeName",
													"src": "19346:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "19391:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "19378:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1606,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "19378:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1609,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "19406:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "19398:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19398:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19345:69:7"
									},
									"returnParameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19432:0:7"
									},
									"scope": 1614,
									"src": "19320:114:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1615,
							"src": "4565:14871:7",
							"usedErrors": [
								693,
								696,
								699,
								702,
								705,
								708,
								711,
								714,
								717,
								720,
								723,
								726,
								729,
								732,
								735,
								738,
								741,
								744,
								747,
								750,
								753,
								756,
								759,
								762,
								765,
								770,
								773,
								776,
								779,
								808
							]
						}
					],
					"src": "42:19395:7"
				},
				"id": 7
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							2634
						],
						"Ownable": [
							1727
						]
					},
					"id": 1728,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1616,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:8"
						},
						{
							"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 1617,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1728,
							"sourceUnit": 2635,
							"src": "127:30:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1619,
										"name": "Context",
										"nameLocations": [
											"683:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2634,
										"src": "683:7:8"
									},
									"id": 1620,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:8"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1618,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:8",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 1727,
							"linearizedBaseContracts": [
								1727,
								2634
							],
							"name": "Ownable",
							"nameLocation": "672:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1622,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:8",
									"nodeType": "VariableDeclaration",
									"scope": 1727,
									"src": "697:22:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1621,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 1628,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1624,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:8",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "753:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1626,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "784:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1625,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:8"
									},
									"src": "726:84:8"
								},
								{
									"body": {
										"id": 1637,
										"nodeType": "Block",
										"src": "926:49:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1633,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2624,
																"src": "955:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1634,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1632,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1726,
														"src": "936:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1636,
												"nodeType": "ExpressionStatement",
												"src": "936:32:8"
											}
										]
									},
									"documentation": {
										"id": 1629,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:8",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 1638,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:8"
									},
									"returnParameters": {
										"id": 1631,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:8"
									},
									"scope": 1727,
									"src": "912:63:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1645,
										"nodeType": "Block",
										"src": "1084:41:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1641,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1669,
														"src": "1094:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1643,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:8"
											},
											{
												"id": 1644,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:8"
											}
										]
									},
									"documentation": {
										"id": 1639,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:8",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 1646,
									"name": "onlyOwner",
									"nameLocation": "1072:9:8",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1640,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:8"
									},
									"src": "1063:62:8",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1654,
										"nodeType": "Block",
										"src": "1256:30:8",
										"statements": [
											{
												"expression": {
													"id": 1652,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1622,
													"src": "1273:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1651,
												"id": 1653,
												"nodeType": "Return",
												"src": "1266:13:8"
											}
										]
									},
									"documentation": {
										"id": 1647,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:8",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 1655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:8"
									},
									"returnParameters": {
										"id": 1651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1650,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "1247:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:8"
									},
									"scope": 1727,
									"src": "1201:85:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1668,
										"nodeType": "Block",
										"src": "1404:85:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1664,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1660,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1655,
																	"src": "1422:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1662,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2624,
																	"src": "1433:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1663,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 1665,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 1659,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1667,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:8"
											}
										]
									},
									"documentation": {
										"id": 1656,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:8",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 1669,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:8"
									},
									"returnParameters": {
										"id": 1658,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:8"
									},
									"scope": 1727,
									"src": "1359:130:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1682,
										"nodeType": "Block",
										"src": "1878:47:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1678,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1677,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1907:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1676,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1907:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1907:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1675,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1726,
														"src": "1888:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1888:30:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1681,
												"nodeType": "ExpressionStatement",
												"src": "1888:30:8"
											}
										]
									},
									"documentation": {
										"id": 1670,
										"nodeType": "StructuredDocumentation",
										"src": "1495:324:8",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 1683,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1673,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1672,
												"name": "onlyOwner",
												"nameLocations": [
													"1868:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1646,
												"src": "1868:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1868:9:8"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1833:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1850:2:8"
									},
									"returnParameters": {
										"id": 1674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1878:0:8"
									},
									"scope": 1727,
									"src": "1824:101:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1705,
										"nodeType": "Block",
										"src": "2144:128:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1697,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1692,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1686,
																"src": "2162:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1695,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2182:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1694,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2174:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1693,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2174:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1696,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2174:10:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2162:22:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 1698,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2186:40:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 1691,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2154:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2154:73:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1700,
												"nodeType": "ExpressionStatement",
												"src": "2154:73:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1702,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1686,
															"src": "2256:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1701,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1726,
														"src": "2237:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2237:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1704,
												"nodeType": "ExpressionStatement",
												"src": "2237:28:8"
											}
										]
									},
									"documentation": {
										"id": 1684,
										"nodeType": "StructuredDocumentation",
										"src": "1931:138:8",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 1706,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1689,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1688,
												"name": "onlyOwner",
												"nameLocations": [
													"2134:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1646,
												"src": "2134:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "2134:9:8"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2083:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2109:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "2101:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2101:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2100:18:8"
									},
									"returnParameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2144:0:8"
									},
									"scope": 1727,
									"src": "2074:198:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1725,
										"nodeType": "Block",
										"src": "2489:124:8",
										"statements": [
											{
												"assignments": [
													1713
												],
												"declarations": [
													{
														"constant": false,
														"id": 1713,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2507:8:8",
														"nodeType": "VariableDeclaration",
														"scope": 1725,
														"src": "2499:16:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1712,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2499:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1715,
												"initialValue": {
													"id": 1714,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1622,
													"src": "2518:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2499:25:8"
											},
											{
												"expression": {
													"id": 1718,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1716,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1622,
														"src": "2534:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1717,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1709,
														"src": "2543:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2534:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1719,
												"nodeType": "ExpressionStatement",
												"src": "2534:17:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1721,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1713,
															"src": "2587:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1722,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1709,
															"src": "2597:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1720,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1628,
														"src": "2566:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 1723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2566:40:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1724,
												"nodeType": "EmitStatement",
												"src": "2561:45:8"
											}
										]
									},
									"documentation": {
										"id": 1707,
										"nodeType": "StructuredDocumentation",
										"src": "2278:143:8",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 1726,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2435:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1709,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2462:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1726,
												"src": "2454:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2454:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2453:18:8"
									},
									"returnParameters": {
										"id": 1711,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2489:0:8"
									},
									"scope": 1727,
									"src": "2426:187:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1728,
							"src": "654:1961:8",
							"usedErrors": []
						}
					],
					"src": "102:2514:8"
				},
				"id": 8
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							1792
						]
					},
					"id": 1793,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1729,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:9"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1730,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:9",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 1792,
							"linearizedBaseContracts": [
								1792
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1733,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 1792,
									"src": "1676:41:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1731,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 1732,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1736,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:9",
									"nodeType": "VariableDeclaration",
									"scope": 1792,
									"src": "1723:37:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1734,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 1735,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1738,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 1792,
									"src": "1767:23:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1737,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1745,
										"nodeType": "Block",
										"src": "1811:39:9",
										"statements": [
											{
												"expression": {
													"id": 1743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1741,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1738,
														"src": "1821:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1742,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1733,
														"src": "1831:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1744,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:9"
											}
										]
									},
									"id": 1746,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1739,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:9"
									},
									"returnParameters": {
										"id": 1740,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:9"
									},
									"scope": 1792,
									"src": "1797:53:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1756,
										"nodeType": "Block",
										"src": "2251:79:9",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1749,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1772,
														"src": "2261:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1751,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:9"
											},
											{
												"id": 1752,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:9"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1753,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1780,
														"src": "2303:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1754,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1755,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:9"
											}
										]
									},
									"documentation": {
										"id": 1747,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:9",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 1757,
									"name": "nonReentrant",
									"nameLocation": "2236:12:9",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1748,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:9"
									},
									"src": "2227:103:9",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1771,
										"nodeType": "Block",
										"src": "2375:248:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1763,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1761,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1738,
																"src": "2468:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1762,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1736,
																"src": "2479:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 1764,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 1760,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1766,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:9"
											},
											{
												"expression": {
													"id": 1769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1767,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1738,
														"src": "2598:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1768,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1736,
														"src": "2608:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1770,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:9"
											}
										]
									},
									"id": 1772,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1758,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:9"
									},
									"returnParameters": {
										"id": 1759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:9"
									},
									"scope": 1792,
									"src": "2336:287:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1779,
										"nodeType": "Block",
										"src": "2667:171:9",
										"statements": [
											{
												"expression": {
													"id": 1777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1775,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1738,
														"src": "2809:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1776,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1733,
														"src": "2819:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1778,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:9"
											}
										]
									},
									"id": 1780,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1773,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:9"
									},
									"returnParameters": {
										"id": 1774,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:9"
									},
									"scope": 1792,
									"src": "2629:209:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1790,
										"nodeType": "Block",
										"src": "3081:43:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1786,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1738,
														"src": "3098:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1787,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1736,
														"src": "3109:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1785,
												"id": 1789,
												"nodeType": "Return",
												"src": "3091:26:9"
											}
										]
									},
									"documentation": {
										"id": 1781,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:9",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 1791,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3026:23:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:9"
									},
									"returnParameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "3075:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1783,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:9"
									},
									"scope": 1792,
									"src": "3017:107:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1793,
							"src": "888:2238:9",
							"usedErrors": []
						}
					],
					"src": "112:3015:9"
				},
				"id": 9
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1870
						]
					},
					"id": 1871,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1794,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1795,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:10",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1870,
							"linearizedBaseContracts": [
								1870
							],
							"name": "IERC20",
							"nameLocation": "212:6:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1796,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:10",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1804,
									"name": "Transfer",
									"nameLocation": "394:8:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1798,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "403:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1797,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1800,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "425:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1799,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1802,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "445:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1801,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:10"
									},
									"src": "388:72:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1805,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:10",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1813,
									"name": "Approval",
									"nameLocation": "625:8:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1807,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1813,
												"src": "634:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1809,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1813,
												"src": "657:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1808,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1811,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1813,
												"src": "682:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:10"
									},
									"src": "619:78:10"
								},
								{
									"documentation": {
										"id": 1814,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:10",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1819,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:10"
									},
									"returnParameters": {
										"id": 1818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1817,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "820:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1816,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:10"
									},
									"scope": 1870,
									"src": "774:55:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1820,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:10",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1827,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1822,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1827,
												"src": "931:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1821,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:10"
									},
									"returnParameters": {
										"id": 1826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1825,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1827,
												"src": "971:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1824,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:10"
									},
									"scope": 1870,
									"src": "912:68:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1828,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:10",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1837,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1830,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "1211:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "1223:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:10"
									},
									"returnParameters": {
										"id": 1836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1835,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "1257:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1834,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:10"
									},
									"scope": 1870,
									"src": "1193:70:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1838,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:10",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1847,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "1557:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "1572:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1841,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:10"
									},
									"returnParameters": {
										"id": 1846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1845,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "1612:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:10"
									},
									"scope": 1870,
									"src": "1538:83:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1848,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:10",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1857,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1857,
												"src": "2291:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1849,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1857,
												"src": "2308:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:10"
									},
									"returnParameters": {
										"id": 1856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1855,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1857,
												"src": "2342:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1854,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:10"
									},
									"scope": 1870,
									"src": "2274:74:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1858,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:10",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1869,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1860,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2676:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "2668:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1862,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2690:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "2682:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1864,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2702:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "2694:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1863,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2694:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:42:10"
									},
									"returnParameters": {
										"id": 1868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1867,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "2728:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1866,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2728:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2727:6:10"
									},
									"scope": 1870,
									"src": "2646:88:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1871,
							"src": "202:2534:10",
							"usedErrors": []
						}
					],
					"src": "106:2631:10"
				},
				"id": 10
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1906
						]
					},
					"id": 1907,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1872,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "123:23:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1873,
								"nodeType": "StructuredDocumentation",
								"src": "148:480:11",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 1906,
							"linearizedBaseContracts": [
								1906
							],
							"name": "IERC20Permit",
							"nameLocation": "639:12:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1874,
										"nodeType": "StructuredDocumentation",
										"src": "658:792:11",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 1891,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1464:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1876,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1488:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "1480:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1875,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1480:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1511:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "1503:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1503:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1880,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1536:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "1528:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1882,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1559:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "1551:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1551:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1884,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1583:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "1577:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1883,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1577:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1886,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1602:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "1594:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1885,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1594:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1888,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1621:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "1613:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1887,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1470:158:11"
									},
									"returnParameters": {
										"id": 1890,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1637:0:11"
									},
									"scope": 1906,
									"src": "1455:183:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1892,
										"nodeType": "StructuredDocumentation",
										"src": "1644:294:11",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1899,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1952:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1894,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1967:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1899,
												"src": "1959:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1959:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1958:15:11"
									},
									"returnParameters": {
										"id": 1898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1897,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1899,
												"src": "1997:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1896,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:9:11"
									},
									"scope": 1906,
									"src": "1943:63:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1900,
										"nodeType": "StructuredDocumentation",
										"src": "2012:128:11",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1905,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2207:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1901,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2223:2:11"
									},
									"returnParameters": {
										"id": 1904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "2249:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1902,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2249:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2248:9:11"
									},
									"scope": 1906,
									"src": "2198:60:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1907,
							"src": "629:1631:11",
							"usedErrors": []
						}
					],
					"src": "123:2138:11"
				},
				"id": 11
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							2612
						],
						"IERC20": [
							1870
						],
						"IERC20Permit": [
							1906
						],
						"SafeERC20": [
							2282
						]
					},
					"id": 2283,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1908,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:12"
						},
						{
							"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1909,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2283,
							"sourceUnit": 1871,
							"src": "140:23:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "../extensions/IERC20Permit.sol",
							"id": 1910,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2283,
							"sourceUnit": 1907,
							"src": "164:40:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 1911,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2283,
							"sourceUnit": 2613,
							"src": "205:36:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1912,
								"nodeType": "StructuredDocumentation",
								"src": "243:457:12",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 2282,
							"linearizedBaseContracts": [
								2282
							],
							"name": "SafeERC20",
							"nameLocation": "709:9:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1915,
									"libraryName": {
										"id": 1913,
										"name": "Address",
										"nameLocations": [
											"731:7:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2612,
										"src": "731:7:12"
									},
									"nodeType": "UsingForDirective",
									"src": "725:26:12",
									"typeName": {
										"id": 1914,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "743:7:12",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 1938,
										"nodeType": "Block",
										"src": "1013:103:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1927,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1919,
															"src": "1043:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1930,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1919,
																			"src": "1073:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1870",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1931,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1079:8:12",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1837,
																		"src": "1073:14:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1088:8:12",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1073:23:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1933,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1921,
																	"src": "1098:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1934,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1923,
																	"src": "1102:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1928,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1050:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1929,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1054:18:12",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1050:22:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1935,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1050:58:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1926,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2233,
														"src": "1023:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1023:86:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1937,
												"nodeType": "ExpressionStatement",
												"src": "1023:86:12"
											}
										]
									},
									"documentation": {
										"id": 1916,
										"nodeType": "StructuredDocumentation",
										"src": "757:179:12",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1939,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "950:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1919,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "970:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1939,
												"src": "963:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1870",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1918,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1917,
														"name": "IERC20",
														"nameLocations": [
															"963:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1870,
														"src": "963:6:12"
													},
													"referencedDeclaration": 1870,
													"src": "963:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1921,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "985:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1939,
												"src": "977:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1920,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "977:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1923,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "997:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1939,
												"src": "989:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "989:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "962:41:12"
									},
									"returnParameters": {
										"id": 1925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1013:0:12"
									},
									"scope": 2282,
									"src": "941:175:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1965,
										"nodeType": "Block",
										"src": "1445:113:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1953,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1943,
															"src": "1475:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1956,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1943,
																			"src": "1505:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1870",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1957,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1511:12:12",
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1869,
																		"src": "1505:18:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1958,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1524:8:12",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1505:27:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1959,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1945,
																	"src": "1534:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1960,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "1540:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1961,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1949,
																	"src": "1544:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1954,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1482:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1955,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1486:18:12",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1482:22:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1962,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1482:68:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1952,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2233,
														"src": "1455:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1455:96:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1964,
												"nodeType": "ExpressionStatement",
												"src": "1455:96:12"
											}
										]
									},
									"documentation": {
										"id": 1940,
										"nodeType": "StructuredDocumentation",
										"src": "1122:228:12",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 1966,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1364:16:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1943,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1388:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "1381:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1870",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1942,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1941,
														"name": "IERC20",
														"nameLocations": [
															"1381:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1870,
														"src": "1381:6:12"
													},
													"referencedDeclaration": 1870,
													"src": "1381:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1945,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1403:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "1395:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1944,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1395:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1947,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1417:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "1409:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1409:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1949,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1429:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "1421:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1948,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1421:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1380:55:12"
									},
									"returnParameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1445:0:12"
									},
									"scope": 2282,
									"src": "1355:203:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2009,
										"nodeType": "Block",
										"src": "1894:497:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1993,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1980,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1978,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1974,
																			"src": "2143:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1979,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2152:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2143:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1981,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2142:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1991,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1986,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "2183:4:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$2282",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$2282",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 1985,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2175:7:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 1984,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "2175:7:12",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1987,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2175:13:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1988,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1972,
																					"src": "2190:7:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 1982,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1970,
																					"src": "2159:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$1870",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1983,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2165:9:12",
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1847,
																				"src": "2159:15:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 1989,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2159:39:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1990,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2202:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2159:44:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1992,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2158:46:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2142:62:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 1994,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2218:56:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 1977,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2121:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2121:163:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1996,
												"nodeType": "ExpressionStatement",
												"src": "2121:163:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1998,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1970,
															"src": "2314:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2001,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1970,
																			"src": "2344:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1870",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2002,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2350:7:12",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1857,
																		"src": "2344:13:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2003,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2358:8:12",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2344:22:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2004,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1972,
																	"src": "2368:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2005,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1974,
																	"src": "2377:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1999,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2321:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2000,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2325:18:12",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2321:22:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2006,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2321:62:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1997,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2233,
														"src": "2294:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2294:90:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2008,
												"nodeType": "ExpressionStatement",
												"src": "2294:90:12"
											}
										]
									},
									"documentation": {
										"id": 1967,
										"nodeType": "StructuredDocumentation",
										"src": "1564:249:12",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 2010,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1827:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1970,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1846:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "1839:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1870",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1969,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1968,
														"name": "IERC20",
														"nameLocations": [
															"1839:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1870,
														"src": "1839:6:12"
													},
													"referencedDeclaration": 1870,
													"src": "1839:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1972,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1861:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "1853:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1971,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1853:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1974,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1878:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "1870:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1973,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1870:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:46:12"
									},
									"returnParameters": {
										"id": 1976,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1894:0:12"
									},
									"scope": 2282,
									"src": "1818:573:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2046,
										"nodeType": "Block",
										"src": "2668:194:12",
										"statements": [
											{
												"assignments": [
													2022
												],
												"declarations": [
													{
														"constant": false,
														"id": 2022,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2686:12:12",
														"nodeType": "VariableDeclaration",
														"scope": 2046,
														"src": "2678:20:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2021,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2678:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2031,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2027,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2725:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$2282",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$2282",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 2026,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2717:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2025,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2717:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2028,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2717:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2029,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2016,
															"src": "2732:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2023,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2014,
															"src": "2701:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															}
														},
														"id": 2024,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2707:9:12",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1847,
														"src": "2701:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 2030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2701:39:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2678:62:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2033,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2014,
															"src": "2770:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2036,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2014,
																			"src": "2800:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1870",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2037,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2806:7:12",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1857,
																		"src": "2800:13:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2038,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2814:8:12",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2800:22:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2039,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2016,
																	"src": "2824:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2042,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2040,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2022,
																		"src": "2833:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 2041,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2018,
																		"src": "2848:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2833:20:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2034,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2777:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2035,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2781:18:12",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2777:22:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2043,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2777:77:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2032,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2233,
														"src": "2750:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2750:105:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2045,
												"nodeType": "ExpressionStatement",
												"src": "2750:105:12"
											}
										]
									},
									"documentation": {
										"id": 2011,
										"nodeType": "StructuredDocumentation",
										"src": "2397:180:12",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 2047,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2591:21:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2014,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2620:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "2613:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1870",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2013,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2012,
														"name": "IERC20",
														"nameLocations": [
															"2613:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1870,
														"src": "2613:6:12"
													},
													"referencedDeclaration": 1870,
													"src": "2613:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2016,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2635:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "2627:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2015,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2627:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2018,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2652:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "2644:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2017,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2644:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:46:12"
									},
									"returnParameters": {
										"id": 2020,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2668:0:12"
									},
									"scope": 2282,
									"src": "2582:280:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2091,
										"nodeType": "Block",
										"src": "3139:321:12",
										"statements": [
											{
												"id": 2090,
												"nodeType": "UncheckedBlock",
												"src": "3149:305:12",
												"statements": [
													{
														"assignments": [
															2059
														],
														"declarations": [
															{
																"constant": false,
																"id": 2059,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "3181:12:12",
																"nodeType": "VariableDeclaration",
																"scope": 2090,
																"src": "3173:20:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2058,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3173:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2068,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2064,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3220:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2282",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2282",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 2063,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3212:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2062,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3212:7:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2065,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3212:13:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2066,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2053,
																	"src": "3227:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2060,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2051,
																	"src": "3196:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1870",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2061,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3202:9:12",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1847,
																"src": "3196:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 2067,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3196:39:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3173:62:12"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2072,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2070,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2059,
																		"src": "3257:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 2071,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2055,
																		"src": "3273:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3257:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 2073,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3280:43:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 2069,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "3249:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2074,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3249:75:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2075,
														"nodeType": "ExpressionStatement",
														"src": "3249:75:12"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2077,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2051,
																	"src": "3358:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1870",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 2080,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2051,
																					"src": "3388:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$1870",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 2081,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3394:7:12",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1857,
																				"src": "3388:13:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 2082,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3402:8:12",
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "3388:22:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 2083,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2053,
																			"src": "3412:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2086,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2084,
																				"name": "oldAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2059,
																				"src": "3421:12:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 2085,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2055,
																				"src": "3436:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3421:20:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2078,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "3365:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 2079,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "3369:18:12",
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "3365:22:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 2087,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3365:77:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1870",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2076,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2233,
																"src": "3338:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 2088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3338:105:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2089,
														"nodeType": "ExpressionStatement",
														"src": "3338:105:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2048,
										"nodeType": "StructuredDocumentation",
										"src": "2868:180:12",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 2092,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "3062:21:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2051,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3091:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "3084:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1870",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2050,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2049,
														"name": "IERC20",
														"nameLocations": [
															"3084:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1870,
														"src": "3084:6:12"
													},
													"referencedDeclaration": 1870,
													"src": "3084:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2053,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3106:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "3098:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2052,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3098:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2055,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3123:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "3115:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2054,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3115:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3083:46:12"
									},
									"returnParameters": {
										"id": 2057,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3139:0:12"
									},
									"scope": 2282,
									"src": "3053:407:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2138,
										"nodeType": "Block",
										"src": "3856:333:12",
										"statements": [
											{
												"assignments": [
													2104
												],
												"declarations": [
													{
														"constant": false,
														"id": 2104,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "3879:12:12",
														"nodeType": "VariableDeclaration",
														"scope": 2138,
														"src": "3866:25:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2103,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3866:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2113,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 2107,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2096,
																	"src": "3917:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1870",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2108,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3923:7:12",
																"memberName": "approve",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1857,
																"src": "3917:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 2109,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3931:8:12",
															"memberName": "selector",
															"nodeType": "MemberAccess",
															"src": "3917:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														{
															"id": 2110,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2098,
															"src": "3941:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2111,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2100,
															"src": "3950:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2105,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3894:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 2106,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3898:18:12",
														"memberName": "encodeWithSelector",
														"nodeType": "MemberAccess",
														"src": "3894:22:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes4) pure returns (bytes memory)"
														}
													},
													"id": 2112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3894:62:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3866:90:12"
											},
											{
												"condition": {
													"id": 2118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3971:45:12",
													"subExpression": {
														"arguments": [
															{
																"id": 2115,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2096,
																"src": "3996:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$1870",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 2116,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2104,
																"src": "4003:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$1870",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2114,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2281,
															"src": "3972:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 2117,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3972:44:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2137,
												"nodeType": "IfStatement",
												"src": "3967:216:12",
												"trueBody": {
													"id": 2136,
													"nodeType": "Block",
													"src": "4018:165:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2120,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2096,
																		"src": "4052:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1870",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"expression": {
																						"id": 2123,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2096,
																						"src": "4082:5:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$1870",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 2124,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "4088:7:12",
																					"memberName": "approve",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1857,
																					"src": "4082:13:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 2125,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4096:8:12",
																				"memberName": "selector",
																				"nodeType": "MemberAccess",
																				"src": "4082:22:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				}
																			},
																			{
																				"id": 2126,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2098,
																				"src": "4106:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"hexValue": "30",
																				"id": 2127,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4115:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"expression": {
																				"id": 2121,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4059:3:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4063:18:12",
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "4059:22:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 2128,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4059:58:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1870",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2119,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2233,
																	"src": "4032:19:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 2129,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4032:86:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2130,
															"nodeType": "ExpressionStatement",
															"src": "4032:86:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2132,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2096,
																		"src": "4152:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1870",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 2133,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2104,
																		"src": "4159:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1870",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2131,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2233,
																	"src": "4132:19:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 2134,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4132:40:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2135,
															"nodeType": "ExpressionStatement",
															"src": "4132:40:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2093,
										"nodeType": "StructuredDocumentation",
										"src": "3466:308:12",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 2139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3788:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2096,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3808:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "3801:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1870",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2095,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2094,
														"name": "IERC20",
														"nameLocations": [
															"3801:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1870,
														"src": "3801:6:12"
													},
													"referencedDeclaration": 1870,
													"src": "3801:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2098,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3823:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "3815:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2097,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3815:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2100,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3840:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "3832:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2099,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3832:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3800:46:12"
									},
									"returnParameters": {
										"id": 2102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3856:0:12"
									},
									"scope": 2282,
									"src": "3779:410:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2195,
										"nodeType": "Block",
										"src": "4556:257:12",
										"statements": [
											{
												"assignments": [
													2161
												],
												"declarations": [
													{
														"constant": false,
														"id": 2161,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "4574:11:12",
														"nodeType": "VariableDeclaration",
														"scope": 2195,
														"src": "4566:19:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2160,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4566:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2166,
												"initialValue": {
													"arguments": [
														{
															"id": 2164,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2145,
															"src": "4601:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2162,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2143,
															"src": "4588:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$1906",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2163,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4594:6:12",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1899,
														"src": "4588:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4588:19:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4566:41:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2170,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2145,
															"src": "4630:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2171,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2147,
															"src": "4637:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2172,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2149,
															"src": "4646:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2173,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2151,
															"src": "4653:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2174,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2153,
															"src": "4663:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2175,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2155,
															"src": "4666:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2176,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2157,
															"src": "4669:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2167,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2143,
															"src": "4617:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$1906",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2169,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4623:6:12",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1891,
														"src": "4617:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 2177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4617:54:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2178,
												"nodeType": "ExpressionStatement",
												"src": "4617:54:12"
											},
											{
												"assignments": [
													2180
												],
												"declarations": [
													{
														"constant": false,
														"id": 2180,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "4689:10:12",
														"nodeType": "VariableDeclaration",
														"scope": 2195,
														"src": "4681:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2179,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4681:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2185,
												"initialValue": {
													"arguments": [
														{
															"id": 2183,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2145,
															"src": "4715:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2181,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2143,
															"src": "4702:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$1906",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2182,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4708:6:12",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1899,
														"src": "4702:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4702:19:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4681:40:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2187,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2180,
																"src": "4739:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2188,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2161,
																	"src": "4753:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4767:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "4753:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4739:29:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 2192,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4770:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 2186,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4731:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4731:75:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2194,
												"nodeType": "ExpressionStatement",
												"src": "4731:75:12"
											}
										]
									},
									"documentation": {
										"id": 2140,
										"nodeType": "StructuredDocumentation",
										"src": "4195:141:12",
										"text": " @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."
									},
									"id": 2196,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "4350:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2143,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4383:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2196,
												"src": "4370:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$1906",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 2142,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2141,
														"name": "IERC20Permit",
														"nameLocations": [
															"4370:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1906,
														"src": "4370:12:12"
													},
													"referencedDeclaration": 1906,
													"src": "4370:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$1906",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2145,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4406:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2196,
												"src": "4398:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4398:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4429:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2196,
												"src": "4421:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4421:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4454:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2196,
												"src": "4446:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4446:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2151,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "4477:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2196,
												"src": "4469:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4469:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2153,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "4501:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2196,
												"src": "4495:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2152,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4495:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2155,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4520:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2196,
												"src": "4512:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2154,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4512:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2157,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "4539:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2196,
												"src": "4531:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2156,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4531:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4360:186:12"
									},
									"returnParameters": {
										"id": 2159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4556:0:12"
									},
									"scope": 2282,
									"src": "4341:472:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2232,
										"nodeType": "Block",
										"src": "5266:572:12",
										"statements": [
											{
												"assignments": [
													2206
												],
												"declarations": [
													{
														"constant": false,
														"id": 2206,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5628:10:12",
														"nodeType": "VariableDeclaration",
														"scope": 2232,
														"src": "5615:23:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2205,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5615:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2215,
												"initialValue": {
													"arguments": [
														{
															"id": 2212,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2202,
															"src": "5669:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 2213,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5675:34:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2209,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2200,
																	"src": "5649:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1870",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1870",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2208,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5641:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2207,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5641:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2210,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5641:14:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2211,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5656:12:12",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2372,
														"src": "5641:27:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 2214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5641:69:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5615:95:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2228,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2217,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2206,
																		"src": "5728:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2218,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5739:6:12",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "5728:17:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2219,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5749:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5728:22:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 2223,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2206,
																		"src": "5765:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 2225,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5778:4:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				},
																				"typeName": {
																					"id": 2224,
																					"name": "bool",
																					"nodeType": "ElementaryTypeName",
																					"src": "5778:4:12",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 2226,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5777:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	],
																	"expression": {
																		"id": 2221,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "5754:3:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 2222,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "5758:6:12",
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "5754:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2227,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5754:30:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5728:56:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
															"id": 2229,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5786:44:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															},
															"value": "SafeERC20: ERC20 operation did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															}
														],
														"id": 2216,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5720:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5720:111:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2231,
												"nodeType": "ExpressionStatement",
												"src": "5720:111:12"
											}
										]
									},
									"documentation": {
										"id": 2197,
										"nodeType": "StructuredDocumentation",
										"src": "4819:372:12",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 2233,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "5205:19:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2200,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5232:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "5225:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1870",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2199,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2198,
														"name": "IERC20",
														"nameLocations": [
															"5225:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1870,
														"src": "5225:6:12"
													},
													"referencedDeclaration": 1870,
													"src": "5225:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2202,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5252:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "5239:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2201,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5239:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5224:33:12"
									},
									"returnParameters": {
										"id": 2204,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5266:0:12"
									},
									"scope": 2282,
									"src": "5196:642:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2280,
										"nodeType": "Block",
										"src": "6428:505:12",
										"statements": [
											{
												"assignments": [
													2245,
													2247
												],
												"declarations": [
													{
														"constant": false,
														"id": 2245,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6729:7:12",
														"nodeType": "VariableDeclaration",
														"scope": 2280,
														"src": "6724:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2244,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6724:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2247,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6751:10:12",
														"nodeType": "VariableDeclaration",
														"scope": 2280,
														"src": "6738:23:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2246,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6738:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2255,
												"initialValue": {
													"arguments": [
														{
															"id": 2253,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2239,
															"src": "6785:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2250,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2237,
																	"src": "6773:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1870",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1870",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2249,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6765:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2248,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6765:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6765:14:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2252,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6780:4:12",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "6765:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6765:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6723:67:12"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2270,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2256,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2245,
															"src": "6819:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 2268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2260,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2257,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2247,
																				"src": "6831:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2258,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "6842:6:12",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "6831:17:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2259,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6852:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "6831:22:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 2263,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2247,
																				"src": "6868:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 2265,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "6881:4:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 2264,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "6881:4:12",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 2266,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "6880:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 2261,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "6857:3:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2262,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "6861:6:12",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "6857:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2267,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6857:30:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "6831:56:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 2269,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "6830:58:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "6819:69:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2275,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2237,
																		"src": "6919:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1870",
																			"typeString": "contract IERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1870",
																			"typeString": "contract IERC20"
																		}
																	],
																	"id": 2274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6911:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2273,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6911:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2276,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6911:14:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 2271,
																"name": "Address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2612,
																"src": "6892:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Address_$2612_$",
																	"typeString": "type(library Address)"
																}
															},
															"id": 2272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6900:10:12",
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2300,
															"src": "6892:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 2277,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6892:34:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6819:107:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2243,
												"id": 2279,
												"nodeType": "Return",
												"src": "6800:126:12"
											}
										]
									},
									"documentation": {
										"id": 2234,
										"nodeType": "StructuredDocumentation",
										"src": "5844:490:12",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 2281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "6348:23:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2237,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6379:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "6372:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1870",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2236,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2235,
														"name": "IERC20",
														"nameLocations": [
															"6372:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1870,
														"src": "6372:6:12"
													},
													"referencedDeclaration": 1870,
													"src": "6372:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2239,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6399:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "6386:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2238,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6386:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6371:33:12"
									},
									"returnParameters": {
										"id": 2243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2242,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "6422:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2241,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6422:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6421:6:12"
									},
									"scope": 2282,
									"src": "6339:594:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2283,
							"src": "701:6234:12",
							"usedErrors": []
						}
					],
					"src": "115:6821:12"
				},
				"id": 12
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							2612
						]
					},
					"id": 2613,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2284,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2285,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:13",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 2612,
							"linearizedBaseContracts": [
								2612
							],
							"name": "Address",
							"nameLocation": "202:7:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2299,
										"nodeType": "Block",
										"src": "1478:254:13",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 2293,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2288,
																"src": "1702:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2294,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1710:4:13",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1702:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2295,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1715:6:13",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1702:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2296,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1724:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1702:23:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2292,
												"id": 2298,
												"nodeType": "Return",
												"src": "1695:30:13"
											}
										]
									},
									"documentation": {
										"id": 2286,
										"nodeType": "StructuredDocumentation",
										"src": "216:1191:13",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 2300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1421:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2288,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1440:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2300,
												"src": "1432:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1431:17:13"
									},
									"returnParameters": {
										"id": 2292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2300,
												"src": "1472:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2290,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1472:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1471:6:13"
									},
									"scope": 2612,
									"src": "1412:320:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2333,
										"nodeType": "Block",
										"src": "2718:241:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2315,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2311,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2744:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$2612",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$2612",
																				"typeString": "library Address"
																			}
																		],
																		"id": 2310,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2736:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2309,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2736:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2312,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2736:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2313,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2750:7:13",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2736:21:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2314,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2305,
																"src": "2761:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2736:31:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 2316,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2769:31:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 2308,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2728:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2728:73:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2318,
												"nodeType": "ExpressionStatement",
												"src": "2728:73:13"
											},
											{
												"assignments": [
													2320,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2320,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2818:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 2333,
														"src": "2813:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2319,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2813:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2327,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2325,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2861:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 2321,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2303,
																"src": "2831:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2841:4:13",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2831:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2324,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2323,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2305,
																"src": "2853:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2831:29:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2831:33:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2812:52:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2329,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2320,
															"src": "2882:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 2330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2891:60:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 2328,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2874:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2874:78:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2332,
												"nodeType": "ExpressionStatement",
												"src": "2874:78:13"
											}
										]
									},
									"documentation": {
										"id": 2301,
										"nodeType": "StructuredDocumentation",
										"src": "1738:904:13",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 2334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2656:9:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2303,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2682:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "2666:25:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2666:15:13",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2305,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2701:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "2693:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:43:13"
									},
									"returnParameters": {
										"id": 2307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2718:0:13"
									},
									"scope": 2612,
									"src": "2647:312:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2351,
										"nodeType": "Block",
										"src": "3790:96:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2345,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2337,
															"src": "3829:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2346,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2339,
															"src": "3837:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2347,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3843:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 2348,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3846:32:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 2344,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2392,
															2436
														],
														"referencedDeclaration": 2436,
														"src": "3807:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3807:72:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2343,
												"id": 2350,
												"nodeType": "Return",
												"src": "3800:79:13"
											}
										]
									},
									"documentation": {
										"id": 2335,
										"nodeType": "StructuredDocumentation",
										"src": "2965:731:13",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 2352,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3710:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2337,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3731:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2352,
												"src": "3723:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3723:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3752:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2352,
												"src": "3739:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2338,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3739:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3722:35:13"
									},
									"returnParameters": {
										"id": 2343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2342,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2352,
												"src": "3776:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2341,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3776:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:14:13"
									},
									"scope": 2612,
									"src": "3701:185:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2371,
										"nodeType": "Block",
										"src": "4255:76:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2365,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2355,
															"src": "4294:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2366,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2357,
															"src": "4302:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4308:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 2368,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2359,
															"src": "4311:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2364,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2392,
															2436
														],
														"referencedDeclaration": 2436,
														"src": "4272:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4272:52:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2363,
												"id": 2370,
												"nodeType": "Return",
												"src": "4265:59:13"
											}
										]
									},
									"documentation": {
										"id": 2353,
										"nodeType": "StructuredDocumentation",
										"src": "3892:211:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 2372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4117:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2355,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4147:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2372,
												"src": "4139:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2354,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4139:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2357,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4176:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2372,
												"src": "4163:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2356,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4163:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2359,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4204:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2372,
												"src": "4190:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2358,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4190:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4129:93:13"
									},
									"returnParameters": {
										"id": 2363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2362,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2372,
												"src": "4241:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2361,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4241:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4240:14:13"
									},
									"scope": 2612,
									"src": "4108:223:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2391,
										"nodeType": "Block",
										"src": "4806:111:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2385,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2375,
															"src": "4845:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2386,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2377,
															"src": "4853:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2387,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2379,
															"src": "4859:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 2388,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4866:43:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 2384,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2392,
															2436
														],
														"referencedDeclaration": 2436,
														"src": "4823:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4823:87:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2383,
												"id": 2390,
												"nodeType": "Return",
												"src": "4816:94:13"
											}
										]
									},
									"documentation": {
										"id": 2373,
										"nodeType": "StructuredDocumentation",
										"src": "4337:351:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 2392,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4702:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2375,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4732:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2392,
												"src": "4724:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2374,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4724:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2377,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4753:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2392,
												"src": "4740:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2376,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4740:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2379,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4767:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2392,
												"src": "4759:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2378,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4759:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4723:50:13"
									},
									"returnParameters": {
										"id": 2383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2382,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2392,
												"src": "4792:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2381,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4792:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4791:14:13"
									},
									"scope": 2612,
									"src": "4693:224:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2435,
										"nodeType": "Block",
										"src": "5344:267:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2409,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5370:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$2612",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$2612",
																				"typeString": "library Address"
																			}
																		],
																		"id": 2408,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5362:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2407,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5362:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2410,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5362:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5376:7:13",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5362:21:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2412,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2399,
																"src": "5387:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5362:30:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 2414,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5394:40:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 2406,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5354:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5354:81:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2416,
												"nodeType": "ExpressionStatement",
												"src": "5354:81:13"
											},
											{
												"assignments": [
													2418,
													2420
												],
												"declarations": [
													{
														"constant": false,
														"id": 2418,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5451:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 2435,
														"src": "5446:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2417,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5446:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2420,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5473:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 2435,
														"src": "5460:23:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2419,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5460:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2427,
												"initialValue": {
													"arguments": [
														{
															"id": 2425,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2397,
															"src": "5513:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2421,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2395,
																"src": "5487:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5494:4:13",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5487:11:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2423,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2399,
																"src": "5506:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5487:25:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5487:31:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5445:73:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2429,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2395,
															"src": "5562:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2430,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2418,
															"src": "5570:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2431,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2420,
															"src": "5579:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2432,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2401,
															"src": "5591:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2428,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2567,
														"src": "5535:26:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5535:69:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2405,
												"id": 2434,
												"nodeType": "Return",
												"src": "5528:76:13"
											}
										]
									},
									"documentation": {
										"id": 2393,
										"nodeType": "StructuredDocumentation",
										"src": "4923:237:13",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 2436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5174:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2395,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5213:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2436,
												"src": "5205:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2394,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5205:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2397,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5242:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2436,
												"src": "5229:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2396,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5229:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2399,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5264:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2436,
												"src": "5256:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5256:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2401,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5293:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2436,
												"src": "5279:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2400,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5279:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5195:116:13"
									},
									"returnParameters": {
										"id": 2405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2404,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2436,
												"src": "5330:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2403,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5330:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5329:14:13"
									},
									"scope": 2612,
									"src": "5165:446:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2452,
										"nodeType": "Block",
										"src": "5888:97:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2447,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2439,
															"src": "5924:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2448,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2441,
															"src": "5932:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 2449,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5938:39:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 2446,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2453,
															2482
														],
														"referencedDeclaration": 2482,
														"src": "5905:18:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5905:73:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2445,
												"id": 2451,
												"nodeType": "Return",
												"src": "5898:80:13"
											}
										]
									},
									"documentation": {
										"id": 2437,
										"nodeType": "StructuredDocumentation",
										"src": "5617:166:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 2453,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5797:18:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2439,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5824:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2453,
												"src": "5816:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5816:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2441,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5845:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2453,
												"src": "5832:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2440,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5832:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5815:35:13"
									},
									"returnParameters": {
										"id": 2445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2444,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2453,
												"src": "5874:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2443,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5874:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5873:14:13"
									},
									"scope": 2612,
									"src": "5788:197:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2481,
										"nodeType": "Block",
										"src": "6327:168:13",
										"statements": [
											{
												"assignments": [
													2466,
													2468
												],
												"declarations": [
													{
														"constant": false,
														"id": 2466,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6343:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 2481,
														"src": "6338:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2465,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6338:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2468,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6365:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 2481,
														"src": "6352:23:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2467,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6352:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2473,
												"initialValue": {
													"arguments": [
														{
															"id": 2471,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2458,
															"src": "6397:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2469,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2456,
															"src": "6379:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2470,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6386:10:13",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6379:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 2472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6379:23:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6337:65:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2475,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2456,
															"src": "6446:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2476,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2466,
															"src": "6454:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2477,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2468,
															"src": "6463:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2478,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2460,
															"src": "6475:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2474,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2567,
														"src": "6419:26:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2479,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6419:69:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2464,
												"id": 2480,
												"nodeType": "Return",
												"src": "6412:76:13"
											}
										]
									},
									"documentation": {
										"id": 2454,
										"nodeType": "StructuredDocumentation",
										"src": "5991:173:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 2482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6178:18:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2456,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6214:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2482,
												"src": "6206:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2455,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2458,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6243:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2482,
												"src": "6230:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2457,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6230:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2460,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6271:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2482,
												"src": "6257:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2459,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6196:93:13"
									},
									"returnParameters": {
										"id": 2464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2463,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2482,
												"src": "6313:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2462,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6313:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6312:14:13"
									},
									"scope": 2612,
									"src": "6169:326:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2498,
										"nodeType": "Block",
										"src": "6771:101:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2493,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2485,
															"src": "6809:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2494,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2487,
															"src": "6817:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 2495,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6823:41:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 2492,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2499,
															2528
														],
														"referencedDeclaration": 2528,
														"src": "6788:20:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 2496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6788:77:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2491,
												"id": 2497,
												"nodeType": "Return",
												"src": "6781:84:13"
											}
										]
									},
									"documentation": {
										"id": 2483,
										"nodeType": "StructuredDocumentation",
										"src": "6501:168:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 2499,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6683:20:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2485,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6712:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2499,
												"src": "6704:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6704:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2487,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6733:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2499,
												"src": "6720:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2486,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6720:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6703:35:13"
									},
									"returnParameters": {
										"id": 2491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2490,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2499,
												"src": "6757:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2489,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6757:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6756:14:13"
									},
									"scope": 2612,
									"src": "6674:198:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2527,
										"nodeType": "Block",
										"src": "7213:170:13",
										"statements": [
											{
												"assignments": [
													2512,
													2514
												],
												"declarations": [
													{
														"constant": false,
														"id": 2512,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7229:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 2527,
														"src": "7224:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2511,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7224:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2514,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7251:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 2527,
														"src": "7238:23:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2513,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7238:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2519,
												"initialValue": {
													"arguments": [
														{
															"id": 2517,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2504,
															"src": "7285:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2515,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2502,
															"src": "7265:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2516,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7272:12:13",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7265:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 2518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7265:25:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7223:67:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2521,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2502,
															"src": "7334:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2522,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2512,
															"src": "7342:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2523,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2514,
															"src": "7351:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2524,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2506,
															"src": "7363:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2520,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2567,
														"src": "7307:26:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7307:69:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2510,
												"id": 2526,
												"nodeType": "Return",
												"src": "7300:76:13"
											}
										]
									},
									"documentation": {
										"id": 2500,
										"nodeType": "StructuredDocumentation",
										"src": "6878:175:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 2528,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7067:20:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2502,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7105:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2528,
												"src": "7097:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2501,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7097:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2504,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7134:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2528,
												"src": "7121:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2503,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7121:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2506,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7162:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2528,
												"src": "7148:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2505,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7148:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7087:93:13"
									},
									"returnParameters": {
										"id": 2510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2509,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2528,
												"src": "7199:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2508,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7199:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7198:14:13"
									},
									"scope": 2612,
									"src": "7058:325:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2566,
										"nodeType": "Block",
										"src": "7865:434:13",
										"statements": [
											{
												"condition": {
													"id": 2542,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2533,
													"src": "7879:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2564,
													"nodeType": "Block",
													"src": "8235:58:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2560,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2535,
																		"src": "8257:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 2561,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2537,
																		"src": "8269:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2559,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2611,
																	"src": "8249:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 2562,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8249:33:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2563,
															"nodeType": "ExpressionStatement",
															"src": "8249:33:13"
														}
													]
												},
												"id": 2565,
												"nodeType": "IfStatement",
												"src": "7875:418:13",
												"trueBody": {
													"id": 2558,
													"nodeType": "Block",
													"src": "7888:341:13",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2546,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2543,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2535,
																		"src": "7906:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2544,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7917:6:13",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7906:17:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2545,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7927:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7906:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2555,
															"nodeType": "IfStatement",
															"src": "7902:286:13",
															"trueBody": {
																"id": 2554,
																"nodeType": "Block",
																"src": "7930:258:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 2549,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2531,
																							"src": "8132:6:13",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 2548,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2300,
																						"src": "8121:10:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 2550,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8121:18:13",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 2551,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8141:31:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 2547,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8113:7:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 2552,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8113:60:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2553,
																		"nodeType": "ExpressionStatement",
																		"src": "8113:60:13"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 2556,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2535,
																"src": "8208:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2541,
															"id": 2557,
															"nodeType": "Return",
															"src": "8201:17:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2529,
										"nodeType": "StructuredDocumentation",
										"src": "7389:277:13",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 2567,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7680:26:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2531,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7724:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2567,
												"src": "7716:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2530,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7716:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2533,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7745:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2567,
												"src": "7740:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2532,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7740:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2535,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7775:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2567,
												"src": "7762:23:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2534,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7762:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2537,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7809:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2567,
												"src": "7795:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2536,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7795:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:121:13"
									},
									"returnParameters": {
										"id": 2541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2540,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2567,
												"src": "7851:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2539,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7851:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7850:14:13"
									},
									"scope": 2612,
									"src": "7671:628:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2590,
										"nodeType": "Block",
										"src": "8680:135:13",
										"statements": [
											{
												"condition": {
													"id": 2579,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2570,
													"src": "8694:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2588,
													"nodeType": "Block",
													"src": "8751:58:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2584,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2572,
																		"src": "8773:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 2585,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2574,
																		"src": "8785:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2583,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2611,
																	"src": "8765:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 2586,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8765:33:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2587,
															"nodeType": "ExpressionStatement",
															"src": "8765:33:13"
														}
													]
												},
												"id": 2589,
												"nodeType": "IfStatement",
												"src": "8690:119:13",
												"trueBody": {
													"id": 2582,
													"nodeType": "Block",
													"src": "8703:42:13",
													"statements": [
														{
															"expression": {
																"id": 2580,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2572,
																"src": "8724:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2578,
															"id": 2581,
															"nodeType": "Return",
															"src": "8717:17:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2568,
										"nodeType": "StructuredDocumentation",
										"src": "8305:210:13",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 2591,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8529:16:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2570,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8560:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2591,
												"src": "8555:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2569,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8555:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2572,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8590:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2591,
												"src": "8577:23:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2571,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8577:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2574,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8624:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2591,
												"src": "8610:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2573,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8610:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8545:97:13"
									},
									"returnParameters": {
										"id": 2578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2577,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2591,
												"src": "8666:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2576,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8666:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8665:14:13"
									},
									"scope": 2612,
									"src": "8520:295:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2610,
										"nodeType": "Block",
										"src": "8904:457:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2598,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2593,
															"src": "8980:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2599,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8991:6:13",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8980:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2600,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9000:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8980:21:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2608,
													"nodeType": "Block",
													"src": "9310:45:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2605,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2595,
																		"src": "9331:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2604,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9324:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 2606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9324:20:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2607,
															"nodeType": "ExpressionStatement",
															"src": "9324:20:13"
														}
													]
												},
												"id": 2609,
												"nodeType": "IfStatement",
												"src": "8976:379:13",
												"trueBody": {
													"id": 2603,
													"nodeType": "Block",
													"src": "9003:301:13",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9161:133:13",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9179:40:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9208:10:13"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9202:5:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9202:17:13"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9183:15:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9247:2:13",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9251:10:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9243:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9243:19:13"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9264:15:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9236:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9236:44:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9236:44:13"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 2593,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9208:10:13",
																	"valueSize": 1
																},
																{
																	"declaration": 2593,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9251:10:13",
																	"valueSize": 1
																}
															],
															"id": 2602,
															"nodeType": "InlineAssembly",
															"src": "9152:142:13"
														}
													]
												}
											}
										]
									},
									"id": 2611,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8830:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2593,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8851:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2611,
												"src": "8838:23:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2592,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8838:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2595,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8877:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2611,
												"src": "8863:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2594,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8863:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8837:53:13"
									},
									"returnParameters": {
										"id": 2597,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8904:0:13"
									},
									"scope": 2612,
									"src": "8821:540:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2613,
							"src": "194:9169:13",
							"usedErrors": []
						}
					],
					"src": "101:9263:13"
				},
				"id": 13
			},
			"lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							2634
						]
					},
					"id": 2635,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2614,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:14"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2615,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:14",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 2634,
							"linearizedBaseContracts": [
								2634
							],
							"name": "Context",
							"nameLocation": "626:7:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2623,
										"nodeType": "Block",
										"src": "702:34:14",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2620,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:14",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "723:6:14",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2619,
												"id": 2622,
												"nodeType": "Return",
												"src": "712:17:14"
											}
										]
									},
									"id": 2624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2616,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:14"
									},
									"returnParameters": {
										"id": 2619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2618,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2624,
												"src": "693:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:14"
									},
									"scope": 2634,
									"src": "640:96:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2632,
										"nodeType": "Block",
										"src": "809:32:14",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2629,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:14",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "830:4:14",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 2628,
												"id": 2631,
												"nodeType": "Return",
												"src": "819:15:14"
											}
										]
									},
									"id": 2633,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2625,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:14"
									},
									"returnParameters": {
										"id": 2628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2627,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2633,
												"src": "793:14:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:14"
									},
									"scope": 2634,
									"src": "742:99:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2635,
							"src": "608:235:14",
							"usedErrors": []
						}
					],
					"src": "86:758:14"
				},
				"id": 14
			},
			"lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol": {
				"ast": {
					"absolutePath": "lib/allo-v2/lib/solady/src/utils/SafeTransferLib.sol",
					"exportedSymbols": {
						"SafeTransferLib": [
							2792
						]
					},
					"id": 2793,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2636,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeTransferLib",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2637,
								"nodeType": "StructuredDocumentation",
								"src": "57:539:15",
								"text": "@notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\n @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n @dev Note:\n - For ETH transfers, please use `forceSafeTransferETH` for gas griefing protection.\n - For ERC20s, this implementation won't check that a token has code,\n responsibility is delegated to the caller."
							},
							"fullyImplemented": true,
							"id": 2792,
							"linearizedBaseContracts": [
								2792
							],
							"name": "SafeTransferLib",
							"nameLocation": "604:15:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2638,
										"nodeType": "StructuredDocumentation",
										"src": "909:37:15",
										"text": "@dev The ETH transfer has failed."
									},
									"errorSelector": "b12d13eb",
									"id": 2640,
									"name": "ETHTransferFailed",
									"nameLocation": "957:17:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2639,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "974:2:15"
									},
									"src": "951:26:15"
								},
								{
									"documentation": {
										"id": 2641,
										"nodeType": "StructuredDocumentation",
										"src": "983:45:15",
										"text": "@dev The ERC20 `transferFrom` has failed."
									},
									"errorSelector": "7939f424",
									"id": 2643,
									"name": "TransferFromFailed",
									"nameLocation": "1039:18:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2642,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1057:2:15"
									},
									"src": "1033:27:15"
								},
								{
									"documentation": {
										"id": 2644,
										"nodeType": "StructuredDocumentation",
										"src": "1066:41:15",
										"text": "@dev The ERC20 `transfer` has failed."
									},
									"errorSelector": "90b8ec18",
									"id": 2646,
									"name": "TransferFailed",
									"nameLocation": "1118:14:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2645,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1132:2:15"
									},
									"src": "1112:23:15"
								},
								{
									"documentation": {
										"id": 2647,
										"nodeType": "StructuredDocumentation",
										"src": "1141:40:15",
										"text": "@dev The ERC20 `approve` has failed."
									},
									"errorSelector": "3e3f8f73",
									"id": 2649,
									"name": "ApproveFailed",
									"nameLocation": "1192:13:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1205:2:15"
									},
									"src": "1186:22:15"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2650,
										"nodeType": "StructuredDocumentation",
										"src": "1497:100:15",
										"text": "@dev Suggested gas stipend for contract receiving ETH\n that disallows any storage writes."
									},
									"id": 2653,
									"mutability": "constant",
									"name": "GAS_STIPEND_NO_STORAGE_WRITES",
									"nameLocation": "1628:29:15",
									"nodeType": "VariableDeclaration",
									"scope": 2792,
									"src": "1602:62:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2651,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1602:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32333030",
										"id": 2652,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1660:4:15",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2300_by_1",
											"typeString": "int_const 2300"
										},
										"value": "2300"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2654,
										"nodeType": "StructuredDocumentation",
										"src": "1671:202:15",
										"text": "@dev Suggested gas stipend for contract receiving ETH to perform a few\n storage reads and writes, but low enough to prevent griefing.\n Multiply by a small constant (e.g. 2), if needed."
									},
									"id": 2657,
									"mutability": "constant",
									"name": "GAS_STIPEND_NO_GRIEF",
									"nameLocation": "1904:20:15",
									"nodeType": "VariableDeclaration",
									"scope": 2792,
									"src": "1878:55:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2655,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1878:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "313030303030",
										"id": 2656,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1927:6:15",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_100000_by_1",
											"typeString": "int_const 100000"
										},
										"value": "100000"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2666,
										"nodeType": "Block",
										"src": "2517:428:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2579:360:15",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2718:211:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2816:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2822:10:15",
																					"type": "",
																					"value": "0xb12d13eb"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2809:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2809:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2809:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2904:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2910:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2897:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2897:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2897:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "gas",
																					"nodeType": "YulIdentifier",
																					"src": "2674:3:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2674:5:15"
																			},
																			{
																				"name": "to",
																				"nodeType": "YulIdentifier",
																				"src": "2681:2:15"
																			},
																			{
																				"name": "amount",
																				"nodeType": "YulIdentifier",
																				"src": "2685:6:15"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2693:4:15",
																				"type": "",
																				"value": "0x00"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2699:4:15",
																				"type": "",
																				"value": "0x00"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2705:4:15",
																				"type": "",
																				"value": "0x00"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2711:4:15",
																				"type": "",
																				"value": "0x00"
																			}
																		],
																		"functionName": {
																			"name": "call",
																			"nodeType": "YulIdentifier",
																			"src": "2669:4:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2669:47:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2662:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "2662:55:15"
															},
															"nodeType": "YulIf",
															"src": "2659:270:15"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2662,
														"isOffset": false,
														"isSlot": false,
														"src": "2685:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2660,
														"isOffset": false,
														"isSlot": false,
														"src": "2681:2:15",
														"valueSize": 1
													}
												],
												"id": 2665,
												"nodeType": "InlineAssembly",
												"src": "2570:369:15"
											}
										]
									},
									"documentation": {
										"id": 2658,
										"nodeType": "StructuredDocumentation",
										"src": "2223:227:15",
										"text": "@dev Sends `amount` (in wei) ETH to `to`.\n Reverts upon failure.\n Note: This implementation does NOT protect against gas griefing.\n Please use `forceSafeTransferETH` for gas griefing protection."
									},
									"id": 2667,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nameLocation": "2464:15:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2660,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2488:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "2480:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2480:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2662,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2500:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "2492:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2479:28:15"
									},
									"returnParameters": {
										"id": 2664,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2517:0:15"
									},
									"scope": 2792,
									"src": "2455:490:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2678,
										"nodeType": "Block",
										"src": "3467:1135:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3529:1067:15",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3620:211:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3718:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3724:10:15",
																					"type": "",
																					"value": "0xb12d13eb"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3711:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3711:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3711:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3806:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3812:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3799:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3799:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3799:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "selfbalance",
																			"nodeType": "YulIdentifier",
																			"src": "3597:11:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3597:13:15"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "3612:6:15"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3594:2:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "3594:25:15"
															},
															"nodeType": "YulIf",
															"src": "3591:240:15"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3974:612:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3999:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"name": "to",
																					"nodeType": "YulIdentifier",
																					"src": "4005:2:15"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3992:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3992:16:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3992:16:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4072:4:15",
																					"type": "",
																					"value": "0x0b"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4078:4:15",
																					"type": "",
																					"value": "0x73"
																				}
																			],
																			"functionName": {
																				"name": "mstore8",
																				"nodeType": "YulIdentifier",
																				"src": "4064:7:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4064:19:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4064:19:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4128:4:15",
																					"type": "",
																					"value": "0x20"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4134:4:15",
																					"type": "",
																					"value": "0xff"
																				}
																			],
																			"functionName": {
																				"name": "mstore8",
																				"nodeType": "YulIdentifier",
																				"src": "4120:7:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4120:19:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4120:19:15"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "4386:186:15",
																			"statements": [
																				{
																					"body": {
																						"nodeType": "YulBlock",
																						"src": "4532:22:15",
																						"statements": [
																							{
																								"expression": {
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "4541:4:15",
																											"type": "",
																											"value": "0x00"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "4547:4:15",
																											"type": "",
																											"value": "0x00"
																										}
																									],
																									"functionName": {
																										"name": "revert",
																										"nodeType": "YulIdentifier",
																										"src": "4534:6:15"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "4534:18:15"
																								},
																								"nodeType": "YulExpressionStatement",
																								"src": "4534:18:15"
																							}
																						]
																					},
																					"condition": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"arguments": [],
																										"functionName": {
																											"name": "gas",
																											"nodeType": "YulIdentifier",
																											"src": "4515:3:15"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "4515:5:15"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4522:7:15",
																										"type": "",
																										"value": "1000000"
																									}
																								],
																								"functionName": {
																									"name": "gt",
																									"nodeType": "YulIdentifier",
																									"src": "4512:2:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4512:18:15"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "4505:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4505:26:15"
																					},
																					"nodeType": "YulIf",
																					"src": "4502:52:15"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "amount",
																							"nodeType": "YulIdentifier",
																							"src": "4365:6:15"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4373:4:15",
																							"type": "",
																							"value": "0x0b"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4379:4:15",
																							"type": "",
																							"value": "0x16"
																						}
																					],
																					"functionName": {
																						"name": "create",
																						"nodeType": "YulIdentifier",
																						"src": "4358:6:15"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4358:26:15"
																				}
																			],
																			"functionName": {
																				"name": "iszero",
																				"nodeType": "YulIdentifier",
																				"src": "4351:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4351:34:15"
																		},
																		"nodeType": "YulIf",
																		"src": "4348:224:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "gasStipend",
																				"nodeType": "YulIdentifier",
																				"src": "3925:10:15"
																			},
																			{
																				"name": "to",
																				"nodeType": "YulIdentifier",
																				"src": "3937:2:15"
																			},
																			{
																				"name": "amount",
																				"nodeType": "YulIdentifier",
																				"src": "3941:6:15"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3949:4:15",
																				"type": "",
																				"value": "0x00"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3955:4:15",
																				"type": "",
																				"value": "0x00"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3961:4:15",
																				"type": "",
																				"value": "0x00"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3967:4:15",
																				"type": "",
																				"value": "0x00"
																			}
																		],
																		"functionName": {
																			"name": "call",
																			"nodeType": "YulIdentifier",
																			"src": "3920:4:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3920:52:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3913:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "3913:60:15"
															},
															"nodeType": "YulIf",
															"src": "3910:676:15"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2672,
														"isOffset": false,
														"isSlot": false,
														"src": "3612:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2672,
														"isOffset": false,
														"isSlot": false,
														"src": "3941:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2672,
														"isOffset": false,
														"isSlot": false,
														"src": "4365:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2674,
														"isOffset": false,
														"isSlot": false,
														"src": "3925:10:15",
														"valueSize": 1
													},
													{
														"declaration": 2670,
														"isOffset": false,
														"isSlot": false,
														"src": "3937:2:15",
														"valueSize": 1
													},
													{
														"declaration": 2670,
														"isOffset": false,
														"isSlot": false,
														"src": "4005:2:15",
														"valueSize": 1
													}
												],
												"id": 2677,
												"nodeType": "InlineAssembly",
												"src": "3520:1076:15"
											}
										]
									},
									"documentation": {
										"id": 2668,
										"nodeType": "StructuredDocumentation",
										"src": "2951:424:15",
										"text": "@dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n The `gasStipend` can be set to a low enough value to prevent\n storage writes or gas griefing.\n If sending via the normal procedure fails, force sends the ETH by\n creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\n Reverts if the current contract has insufficient balance."
									},
									"id": 2679,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceSafeTransferETH",
									"nameLocation": "3389:20:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2670,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3418:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2679,
												"src": "3410:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2669,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3410:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2672,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3430:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2679,
												"src": "3422:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3422:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2674,
												"mutability": "mutable",
												"name": "gasStipend",
												"nameLocation": "3446:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2679,
												"src": "3438:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3438:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3409:48:15"
									},
									"returnParameters": {
										"id": 2676,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3467:0:15"
									},
									"scope": 2792,
									"src": "3380:1222:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2688,
										"nodeType": "Block",
										"src": "5193:1234:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5344:1077:15",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5435:211:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5533:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5539:10:15",
																					"type": "",
																					"value": "0xb12d13eb"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5526:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5526:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5526:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5621:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5627:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5614:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5614:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5614:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "selfbalance",
																			"nodeType": "YulIdentifier",
																			"src": "5412:11:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5412:13:15"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "5427:6:15"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5409:2:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "5409:25:15"
															},
															"nodeType": "YulIf",
															"src": "5406:240:15"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5799:612:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5824:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"name": "to",
																					"nodeType": "YulIdentifier",
																					"src": "5830:2:15"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5817:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5817:16:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5817:16:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5897:4:15",
																					"type": "",
																					"value": "0x0b"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5903:4:15",
																					"type": "",
																					"value": "0x73"
																				}
																			],
																			"functionName": {
																				"name": "mstore8",
																				"nodeType": "YulIdentifier",
																				"src": "5889:7:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5889:19:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5889:19:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5953:4:15",
																					"type": "",
																					"value": "0x20"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5959:4:15",
																					"type": "",
																					"value": "0xff"
																				}
																			],
																			"functionName": {
																				"name": "mstore8",
																				"nodeType": "YulIdentifier",
																				"src": "5945:7:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5945:19:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5945:19:15"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "6211:186:15",
																			"statements": [
																				{
																					"body": {
																						"nodeType": "YulBlock",
																						"src": "6357:22:15",
																						"statements": [
																							{
																								"expression": {
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "6366:4:15",
																											"type": "",
																											"value": "0x00"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "6372:4:15",
																											"type": "",
																											"value": "0x00"
																										}
																									],
																									"functionName": {
																										"name": "revert",
																										"nodeType": "YulIdentifier",
																										"src": "6359:6:15"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "6359:18:15"
																								},
																								"nodeType": "YulExpressionStatement",
																								"src": "6359:18:15"
																							}
																						]
																					},
																					"condition": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"arguments": [],
																										"functionName": {
																											"name": "gas",
																											"nodeType": "YulIdentifier",
																											"src": "6340:3:15"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6340:5:15"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6347:7:15",
																										"type": "",
																										"value": "1000000"
																									}
																								],
																								"functionName": {
																									"name": "gt",
																									"nodeType": "YulIdentifier",
																									"src": "6337:2:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6337:18:15"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "6330:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6330:26:15"
																					},
																					"nodeType": "YulIf",
																					"src": "6327:52:15"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "amount",
																							"nodeType": "YulIdentifier",
																							"src": "6190:6:15"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6198:4:15",
																							"type": "",
																							"value": "0x0b"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6204:4:15",
																							"type": "",
																							"value": "0x16"
																						}
																					],
																					"functionName": {
																						"name": "create",
																						"nodeType": "YulIdentifier",
																						"src": "6183:6:15"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6183:26:15"
																				}
																			],
																			"functionName": {
																				"name": "iszero",
																				"nodeType": "YulIdentifier",
																				"src": "6176:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6176:34:15"
																		},
																		"nodeType": "YulIf",
																		"src": "6173:224:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "GAS_STIPEND_NO_GRIEF",
																				"nodeType": "YulIdentifier",
																				"src": "5740:20:15"
																			},
																			{
																				"name": "to",
																				"nodeType": "YulIdentifier",
																				"src": "5762:2:15"
																			},
																			{
																				"name": "amount",
																				"nodeType": "YulIdentifier",
																				"src": "5766:6:15"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5774:4:15",
																				"type": "",
																				"value": "0x00"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5780:4:15",
																				"type": "",
																				"value": "0x00"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5786:4:15",
																				"type": "",
																				"value": "0x00"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5792:4:15",
																				"type": "",
																				"value": "0x00"
																			}
																		],
																		"functionName": {
																			"name": "call",
																			"nodeType": "YulIdentifier",
																			"src": "5735:4:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5735:62:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5728:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "5728:70:15"
															},
															"nodeType": "YulIf",
															"src": "5725:686:15"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2657,
														"isOffset": false,
														"isSlot": false,
														"src": "5740:20:15",
														"valueSize": 1
													},
													{
														"declaration": 2684,
														"isOffset": false,
														"isSlot": false,
														"src": "5427:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2684,
														"isOffset": false,
														"isSlot": false,
														"src": "5766:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2684,
														"isOffset": false,
														"isSlot": false,
														"src": "6190:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2682,
														"isOffset": false,
														"isSlot": false,
														"src": "5762:2:15",
														"valueSize": 1
													},
													{
														"declaration": 2682,
														"isOffset": false,
														"isSlot": false,
														"src": "5830:2:15",
														"valueSize": 1
													}
												],
												"id": 2687,
												"nodeType": "InlineAssembly",
												"src": "5335:1086:15"
											}
										]
									},
									"documentation": {
										"id": 2680,
										"nodeType": "StructuredDocumentation",
										"src": "4608:513:15",
										"text": "@dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\n equal to `GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\n for 99% of cases and can be overridden with the three-argument version of this\n function if necessary.\n If sending via the normal procedure fails, force sends the ETH by\n creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\n Reverts if the current contract has insufficient balance."
									},
									"id": 2689,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceSafeTransferETH",
									"nameLocation": "5135:20:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2682,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5164:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2689,
												"src": "5156:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2681,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5156:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2684,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5176:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2689,
												"src": "5168:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5168:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5155:28:15"
									},
									"returnParameters": {
										"id": 2686,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5193:0:15"
									},
									"scope": 2792,
									"src": "5126:1301:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2702,
										"nodeType": "Block",
										"src": "6949:221:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7011:153:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7091:63:15",
															"value": {
																"arguments": [
																	{
																		"name": "gasStipend",
																		"nodeType": "YulIdentifier",
																		"src": "7107:10:15"
																	},
																	{
																		"name": "to",
																		"nodeType": "YulIdentifier",
																		"src": "7119:2:15"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "7123:6:15"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7131:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7137:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7143:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7149:4:15",
																		"type": "",
																		"value": "0x00"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nodeType": "YulIdentifier",
																	"src": "7102:4:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "7102:52:15"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nodeType": "YulIdentifier",
																	"src": "7091:7:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2694,
														"isOffset": false,
														"isSlot": false,
														"src": "7123:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2696,
														"isOffset": false,
														"isSlot": false,
														"src": "7107:10:15",
														"valueSize": 1
													},
													{
														"declaration": 2699,
														"isOffset": false,
														"isSlot": false,
														"src": "7091:7:15",
														"valueSize": 1
													},
													{
														"declaration": 2692,
														"isOffset": false,
														"isSlot": false,
														"src": "7119:2:15",
														"valueSize": 1
													}
												],
												"id": 2701,
												"nodeType": "InlineAssembly",
												"src": "7002:162:15"
											}
										]
									},
									"documentation": {
										"id": 2690,
										"nodeType": "StructuredDocumentation",
										"src": "6433:383:15",
										"text": "@dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n The `gasStipend` can be set to a low enough value to prevent\n storage writes or gas griefing.\n Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\n Note: Does NOT revert upon failure.\n Returns whether the transfer of ETH is successful instead."
									},
									"id": 2703,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransferETH",
									"nameLocation": "6830:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2692,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6857:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2703,
												"src": "6849:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2691,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6849:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2694,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6869:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2703,
												"src": "6861:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6861:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2696,
												"mutability": "mutable",
												"name": "gasStipend",
												"nameLocation": "6885:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2703,
												"src": "6877:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2695,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6877:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6848:48:15"
									},
									"returnParameters": {
										"id": 2700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2699,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6936:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2703,
												"src": "6931:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2698,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6931:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6930:14:15"
									},
									"scope": 2792,
									"src": "6821:349:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2716,
										"nodeType": "Block",
										"src": "7763:1287:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7825:1219:15",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7839:20:15",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7854:4:15",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7848:5:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "7848:11:15"
															},
															"variables": [
																{
																	"name": "m",
																	"nodeType": "YulTypedName",
																	"src": "7843:1:15",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7914:4:15",
																		"type": "",
																		"value": "0x60"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "7920:6:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7907:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "7907:20:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7907:20:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7979:4:15",
																		"type": "",
																		"value": "0x40"
																	},
																	{
																		"name": "to",
																		"nodeType": "YulIdentifier",
																		"src": "7985:2:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7972:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "7972:16:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7972:16:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8036:4:15",
																		"type": "",
																		"value": "0x2c"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8046:2:15",
																				"type": "",
																				"value": "96"
																			},
																			{
																				"name": "from",
																				"nodeType": "YulIdentifier",
																				"src": "8050:4:15"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8042:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8042:13:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8029:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "8029:27:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8029:27:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8193:4:15",
																		"type": "",
																		"value": "0x0c"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8199:34:15",
																		"type": "",
																		"value": "0x23b872dd000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8186:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "8186:48:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8186:48:15"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8695:212:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8794:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8800:10:15",
																					"type": "",
																					"value": "0x7939f424"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8787:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8787:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8787:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8882:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8888:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8875:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8875:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8875:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8559:4:15",
																										"type": "",
																										"value": "0x00"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "8553:5:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8553:11:15"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8566:1:15",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "eq",
																							"nodeType": "YulIdentifier",
																							"src": "8550:2:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8550:18:15"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "returndatasize",
																									"nodeType": "YulIdentifier",
																									"src": "8577:14:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8577:16:15"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "8570:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8570:24:15"
																					}
																				],
																				"functionName": {
																					"name": "or",
																					"nodeType": "YulIdentifier",
																					"src": "8547:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8547:48:15"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "gas",
																							"nodeType": "YulIdentifier",
																							"src": "8622:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8622:5:15"
																					},
																					{
																						"name": "token",
																						"nodeType": "YulIdentifier",
																						"src": "8629:5:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8636:1:15",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8639:4:15",
																						"type": "",
																						"value": "0x1c"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8645:4:15",
																						"type": "",
																						"value": "0x64"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8651:4:15",
																						"type": "",
																						"value": "0x00"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8657:4:15",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "call",
																					"nodeType": "YulIdentifier",
																					"src": "8617:4:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8617:45:15"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8275:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8275:405:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8251:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "8251:443:15"
															},
															"nodeType": "YulIf",
															"src": "8248:659:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8928:4:15",
																		"type": "",
																		"value": "0x60"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8934:1:15",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8921:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "8921:15:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8921:15:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8990:4:15",
																		"type": "",
																		"value": "0x40"
																	},
																	{
																		"name": "m",
																		"nodeType": "YulIdentifier",
																		"src": "8996:1:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8983:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "8983:15:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8983:15:15"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2712,
														"isOffset": false,
														"isSlot": false,
														"src": "7920:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2708,
														"isOffset": false,
														"isSlot": false,
														"src": "8050:4:15",
														"valueSize": 1
													},
													{
														"declaration": 2710,
														"isOffset": false,
														"isSlot": false,
														"src": "7985:2:15",
														"valueSize": 1
													},
													{
														"declaration": 2706,
														"isOffset": false,
														"isSlot": false,
														"src": "8629:5:15",
														"valueSize": 1
													}
												],
												"id": 2715,
												"nodeType": "InlineAssembly",
												"src": "7816:1228:15"
											}
										]
									},
									"documentation": {
										"id": 2704,
										"nodeType": "StructuredDocumentation",
										"src": "7459:207:15",
										"text": "@dev Sends `amount` of ERC20 `token` from `from` to `to`.\n Reverts upon failure.\n The `from` account must have at least `amount` approved for\n the current contract to manage."
									},
									"id": 2717,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "7680:16:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2706,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7705:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2717,
												"src": "7697:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2705,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7697:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2708,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7720:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2717,
												"src": "7712:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2707,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7712:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2710,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7734:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2717,
												"src": "7726:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2709,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7726:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2712,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7746:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2717,
												"src": "7738:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7738:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7696:57:15"
									},
									"returnParameters": {
										"id": 2714,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7763:0:15"
									},
									"scope": 2792,
									"src": "7671:1379:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2730,
										"nodeType": "Block",
										"src": "9390:1948:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "9452:1880:15",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9466:20:15",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9481:4:15",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9475:5:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "9475:11:15"
															},
															"variables": [
																{
																	"name": "m",
																	"nodeType": "YulTypedName",
																	"src": "9470:1:15",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9541:4:15",
																		"type": "",
																		"value": "0x40"
																	},
																	{
																		"name": "to",
																		"nodeType": "YulIdentifier",
																		"src": "9547:2:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9534:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "9534:16:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9534:16:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9598:4:15",
																		"type": "",
																		"value": "0x2c"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9608:2:15",
																				"type": "",
																				"value": "96"
																			},
																			{
																				"name": "from",
																				"nodeType": "YulIdentifier",
																				"src": "9612:4:15"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "9604:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9604:13:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9591:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "9591:27:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9591:27:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9736:4:15",
																		"type": "",
																		"value": "0x0c"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9742:34:15",
																		"type": "",
																		"value": "0x70a08231000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9729:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "9729:48:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9729:48:15"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10062:212:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10161:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10167:10:15",
																					"type": "",
																					"value": "0x7939f424"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10154:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10154:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10154:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10249:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10255:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10242:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10242:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10242:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "returndatasize",
																							"nodeType": "YulIdentifier",
																							"src": "9905:14:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9905:16:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9923:4:15",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "9902:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9902:26:15"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "gas",
																							"nodeType": "YulIdentifier",
																							"src": "9992:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9992:5:15"
																					},
																					{
																						"name": "token",
																						"nodeType": "YulIdentifier",
																						"src": "9999:5:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10006:4:15",
																						"type": "",
																						"value": "0x1c"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10012:4:15",
																						"type": "",
																						"value": "0x24"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10018:4:15",
																						"type": "",
																						"value": "0x60"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10024:4:15",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "staticcall",
																					"nodeType": "YulIdentifier",
																					"src": "9981:10:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9981:48:15"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "9817:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9817:230:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9793:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "9793:268:15"
															},
															"nodeType": "YulIf",
															"src": "9790:484:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10382:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10388:10:15",
																		"type": "",
																		"value": "0x23b872dd"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10375:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "10375:24:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10375:24:15"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10501:21:15",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10517:4:15",
																		"type": "",
																		"value": "0x60"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10511:5:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "10511:11:15"
															},
															"variableNames": [
																{
																	"name": "amount",
																	"nodeType": "YulIdentifier",
																	"src": "10501:6:15"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10983:212:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11082:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11088:10:15",
																					"type": "",
																					"value": "0x7939f424"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "11075:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11075:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11075:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11170:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11176:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11163:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11163:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11163:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "10847:4:15",
																										"type": "",
																										"value": "0x00"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "10841:5:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10841:11:15"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10854:1:15",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "eq",
																							"nodeType": "YulIdentifier",
																							"src": "10838:2:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10838:18:15"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "returndatasize",
																									"nodeType": "YulIdentifier",
																									"src": "10865:14:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10865:16:15"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "10858:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10858:24:15"
																					}
																				],
																				"functionName": {
																					"name": "or",
																					"nodeType": "YulIdentifier",
																					"src": "10835:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10835:48:15"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "gas",
																							"nodeType": "YulIdentifier",
																							"src": "10910:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10910:5:15"
																					},
																					{
																						"name": "token",
																						"nodeType": "YulIdentifier",
																						"src": "10917:5:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10924:1:15",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10927:4:15",
																						"type": "",
																						"value": "0x1c"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10933:4:15",
																						"type": "",
																						"value": "0x64"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10939:4:15",
																						"type": "",
																						"value": "0x00"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10945:4:15",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "call",
																					"nodeType": "YulIdentifier",
																					"src": "10905:4:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10905:45:15"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10563:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10563:405:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10539:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "10539:443:15"
															},
															"nodeType": "YulIf",
															"src": "10536:659:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11216:4:15",
																		"type": "",
																		"value": "0x60"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11222:1:15",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11209:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "11209:15:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11209:15:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11278:4:15",
																		"type": "",
																		"value": "0x40"
																	},
																	{
																		"name": "m",
																		"nodeType": "YulIdentifier",
																		"src": "11284:1:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11271:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "11271:15:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11271:15:15"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2727,
														"isOffset": false,
														"isSlot": false,
														"src": "10501:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2722,
														"isOffset": false,
														"isSlot": false,
														"src": "9612:4:15",
														"valueSize": 1
													},
													{
														"declaration": 2724,
														"isOffset": false,
														"isSlot": false,
														"src": "9547:2:15",
														"valueSize": 1
													},
													{
														"declaration": 2720,
														"isOffset": false,
														"isSlot": false,
														"src": "10917:5:15",
														"valueSize": 1
													},
													{
														"declaration": 2720,
														"isOffset": false,
														"isSlot": false,
														"src": "9999:5:15",
														"valueSize": 1
													}
												],
												"id": 2729,
												"nodeType": "InlineAssembly",
												"src": "9443:1889:15"
											}
										]
									},
									"documentation": {
										"id": 2718,
										"nodeType": "StructuredDocumentation",
										"src": "9056:205:15",
										"text": "@dev Sends all of ERC20 `token` from `from` to `to`.\n Reverts upon failure.\n The `from` account must have their entire balance approved for\n the current contract to manage."
									},
									"id": 2731,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferAllFrom",
									"nameLocation": "9275:19:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2720,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9303:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2731,
												"src": "9295:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2719,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9295:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2722,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "9318:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2731,
												"src": "9310:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2721,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9310:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2724,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9332:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2731,
												"src": "9324:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2723,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9324:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9294:41:15"
									},
									"returnParameters": {
										"id": 2728,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2727,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9378:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2731,
												"src": "9370:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2726,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9370:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9369:16:15"
									},
									"scope": 2792,
									"src": "9266:2072:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2742,
										"nodeType": "Block",
										"src": "11528:1115:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "11590:1047:15",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11611:4:15",
																		"type": "",
																		"value": "0x14"
																	},
																	{
																		"name": "to",
																		"nodeType": "YulIdentifier",
																		"src": "11617:2:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11604:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "11604:16:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11604:16:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11668:4:15",
																		"type": "",
																		"value": "0x34"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "11674:6:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11661:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "11661:20:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11661:20:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11808:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11814:34:15",
																		"type": "",
																		"value": "0xa9059cbb000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11801:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "11801:48:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11801:48:15"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12310:208:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12405:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12411:10:15",
																					"type": "",
																					"value": "0x90b8ec18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "12398:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12398:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12398:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12493:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12499:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12486:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12486:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12486:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "12174:4:15",
																										"type": "",
																										"value": "0x00"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "12168:5:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "12168:11:15"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "12181:1:15",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "eq",
																							"nodeType": "YulIdentifier",
																							"src": "12165:2:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12165:18:15"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "returndatasize",
																									"nodeType": "YulIdentifier",
																									"src": "12192:14:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "12192:16:15"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "12185:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12185:24:15"
																					}
																				],
																				"functionName": {
																					"name": "or",
																					"nodeType": "YulIdentifier",
																					"src": "12162:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12162:48:15"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "gas",
																							"nodeType": "YulIdentifier",
																							"src": "12237:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12237:5:15"
																					},
																					{
																						"name": "token",
																						"nodeType": "YulIdentifier",
																						"src": "12244:5:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12251:1:15",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12254:4:15",
																						"type": "",
																						"value": "0x10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12260:4:15",
																						"type": "",
																						"value": "0x44"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12266:4:15",
																						"type": "",
																						"value": "0x00"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12272:4:15",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "call",
																					"nodeType": "YulIdentifier",
																					"src": "12232:4:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12232:45:15"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "11890:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11890:405:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11866:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "11866:443:15"
															},
															"nodeType": "YulIf",
															"src": "11863:655:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12619:4:15",
																		"type": "",
																		"value": "0x34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12625:1:15",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12612:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "12612:15:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12612:15:15"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2738,
														"isOffset": false,
														"isSlot": false,
														"src": "11674:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2736,
														"isOffset": false,
														"isSlot": false,
														"src": "11617:2:15",
														"valueSize": 1
													},
													{
														"declaration": 2734,
														"isOffset": false,
														"isSlot": false,
														"src": "12244:5:15",
														"valueSize": 1
													}
												],
												"id": 2741,
												"nodeType": "InlineAssembly",
												"src": "11581:1056:15"
											}
										]
									},
									"documentation": {
										"id": 2732,
										"nodeType": "StructuredDocumentation",
										"src": "11344:105:15",
										"text": "@dev Sends `amount` of ERC20 `token` from the current contract to `to`.\n Reverts upon failure."
									},
									"id": 2743,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "11463:12:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2734,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "11484:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "11476:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2733,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11476:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2736,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11499:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "11491:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2735,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11491:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2738,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11511:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "11503:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11503:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11475:43:15"
									},
									"returnParameters": {
										"id": 2740,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11528:0:15"
									},
									"scope": 2792,
									"src": "11454:1189:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2754,
										"nodeType": "Block",
										"src": "12840:1842:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "12902:1774:15",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12923:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12929:10:15",
																		"type": "",
																		"value": "0x70a08231"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12916:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "12916:24:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12916:24:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13016:4:15",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "address",
																			"nodeType": "YulIdentifier",
																			"src": "13022:7:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13022:9:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13009:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "13009:23:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13009:23:15"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13363:208:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13458:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13464:10:15",
																					"type": "",
																					"value": "0x90b8ec18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "13451:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13451:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13451:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13546:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13552:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13539:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13539:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13539:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "returndatasize",
																							"nodeType": "YulIdentifier",
																							"src": "13206:14:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13206:16:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13224:4:15",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "13203:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13203:26:15"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "gas",
																							"nodeType": "YulIdentifier",
																							"src": "13293:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13293:5:15"
																					},
																					{
																						"name": "token",
																						"nodeType": "YulIdentifier",
																						"src": "13300:5:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13307:4:15",
																						"type": "",
																						"value": "0x1c"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13313:4:15",
																						"type": "",
																						"value": "0x24"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13319:4:15",
																						"type": "",
																						"value": "0x34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13325:4:15",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "staticcall",
																					"nodeType": "YulIdentifier",
																					"src": "13282:10:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13282:48:15"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13118:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13118:230:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13094:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "13094:268:15"
															},
															"nodeType": "YulIf",
															"src": "13091:480:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13592:4:15",
																		"type": "",
																		"value": "0x14"
																	},
																	{
																		"name": "to",
																		"nodeType": "YulIdentifier",
																		"src": "13598:2:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13585:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "13585:16:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13585:16:15"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13731:21:15",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13747:4:15",
																		"type": "",
																		"value": "0x34"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "13741:5:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "13741:11:15"
															},
															"variableNames": [
																{
																	"name": "amount",
																	"nodeType": "YulIdentifier",
																	"src": "13731:6:15"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13847:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13853:34:15",
																		"type": "",
																		"value": "0xa9059cbb000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13840:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "13840:48:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13840:48:15"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14349:208:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14444:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14450:10:15",
																					"type": "",
																					"value": "0x90b8ec18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "14437:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14437:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14437:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14532:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14538:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14525:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14525:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14525:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "14213:4:15",
																										"type": "",
																										"value": "0x00"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "14207:5:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "14207:11:15"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "14220:1:15",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "eq",
																							"nodeType": "YulIdentifier",
																							"src": "14204:2:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "14204:18:15"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "returndatasize",
																									"nodeType": "YulIdentifier",
																									"src": "14231:14:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "14231:16:15"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "14224:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "14224:24:15"
																					}
																				],
																				"functionName": {
																					"name": "or",
																					"nodeType": "YulIdentifier",
																					"src": "14201:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14201:48:15"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "gas",
																							"nodeType": "YulIdentifier",
																							"src": "14276:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "14276:5:15"
																					},
																					{
																						"name": "token",
																						"nodeType": "YulIdentifier",
																						"src": "14283:5:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "14290:1:15",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "14293:4:15",
																						"type": "",
																						"value": "0x10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "14299:4:15",
																						"type": "",
																						"value": "0x44"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "14305:4:15",
																						"type": "",
																						"value": "0x00"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "14311:4:15",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "call",
																					"nodeType": "YulIdentifier",
																					"src": "14271:4:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14271:45:15"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13929:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13929:405:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13905:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "13905:443:15"
															},
															"nodeType": "YulIf",
															"src": "13902:655:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14658:4:15",
																		"type": "",
																		"value": "0x34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14664:1:15",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14651:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "14651:15:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14651:15:15"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2751,
														"isOffset": false,
														"isSlot": false,
														"src": "13731:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2748,
														"isOffset": false,
														"isSlot": false,
														"src": "13598:2:15",
														"valueSize": 1
													},
													{
														"declaration": 2746,
														"isOffset": false,
														"isSlot": false,
														"src": "13300:5:15",
														"valueSize": 1
													},
													{
														"declaration": 2746,
														"isOffset": false,
														"isSlot": false,
														"src": "14283:5:15",
														"valueSize": 1
													}
												],
												"id": 2753,
												"nodeType": "InlineAssembly",
												"src": "12893:1783:15"
											}
										]
									},
									"documentation": {
										"id": 2744,
										"nodeType": "StructuredDocumentation",
										"src": "12649:100:15",
										"text": "@dev Sends all of ERC20 `token` from the current contract to `to`.\n Reverts upon failure."
									},
									"id": 2755,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferAll",
									"nameLocation": "12763:15:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2746,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "12787:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "12779:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2745,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12779:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2748,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12802:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "12794:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2747,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12794:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12778:27:15"
									},
									"returnParameters": {
										"id": 2752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2751,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12832:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "12824:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12824:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12823:16:15"
									},
									"scope": 2792,
									"src": "12754:1928:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2766,
										"nodeType": "Block",
										"src": "14889:1113:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "14951:1045:15",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14972:4:15",
																		"type": "",
																		"value": "0x14"
																	},
																	{
																		"name": "to",
																		"nodeType": "YulIdentifier",
																		"src": "14978:2:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14965:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "14965:16:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14965:16:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15029:4:15",
																		"type": "",
																		"value": "0x34"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "15035:6:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15022:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "15022:20:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15022:20:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15168:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15174:34:15",
																		"type": "",
																		"value": "0x095ea7b3000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15161:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "15161:48:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15161:48:15"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15670:207:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15764:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15770:10:15",
																					"type": "",
																					"value": "0x3e3f8f73"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "15757:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15757:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15757:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15852:4:15",
																					"type": "",
																					"value": "0x1c"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15858:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "15845:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15845:18:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15845:18:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "15534:4:15",
																										"type": "",
																										"value": "0x00"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "15528:5:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "15528:11:15"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "15541:1:15",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "eq",
																							"nodeType": "YulIdentifier",
																							"src": "15525:2:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "15525:18:15"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "returndatasize",
																									"nodeType": "YulIdentifier",
																									"src": "15552:14:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "15552:16:15"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "15545:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "15545:24:15"
																					}
																				],
																				"functionName": {
																					"name": "or",
																					"nodeType": "YulIdentifier",
																					"src": "15522:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15522:48:15"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "gas",
																							"nodeType": "YulIdentifier",
																							"src": "15597:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "15597:5:15"
																					},
																					{
																						"name": "token",
																						"nodeType": "YulIdentifier",
																						"src": "15604:5:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15611:1:15",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15614:4:15",
																						"type": "",
																						"value": "0x10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15620:4:15",
																						"type": "",
																						"value": "0x44"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15626:4:15",
																						"type": "",
																						"value": "0x00"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15632:4:15",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "call",
																					"nodeType": "YulIdentifier",
																					"src": "15592:4:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15592:45:15"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "15250:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15250:405:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "15226:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "15226:443:15"
															},
															"nodeType": "YulIf",
															"src": "15223:654:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15978:4:15",
																		"type": "",
																		"value": "0x34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15984:1:15",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15971:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "15971:15:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15971:15:15"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2762,
														"isOffset": false,
														"isSlot": false,
														"src": "15035:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2760,
														"isOffset": false,
														"isSlot": false,
														"src": "14978:2:15",
														"valueSize": 1
													},
													{
														"declaration": 2758,
														"isOffset": false,
														"isSlot": false,
														"src": "15604:5:15",
														"valueSize": 1
													}
												],
												"id": 2765,
												"nodeType": "InlineAssembly",
												"src": "14942:1054:15"
											}
										]
									},
									"documentation": {
										"id": 2756,
										"nodeType": "StructuredDocumentation",
										"src": "14688:123:15",
										"text": "@dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n Reverts upon failure."
									},
									"id": 2767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "14825:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2758,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14845:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "14837:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14837:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2760,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14860:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "14852:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14852:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2762,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "14872:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "14864:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14864:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14836:43:15"
									},
									"returnParameters": {
										"id": 2764,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14889:0:15"
									},
									"scope": 2792,
									"src": "14816:1186:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2778,
										"nodeType": "Block",
										"src": "16395:1777:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "16457:1709:15",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16478:4:15",
																		"type": "",
																		"value": "0x14"
																	},
																	{
																		"name": "to",
																		"nodeType": "YulIdentifier",
																		"src": "16484:2:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16471:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "16471:16:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16471:16:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16535:4:15",
																		"type": "",
																		"value": "0x34"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "16541:6:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16528:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "16528:20:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16528:20:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16674:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16680:34:15",
																		"type": "",
																		"value": "0x095ea7b3000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16667:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "16667:48:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16667:48:15"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17176:871:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17201:4:15",
																					"type": "",
																					"value": "0x34"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17207:1:15",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "17194:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17194:15:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17194:15:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17262:4:15",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17268:34:15",
																					"type": "",
																					"value": "0x095ea7b3000000000000000000000000"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "17255:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17255:48:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17255:48:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [],
																							"functionName": {
																								"name": "gas",
																								"nodeType": "YulIdentifier",
																								"src": "17453:3:15"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "17453:5:15"
																						},
																						{
																							"name": "token",
																							"nodeType": "YulIdentifier",
																							"src": "17460:5:15"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "17467:1:15",
																							"type": "",
																							"value": "0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "17470:4:15",
																							"type": "",
																							"value": "0x10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "17476:4:15",
																							"type": "",
																							"value": "0x44"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "17482:4:15",
																							"type": "",
																							"value": "0x00"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "17488:4:15",
																							"type": "",
																							"value": "0x00"
																						}
																					],
																					"functionName": {
																						"name": "call",
																						"nodeType": "YulIdentifier",
																						"src": "17448:4:15"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17448:45:15"
																				}
																			],
																			"functionName": {
																				"name": "pop",
																				"nodeType": "YulIdentifier",
																				"src": "17444:3:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17444:50:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17444:50:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17518:4:15",
																					"type": "",
																					"value": "0x34"
																				},
																				{
																					"name": "amount",
																					"nodeType": "YulIdentifier",
																					"src": "17524:6:15"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "17511:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17511:20:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17511:20:15"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "17806:227:15",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "17908:4:15",
																								"type": "",
																								"value": "0x00"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "17914:10:15",
																								"type": "",
																								"value": "0x3e3f8f73"
																							}
																						],
																						"functionName": {
																							"name": "mstore",
																							"nodeType": "YulIdentifier",
																							"src": "17901:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "17901:24:15"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "17901:24:15"
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "18004:4:15",
																								"type": "",
																								"value": "0x1c"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "18010:4:15",
																								"type": "",
																								"value": "0x04"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "17997:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "17997:18:15"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "17997:18:15"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"arguments": [
																												{
																													"kind": "number",
																													"nodeType": "YulLiteral",
																													"src": "17658:4:15",
																													"type": "",
																													"value": "0x00"
																												}
																											],
																											"functionName": {
																												"name": "mload",
																												"nodeType": "YulIdentifier",
																												"src": "17652:5:15"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "17652:11:15"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "17665:1:15",
																											"type": "",
																											"value": "1"
																										}
																									],
																									"functionName": {
																										"name": "eq",
																										"nodeType": "YulIdentifier",
																										"src": "17649:2:15"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "17649:18:15"
																								},
																								{
																									"arguments": [
																										{
																											"arguments": [],
																											"functionName": {
																												"name": "returndatasize",
																												"nodeType": "YulIdentifier",
																												"src": "17676:14:15"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "17676:16:15"
																										}
																									],
																									"functionName": {
																										"name": "iszero",
																										"nodeType": "YulIdentifier",
																										"src": "17669:6:15"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "17669:24:15"
																								}
																							],
																							"functionName": {
																								"name": "or",
																								"nodeType": "YulIdentifier",
																								"src": "17646:2:15"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "17646:48:15"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [],
																									"functionName": {
																										"name": "gas",
																										"nodeType": "YulIdentifier",
																										"src": "17725:3:15"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "17725:5:15"
																								},
																								{
																									"name": "token",
																									"nodeType": "YulIdentifier",
																									"src": "17732:5:15"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "17739:1:15",
																									"type": "",
																									"value": "0"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "17742:4:15",
																									"type": "",
																									"value": "0x10"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "17748:4:15",
																									"type": "",
																									"value": "0x44"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "17754:4:15",
																									"type": "",
																									"value": "0x00"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "17760:4:15",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "call",
																								"nodeType": "YulIdentifier",
																								"src": "17720:4:15"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "17720:45:15"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "17617:3:15"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17617:170:15"
																				}
																			],
																			"functionName": {
																				"name": "iszero",
																				"nodeType": "YulIdentifier",
																				"src": "17589:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17589:216:15"
																		},
																		"nodeType": "YulIf",
																		"src": "17586:447:15"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "17040:4:15",
																										"type": "",
																										"value": "0x00"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "17034:5:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17034:11:15"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "17047:1:15",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "eq",
																							"nodeType": "YulIdentifier",
																							"src": "17031:2:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "17031:18:15"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "returndatasize",
																									"nodeType": "YulIdentifier",
																									"src": "17058:14:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17058:16:15"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "17051:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "17051:24:15"
																					}
																				],
																				"functionName": {
																					"name": "or",
																					"nodeType": "YulIdentifier",
																					"src": "17028:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17028:48:15"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "gas",
																							"nodeType": "YulIdentifier",
																							"src": "17103:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "17103:5:15"
																					},
																					{
																						"name": "token",
																						"nodeType": "YulIdentifier",
																						"src": "17110:5:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "17117:1:15",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "17120:4:15",
																						"type": "",
																						"value": "0x10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "17126:4:15",
																						"type": "",
																						"value": "0x44"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "17132:4:15",
																						"type": "",
																						"value": "0x00"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "17138:4:15",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "call",
																					"nodeType": "YulIdentifier",
																					"src": "17098:4:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17098:45:15"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "16756:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16756:405:15"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "16732:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "16732:443:15"
															},
															"nodeType": "YulIf",
															"src": "16729:1318:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18148:4:15",
																		"type": "",
																		"value": "0x34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18154:1:15",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18141:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "18141:15:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18141:15:15"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2774,
														"isOffset": false,
														"isSlot": false,
														"src": "16541:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2774,
														"isOffset": false,
														"isSlot": false,
														"src": "17524:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2772,
														"isOffset": false,
														"isSlot": false,
														"src": "16484:2:15",
														"valueSize": 1
													},
													{
														"declaration": 2770,
														"isOffset": false,
														"isSlot": false,
														"src": "17110:5:15",
														"valueSize": 1
													},
													{
														"declaration": 2770,
														"isOffset": false,
														"isSlot": false,
														"src": "17460:5:15",
														"valueSize": 1
													},
													{
														"declaration": 2770,
														"isOffset": false,
														"isSlot": false,
														"src": "17732:5:15",
														"valueSize": 1
													}
												],
												"id": 2777,
												"nodeType": "InlineAssembly",
												"src": "16448:1718:15"
											}
										]
									},
									"documentation": {
										"id": 2768,
										"nodeType": "StructuredDocumentation",
										"src": "16008:300:15",
										"text": "@dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n If the initial attempt to approve fails, attempts to reset the approved amount to zero,\n then retries the approval again (some tokens, e.g. USDT, requires this).\n Reverts upon failure."
									},
									"id": 2779,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApproveWithRetry",
									"nameLocation": "16322:20:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2770,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16351:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "16343:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2769,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16343:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2772,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16366:2:15",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "16358:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2771,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16358:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2774,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16378:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "16370:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16370:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16342:43:15"
									},
									"returnParameters": {
										"id": 2776,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16395:0:15"
									},
									"scope": 2792,
									"src": "16313:1859:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2790,
										"nodeType": "Block",
										"src": "18389:632:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "18451:564:15",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18472:4:15",
																		"type": "",
																		"value": "0x14"
																	},
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "18478:7:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18465:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "18465:21:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18465:21:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18607:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18613:34:15",
																		"type": "",
																		"value": "0x70a08231000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18600:6:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "18600:48:15"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18600:48:15"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18661:344:15",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18718:4:15",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "18712:5:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18712:11:15"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "returndatasize",
																							"nodeType": "YulIdentifier",
																							"src": "18837:14:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "18837:16:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "18855:4:15",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "18834:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "18834:26:15"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "gas",
																							"nodeType": "YulIdentifier",
																							"src": "18928:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "18928:5:15"
																					},
																					{
																						"name": "token",
																						"nodeType": "YulIdentifier",
																						"src": "18935:5:15"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "18942:4:15",
																						"type": "",
																						"value": "0x10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "18948:4:15",
																						"type": "",
																						"value": "0x24"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "18954:4:15",
																						"type": "",
																						"value": "0x20"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "18960:4:15",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "staticcall",
																					"nodeType": "YulIdentifier",
																					"src": "18917:10:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "18917:48:15"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "18745:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18745:242:15"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "18687:3:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "18687:318:15"
															},
															"variableNames": [
																{
																	"name": "amount",
																	"nodeType": "YulIdentifier",
																	"src": "18661:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2784,
														"isOffset": false,
														"isSlot": false,
														"src": "18478:7:15",
														"valueSize": 1
													},
													{
														"declaration": 2787,
														"isOffset": false,
														"isSlot": false,
														"src": "18661:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2782,
														"isOffset": false,
														"isSlot": false,
														"src": "18935:5:15",
														"valueSize": 1
													}
												],
												"id": 2789,
												"nodeType": "InlineAssembly",
												"src": "18442:573:15"
											}
										]
									},
									"documentation": {
										"id": 2780,
										"nodeType": "StructuredDocumentation",
										"src": "18178:116:15",
										"text": "@dev Returns the amount of ERC20 `token` owned by `account`.\n Returns zero if the `token` does not exist."
									},
									"id": 2791,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "18308:9:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2782,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "18326:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2791,
												"src": "18318:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18318:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2784,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "18341:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2791,
												"src": "18333:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2783,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18333:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18317:32:15"
									},
									"returnParameters": {
										"id": 2788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2787,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18381:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2791,
												"src": "18373:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18373:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18372:16:15"
									},
									"scope": 2792,
									"src": "18299:722:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2793,
							"src": "596:18427:15",
							"usedErrors": [
								2640,
								2643,
								2646,
								2649
							]
						}
					],
					"src": "32:18992:15"
				},
				"id": 15
			},
			"src/SNDRStrategy.sol": {
				"ast": {
					"absolutePath": "src/SNDRStrategy.sol",
					"exportedSymbols": {
						"Address": [
							2612
						],
						"BaseStrategy": [
							1614
						],
						"Context": [
							2634
						],
						"Errors": [
							780
						],
						"IAllo": [
							328
						],
						"IERC20": [
							1870
						],
						"IERC20Permit": [
							1906
						],
						"ISNDRCore": [
							2820
						],
						"IStrategy": [
							687
						],
						"Ownable": [
							1727
						],
						"ReentrancyGuard": [
							1792
						],
						"SNDRStrategy": [
							3600
						],
						"SafeERC20": [
							2282
						],
						"Transfer": [
							1008
						]
					},
					"id": 3601,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2794,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:16"
						},
						{
							"absolutePath": "lib/allo-v2/contracts/strategies/BaseStrategy.sol",
							"file": "allo-v2/strategies/BaseStrategy.sol",
							"id": 2795,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3601,
							"sourceUnit": 1615,
							"src": "57:45:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2796,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3601,
							"sourceUnit": 1871,
							"src": "103:56:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 2797,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3601,
							"sourceUnit": 2283,
							"src": "160:65:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 2798,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3601,
							"sourceUnit": 1728,
							"src": "226:52:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/allo-v2/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 2800,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3601,
							"sourceUnit": 1793,
							"src": "279:85:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2799,
										"name": "ReentrancyGuard",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1792,
										"src": "287:15:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISNDRCore",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2820,
							"linearizedBaseContracts": [
								2820
							],
							"name": "ISNDRCore",
							"nameLocation": "376:9:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "23358940",
									"id": 2819,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "handleDistribution",
									"nameLocation": "401:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2802,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "437:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "429:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2801,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "429:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2805,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "460:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "453:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1870",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2804,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2803,
														"name": "IERC20",
														"nameLocations": [
															"453:6:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1870,
														"src": "453:6:16"
													},
													"referencedDeclaration": 1870,
													"src": "453:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2808,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "492:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "475:27:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2806,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "475:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2807,
													"nodeType": "ArrayTypeName",
													"src": "475:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2811,
												"mutability": "mutable",
												"name": "allocations",
												"nameLocation": "529:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "512:28:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2809,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "512:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2810,
													"nodeType": "ArrayTypeName",
													"src": "512:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2813,
												"mutability": "mutable",
												"name": "duration",
												"nameLocation": "558:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "550:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2812,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "550:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2816,
												"mutability": "mutable",
												"name": "whitelistedCollectors",
												"nameLocation": "593:21:16",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "576:38:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2814,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "576:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2815,
													"nodeType": "ArrayTypeName",
													"src": "576:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "419:201:16"
									},
									"returnParameters": {
										"id": 2818,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "629:0:16"
									},
									"scope": 2820,
									"src": "392:238:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3601,
							"src": "366:266:16",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2822,
										"name": "BaseStrategy",
										"nameLocations": [
											"850:12:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1614,
										"src": "850:12:16"
									},
									"id": 2823,
									"nodeType": "InheritanceSpecifier",
									"src": "850:12:16"
								},
								{
									"baseName": {
										"id": 2824,
										"name": "Ownable",
										"nameLocations": [
											"864:7:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1727,
										"src": "864:7:16"
									},
									"id": 2825,
									"nodeType": "InheritanceSpecifier",
									"src": "864:7:16"
								},
								{
									"baseName": {
										"id": 2826,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"873:15:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1792,
										"src": "873:15:16"
									},
									"id": 2827,
									"nodeType": "InheritanceSpecifier",
									"src": "873:15:16"
								}
							],
							"canonicalName": "SNDRStrategy",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2821,
								"nodeType": "StructuredDocumentation",
								"src": "634:191:16",
								"text": "@title SNDRStrategy Contract\n @notice This contract implements a custom strategy for distributing funds to recipients\n @dev Inherits from BaseStrategy, Ownable, and ReentrancyGuard"
							},
							"fullyImplemented": true,
							"id": 3600,
							"linearizedBaseContracts": [
								3600,
								1792,
								1727,
								2634,
								1614,
								780,
								1008,
								797,
								687
							],
							"name": "SNDRStrategy",
							"nameLocation": "834:12:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2831,
									"libraryName": {
										"id": 2828,
										"name": "SafeERC20",
										"nameLocations": [
											"901:9:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2282,
										"src": "901:9:16"
									},
									"nodeType": "UsingForDirective",
									"src": "895:27:16",
									"typeName": {
										"id": 2830,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2829,
											"name": "IERC20",
											"nameLocations": [
												"915:6:16"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1870,
											"src": "915:6:16"
										},
										"referencedDeclaration": 1870,
										"src": "915:6:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$1870",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "19220dbc",
									"id": 2834,
									"mutability": "mutable",
									"name": "sndrCore",
									"nameLocation": "945:8:16",
									"nodeType": "VariableDeclaration",
									"scope": 3600,
									"src": "928:25:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ISNDRCore_$2820",
										"typeString": "contract ISNDRCore"
									},
									"typeName": {
										"id": 2833,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2832,
											"name": "ISNDRCore",
											"nameLocations": [
												"928:9:16"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 2820,
											"src": "928:9:16"
										},
										"referencedDeclaration": 2820,
										"src": "928:9:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISNDRCore_$2820",
											"typeString": "contract ISNDRCore"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "fc0c546a",
									"id": 2837,
									"mutability": "mutable",
									"name": "token",
									"nameLocation": "973:5:16",
									"nodeType": "VariableDeclaration",
									"scope": 3600,
									"src": "959:19:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$1870",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 2836,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2835,
											"name": "IERC20",
											"nameLocations": [
												"959:6:16"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1870,
											"src": "959:6:16"
										},
										"referencedDeclaration": 1870,
										"src": "959:6:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$1870",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "SNDRStrategy.Recipient",
									"id": 2845,
									"members": [
										{
											"constant": false,
											"id": 2839,
											"mutability": "mutable",
											"name": "recipientAddress",
											"nameLocation": "1020:16:16",
											"nodeType": "VariableDeclaration",
											"scope": 2845,
											"src": "1012:24:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2838,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1012:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2841,
											"mutability": "mutable",
											"name": "totalAllocation",
											"nameLocation": "1054:15:16",
											"nodeType": "VariableDeclaration",
											"scope": 2845,
											"src": "1046:23:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2840,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1046:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2844,
											"mutability": "mutable",
											"name": "status",
											"nameLocation": "1086:6:16",
											"nodeType": "VariableDeclaration",
											"scope": 2845,
											"src": "1079:13:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_Status_$533",
												"typeString": "enum IStrategy.Status"
											},
											"typeName": {
												"id": 2843,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2842,
													"name": "Status",
													"nameLocations": [
														"1079:6:16"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 533,
													"src": "1079:6:16"
												},
												"referencedDeclaration": 533,
												"src": "1079:6:16",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$533",
													"typeString": "enum IStrategy.Status"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Recipient",
									"nameLocation": "992:9:16",
									"nodeType": "StructDefinition",
									"scope": 3600,
									"src": "985:114:16",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "eb820312",
									"id": 2850,
									"mutability": "mutable",
									"name": "recipients",
									"nameLocation": "1142:10:16",
									"nodeType": "VariableDeclaration",
									"scope": 3600,
									"src": "1105:47:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
										"typeString": "mapping(address => struct SNDRStrategy.Recipient)"
									},
									"typeName": {
										"id": 2849,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2846,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1113:7:16",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1105:29:16",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
											"typeString": "mapping(address => struct SNDRStrategy.Recipient)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 2848,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 2847,
												"name": "Recipient",
												"nameLocations": [
													"1124:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2845,
												"src": "1124:9:16"
											},
											"referencedDeclaration": 2845,
											"src": "1124:9:16",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Recipient_$2845_storage_ptr",
												"typeString": "struct SNDRStrategy.Recipient"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "6d40f85b",
									"id": 2853,
									"mutability": "mutable",
									"name": "recipientList",
									"nameLocation": "1175:13:16",
									"nodeType": "VariableDeclaration",
									"scope": 3600,
									"src": "1158:30:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 2851,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1158:7:16",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 2852,
										"nodeType": "ArrayTypeName",
										"src": "1158:9:16",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "14f20ef9",
									"id": 2856,
									"mutability": "mutable",
									"name": "whitelistedCollectors",
									"nameLocation": "1211:21:16",
									"nodeType": "VariableDeclaration",
									"scope": 3600,
									"src": "1194:38:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 2854,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1194:7:16",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 2855,
										"nodeType": "ArrayTypeName",
										"src": "1194:9:16",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9af5c09d",
									"id": 2858,
									"mutability": "mutable",
									"name": "registrationStartTime",
									"nameLocation": "1281:21:16",
									"nodeType": "VariableDeclaration",
									"scope": 3600,
									"src": "1267:35:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 2857,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "1267:6:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "dff7d2c7",
									"id": 2860,
									"mutability": "mutable",
									"name": "registrationEndTime",
									"nameLocation": "1322:19:16",
									"nodeType": "VariableDeclaration",
									"scope": 3600,
									"src": "1308:33:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 2859,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "1308:6:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d2e17f59",
									"id": 2862,
									"mutability": "mutable",
									"name": "allocationStartTime",
									"nameLocation": "1361:19:16",
									"nodeType": "VariableDeclaration",
									"scope": 3600,
									"src": "1347:33:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 2861,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "1347:6:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "4533d678",
									"id": 2864,
									"mutability": "mutable",
									"name": "allocationEndTime",
									"nameLocation": "1400:17:16",
									"nodeType": "VariableDeclaration",
									"scope": 3600,
									"src": "1386:31:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 2863,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "1386:6:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "0695e999be8100bdb5bee8612337296508d527eae78c65b8f170eacb5a3b439d",
									"id": 2870,
									"name": "RecipientRegistered",
									"nameLocation": "1444:19:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2866,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientAddress",
												"nameLocation": "1489:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2870,
												"src": "1473:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2865,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1473:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2868,
												"indexed": false,
												"mutability": "mutable",
												"name": "initialAllocation",
												"nameLocation": "1523:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 2870,
												"src": "1515:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2867,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1515:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1463:83:16"
									},
									"src": "1438:109:16"
								},
								{
									"anonymous": false,
									"eventSelector": "183f2ce0b749ed46549cb16586af0c501abab8d242cc4b2076aec30d2dd9c4bc",
									"id": 2876,
									"name": "AllocationUpdated",
									"nameLocation": "1558:17:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2872,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientAddress",
												"nameLocation": "1601:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2876,
												"src": "1585:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2874,
												"indexed": false,
												"mutability": "mutable",
												"name": "newAllocation",
												"nameLocation": "1635:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2876,
												"src": "1627:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1627:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1575:79:16"
									},
									"src": "1552:103:16"
								},
								{
									"anonymous": false,
									"eventSelector": "5be4d64080f489b6fef34a2d8ac3084c5735e83b3789aabc4e6aeab193e7967f",
									"id": 2886,
									"name": "TimestampsUpdated",
									"nameLocation": "1666:17:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2878,
												"indexed": false,
												"mutability": "mutable",
												"name": "registrationStartTime",
												"nameLocation": "1700:21:16",
												"nodeType": "VariableDeclaration",
												"scope": 2886,
												"src": "1693:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2877,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1693:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2880,
												"indexed": false,
												"mutability": "mutable",
												"name": "registrationEndTime",
												"nameLocation": "1738:19:16",
												"nodeType": "VariableDeclaration",
												"scope": 2886,
												"src": "1731:26:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2879,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1731:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2882,
												"indexed": false,
												"mutability": "mutable",
												"name": "allocationStartTime",
												"nameLocation": "1774:19:16",
												"nodeType": "VariableDeclaration",
												"scope": 2886,
												"src": "1767:26:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2881,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2884,
												"indexed": false,
												"mutability": "mutable",
												"name": "allocationEndTime",
												"nameLocation": "1810:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 2886,
												"src": "1803:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2883,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1803:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:150:16"
									},
									"src": "1660:174:16"
								},
								{
									"anonymous": false,
									"eventSelector": "b41462b4bb729cf768173ceba7cc740624558176f07a40ac23a5f8fcdb6c4abd",
									"id": 2892,
									"name": "BatchAllocationCompleted",
									"nameLocation": "1845:24:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2888,
												"indexed": false,
												"mutability": "mutable",
												"name": "allocationsCount",
												"nameLocation": "1887:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2892,
												"src": "1879:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2887,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1879:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2890,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalAllocated",
												"nameLocation": "1921:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2892,
												"src": "1913:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2889,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1869:72:16"
									},
									"src": "1839:103:16"
								},
								{
									"anonymous": false,
									"eventSelector": "0ba55fca14ca25313d8196abbee269381ad67be27729f5073609a3eb9318391a",
									"id": 2897,
									"name": "WhitelistedCollectorsUpdated",
									"nameLocation": "1953:28:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2895,
												"indexed": false,
												"mutability": "mutable",
												"name": "newWhitelistedCollectors",
												"nameLocation": "1992:24:16",
												"nodeType": "VariableDeclaration",
												"scope": 2897,
												"src": "1982:34:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2893,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1982:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2894,
													"nodeType": "ArrayTypeName",
													"src": "1982:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1981:36:16"
									},
									"src": "1947:71:16"
								},
								{
									"anonymous": false,
									"eventSelector": "256c90eeec0565314afb6bdf67c3a909a88bd142e40d03c91a1f68e2a6bc35db",
									"id": 2904,
									"name": "RecipientStatusUpdated",
									"nameLocation": "2029:22:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2899,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientAddress",
												"nameLocation": "2077:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2904,
												"src": "2061:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2898,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2061:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2902,
												"indexed": false,
												"mutability": "mutable",
												"name": "status",
												"nameLocation": "2110:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2904,
												"src": "2103:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$533",
													"typeString": "enum IStrategy.Status"
												},
												"typeName": {
													"id": 2901,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2900,
														"name": "Status",
														"nameLocations": [
															"2103:6:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 533,
														"src": "2103:6:16"
													},
													"referencedDeclaration": 533,
													"src": "2103:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$533",
														"typeString": "enum IStrategy.Status"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2051:71:16"
									},
									"src": "2023:100:16"
								},
								{
									"anonymous": false,
									"eventSelector": "6215df0421b8b71ffbc92898b478b5ad9520ec5034d7c686bbdc7afdfad068e8",
									"id": 2911,
									"name": "DistributionExecuted",
									"nameLocation": "2134:20:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2907,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipientIds",
												"nameLocation": "2165:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 2911,
												"src": "2155:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2905,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "2155:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2906,
													"nodeType": "ArrayTypeName",
													"src": "2155:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2909,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalAllocation",
												"nameLocation": "2187:15:16",
												"nodeType": "VariableDeclaration",
												"scope": 2911,
												"src": "2179:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2908,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2179:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2154:49:16"
									},
									"src": "2128:76:16"
								},
								{
									"body": {
										"id": 2939,
										"nodeType": "Block",
										"src": "2614:80:16",
										"statements": [
											{
												"expression": {
													"id": 2931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2927,
														"name": "sndrCore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2834,
														"src": "2624:8:16",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISNDRCore_$2820",
															"typeString": "contract ISNDRCore"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2929,
																"name": "_sndrCore",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2916,
																"src": "2645:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 2928,
															"name": "ISNDRCore",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2820,
															"src": "2635:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ISNDRCore_$2820_$",
																"typeString": "type(contract ISNDRCore)"
															}
														},
														"id": 2930,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2635:20:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISNDRCore_$2820",
															"typeString": "contract ISNDRCore"
														}
													},
													"src": "2624:31:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISNDRCore_$2820",
														"typeString": "contract ISNDRCore"
													}
												},
												"id": 2932,
												"nodeType": "ExpressionStatement",
												"src": "2624:31:16"
											},
											{
												"expression": {
													"id": 2937,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2933,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2837,
														"src": "2665:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1870",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2935,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2918,
																"src": "2680:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 2934,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1870,
															"src": "2673:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$1870_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 2936,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2673:14:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1870",
															"typeString": "contract IERC20"
														}
													},
													"src": "2665:22:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1870",
														"typeString": "contract IERC20"
													}
												},
												"id": 2938,
												"nodeType": "ExpressionStatement",
												"src": "2665:22:16"
											}
										]
									},
									"documentation": {
										"id": 2912,
										"nodeType": "StructuredDocumentation",
										"src": "2210:261:16",
										"text": "@notice Constructor to set the Allo contract, SNDR core, and token addresses\n @param _allo Address of the Allo contract\n @param _sndrCore Address of the SNDR core contract\n @param _token Address of the ERC20 token used for distributions"
									},
									"id": 2940,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2921,
													"name": "_allo",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2914,
													"src": "2581:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"hexValue": "534e44525374726174656779",
													"id": 2922,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2588:14:16",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_b6b9eda44cc7c9fea9bcec932951ee79db1b4614c1f023e8720af1d61d8c32b6",
														"typeString": "literal_string \"SNDRStrategy\""
													},
													"value": "SNDRStrategy"
												}
											],
											"id": 2923,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 2920,
												"name": "BaseStrategy",
												"nameLocations": [
													"2568:12:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1614,
												"src": "2568:12:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "2568:35:16"
										},
										{
											"arguments": [],
											"id": 2925,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 2924,
												"name": "Ownable",
												"nameLocations": [
													"2604:7:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1727,
												"src": "2604:7:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "2604:9:16"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2914,
												"mutability": "mutable",
												"name": "_allo",
												"nameLocation": "2505:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2940,
												"src": "2497:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2913,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2497:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2916,
												"mutability": "mutable",
												"name": "_sndrCore",
												"nameLocation": "2528:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2940,
												"src": "2520:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2915,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2520:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2918,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "2555:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2940,
												"src": "2547:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2917,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2547:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2487:80:16"
									},
									"returnParameters": {
										"id": 2926,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2614:0:16"
									},
									"scope": 3600,
									"src": "2476:218:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										657
									],
									"body": {
										"id": 2982,
										"nodeType": "Block",
										"src": "2997:462:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2950,
															"name": "_poolId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2943,
															"src": "3027:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2949,
														"name": "__BaseStrategy_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1194,
														"src": "3007:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3007:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2952,
												"nodeType": "ExpressionStatement",
												"src": "3007:28:16"
											},
											{
												"assignments": [
													2954,
													2956,
													2958,
													2960
												],
												"declarations": [
													{
														"constant": false,
														"id": 2954,
														"mutability": "mutable",
														"name": "_registrationStartTime",
														"nameLocation": "3067:22:16",
														"nodeType": "VariableDeclaration",
														"scope": 2982,
														"src": "3060:29:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 2953,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "3060:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2956,
														"mutability": "mutable",
														"name": "_registrationEndTime",
														"nameLocation": "3110:20:16",
														"nodeType": "VariableDeclaration",
														"scope": 2982,
														"src": "3103:27:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 2955,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "3103:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2958,
														"mutability": "mutable",
														"name": "_allocationStartTime",
														"nameLocation": "3151:20:16",
														"nodeType": "VariableDeclaration",
														"scope": 2982,
														"src": "3144:27:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 2957,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "3144:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2960,
														"mutability": "mutable",
														"name": "_allocationEndTime",
														"nameLocation": "3192:18:16",
														"nodeType": "VariableDeclaration",
														"scope": 2982,
														"src": "3185:25:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 2959,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "3185:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2974,
												"initialValue": {
													"arguments": [
														{
															"id": 2963,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2945,
															"src": "3234:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 2965,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3242:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2964,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "3242:6:16",
																		"typeDescriptions": {}
																	}
																},
																{
																	"id": 2967,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3250:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2966,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "3250:6:16",
																		"typeDescriptions": {}
																	}
																},
																{
																	"id": 2969,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3258:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2968,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "3258:6:16",
																		"typeDescriptions": {}
																	}
																},
																{
																	"id": 2971,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3266:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2970,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "3266:6:16",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 2972,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3241:32:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_type$_t_uint64_$_$_t_type$_t_uint64_$_$_t_type$_t_uint64_$_$_t_type$_t_uint64_$_$",
																"typeString": "tuple(type(uint64),type(uint64),type(uint64),type(uint64))"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_tuple$_t_type$_t_uint64_$_$_t_type$_t_uint64_$_$_t_type$_t_uint64_$_$_t_type$_t_uint64_$_$",
																"typeString": "tuple(type(uint64),type(uint64),type(uint64),type(uint64))"
															}
														],
														"expression": {
															"id": 2961,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3223:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 2962,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3227:6:16",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "3223:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 2973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3223:51:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint64_$_t_uint64_$_t_uint64_$_t_uint64_$",
														"typeString": "tuple(uint64,uint64,uint64,uint64)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3046:228:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2976,
															"name": "_registrationStartTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2954,
															"src": "3320:22:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 2977,
															"name": "_registrationEndTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2956,
															"src": "3356:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 2978,
															"name": "_allocationStartTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2958,
															"src": "3390:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 2979,
															"name": "_allocationEndTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2960,
															"src": "3424:18:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 2975,
														"name": "_updatePoolTimestamps",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3040,
														"src": "3285:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint64_$_t_uint64_$_t_uint64_$_t_uint64_$returns$__$",
															"typeString": "function (uint64,uint64,uint64,uint64)"
														}
													},
													"id": 2980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3285:167:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2981,
												"nodeType": "ExpressionStatement",
												"src": "3285:167:16"
											}
										]
									},
									"documentation": {
										"id": 2941,
										"nodeType": "StructuredDocumentation",
										"src": "2700:217:16",
										"text": "@notice Initializes the strategy with pool-specific parameters\n @dev Overrides BaseStrategy's initialize function\n @param _poolId ID of the pool\n @param _data Encoded initialization parameters"
									},
									"functionSelector": "edd146cc",
									"id": 2983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "2931:10:16",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2947,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2988:8:16"
									},
									"parameters": {
										"id": 2946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2943,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "2950:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 2983,
												"src": "2942:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2942,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2942:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2945,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "2972:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2983,
												"src": "2959:18:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2944,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2959:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2941:37:16"
									},
									"returnParameters": {
										"id": 2948,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2997:0:16"
									},
									"scope": 3600,
									"src": "2922:537:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3039,
										"nodeType": "Block",
										"src": "3951:788:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 2998,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2996,
																"name": "_registrationStartTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2986,
																"src": "3982:22:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2997,
																"name": "_registrationEndTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2988,
																"src": "4007:20:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "3982:45:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420726567697374726174696f6e2074696d6573",
															"id": 2999,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4041:28:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bde9f4103f9f9ee4baf4e3e621f01112c3e2673b1282c7aeafad69087ef62f9b",
																"typeString": "literal_string \"Invalid registration times\""
															},
															"value": "Invalid registration times"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bde9f4103f9f9ee4baf4e3e621f01112c3e2673b1282c7aeafad69087ef62f9b",
																"typeString": "literal_string \"Invalid registration times\""
															}
														],
														"id": 2995,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3961:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3961:118:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3001,
												"nodeType": "ExpressionStatement",
												"src": "3961:118:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 3005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3003,
																"name": "_allocationStartTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2990,
																"src": "4110:20:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 3004,
																"name": "_allocationEndTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2992,
																"src": "4133:18:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "4110:41:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420616c6c6f636174696f6e2074696d6573",
															"id": 3006,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4165:26:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fec11fae3bc8843248d928221f0c07f072ef68d5ffbbb6300a0aebc1b88c97d",
																"typeString": "literal_string \"Invalid allocation times\""
															},
															"value": "Invalid allocation times"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9fec11fae3bc8843248d928221f0c07f072ef68d5ffbbb6300a0aebc1b88c97d",
																"typeString": "literal_string \"Invalid allocation times\""
															}
														],
														"id": 3002,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4089:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4089:112:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3008,
												"nodeType": "ExpressionStatement",
												"src": "4089:112:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 3012,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3010,
																"name": "_registrationEndTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2988,
																"src": "4232:20:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 3011,
																"name": "_allocationStartTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2990,
																"src": "4256:20:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "4232:44:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "526567697374726174696f6e206d75737420656e64206265666f726520616c6c6f636174696f6e20737461727473",
															"id": 3013,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4290:48:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_03417474ff7525d69da5a1a5e7699b14349565ec54ed0c1f3b76a096087f0750",
																"typeString": "literal_string \"Registration must end before allocation starts\""
															},
															"value": "Registration must end before allocation starts"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_03417474ff7525d69da5a1a5e7699b14349565ec54ed0c1f3b76a096087f0750",
																"typeString": "literal_string \"Registration must end before allocation starts\""
															}
														],
														"id": 3009,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4211:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4211:137:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3015,
												"nodeType": "ExpressionStatement",
												"src": "4211:137:16"
											},
											{
												"expression": {
													"id": 3018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3016,
														"name": "registrationStartTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2858,
														"src": "4359:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3017,
														"name": "_registrationStartTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2986,
														"src": "4383:22:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "4359:46:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 3019,
												"nodeType": "ExpressionStatement",
												"src": "4359:46:16"
											},
											{
												"expression": {
													"id": 3022,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3020,
														"name": "registrationEndTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2860,
														"src": "4415:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3021,
														"name": "_registrationEndTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2988,
														"src": "4437:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "4415:42:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 3023,
												"nodeType": "ExpressionStatement",
												"src": "4415:42:16"
											},
											{
												"expression": {
													"id": 3026,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3024,
														"name": "allocationStartTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2862,
														"src": "4467:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3025,
														"name": "_allocationStartTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2990,
														"src": "4489:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "4467:42:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 3027,
												"nodeType": "ExpressionStatement",
												"src": "4467:42:16"
											},
											{
												"expression": {
													"id": 3030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3028,
														"name": "allocationEndTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2864,
														"src": "4519:17:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3029,
														"name": "_allocationEndTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2992,
														"src": "4539:18:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "4519:38:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 3031,
												"nodeType": "ExpressionStatement",
												"src": "4519:38:16"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3033,
															"name": "registrationStartTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2858,
															"src": "4604:21:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 3034,
															"name": "registrationEndTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2860,
															"src": "4639:19:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 3035,
															"name": "allocationStartTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2862,
															"src": "4672:19:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 3036,
															"name": "allocationEndTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2864,
															"src": "4705:17:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 3032,
														"name": "TimestampsUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2886,
														"src": "4573:17:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$_t_uint64_$_t_uint64_$_t_uint64_$returns$__$",
															"typeString": "function (uint64,uint64,uint64,uint64)"
														}
													},
													"id": 3037,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4573:159:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3038,
												"nodeType": "EmitStatement",
												"src": "4568:164:16"
											}
										]
									},
									"documentation": {
										"id": 2984,
										"nodeType": "StructuredDocumentation",
										"src": "3465:287:16",
										"text": "@notice Updates the pool timestamps\n @param _registrationStartTime New registration start time\n @param _registrationEndTime New registration end time\n @param _allocationStartTime New allocation start time\n @param _allocationEndTime New allocation end time"
									},
									"id": 3040,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_updatePoolTimestamps",
									"nameLocation": "3766:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2986,
												"mutability": "mutable",
												"name": "_registrationStartTime",
												"nameLocation": "3804:22:16",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "3797:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2985,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3797:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2988,
												"mutability": "mutable",
												"name": "_registrationEndTime",
												"nameLocation": "3843:20:16",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "3836:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2987,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3836:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2990,
												"mutability": "mutable",
												"name": "_allocationStartTime",
												"nameLocation": "3880:20:16",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "3873:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2989,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3873:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2992,
												"mutability": "mutable",
												"name": "_allocationEndTime",
												"nameLocation": "3917:18:16",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "3910:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2991,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3910:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3787:154:16"
									},
									"returnParameters": {
										"id": 2994,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3951:0:16"
									},
									"scope": 3600,
									"src": "3757:982:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1500
									],
									"body": {
										"id": 3112,
										"nodeType": "Block",
										"src": "5213:707:16",
										"statements": [
											{
												"assignments": [
													3056,
													3058
												],
												"declarations": [
													{
														"constant": false,
														"id": 3056,
														"mutability": "mutable",
														"name": "recipientAddress",
														"nameLocation": "5232:16:16",
														"nodeType": "VariableDeclaration",
														"scope": 3112,
														"src": "5224:24:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3055,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5224:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3058,
														"mutability": "mutable",
														"name": "initialAllocation",
														"nameLocation": "5258:17:16",
														"nodeType": "VariableDeclaration",
														"scope": 3112,
														"src": "5250:25:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3057,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5250:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3068,
												"initialValue": {
													"arguments": [
														{
															"id": 3061,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3043,
															"src": "5303:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 3063,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5323:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3062,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5323:7:16",
																		"typeDescriptions": {}
																	}
																},
																{
																	"id": 3065,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5332:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 3064,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5332:7:16",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 3066,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5322:18:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_type$_t_address_$_$_t_type$_t_uint256_$_$",
																"typeString": "tuple(type(address),type(uint256))"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_tuple$_t_type$_t_address_$_$_t_type$_t_uint256_$_$",
																"typeString": "tuple(type(address),type(uint256))"
															}
														],
														"expression": {
															"id": 3059,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5279:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 3060,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5283:6:16",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "5279:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 3067,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5279:71:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_payable_$_t_uint256_$",
														"typeString": "tuple(address payable,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5223:127:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 3078,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 3070,
																		"name": "recipients",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2850,
																		"src": "5382:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																			"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
																		}
																	},
																	"id": 3072,
																	"indexExpression": {
																		"id": 3071,
																		"name": "recipientAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3056,
																		"src": "5393:16:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5382:28:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Recipient_$2845_storage",
																		"typeString": "struct SNDRStrategy.Recipient storage ref"
																	}
																},
																"id": 3073,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5411:16:16",
																"memberName": "recipientAddress",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2839,
																"src": "5382:45:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 3076,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5439:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 3075,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5431:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3074,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5431:7:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 3077,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5431:10:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5382:59:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "526563697069656e7420616c72656164792072656769737465726564",
															"id": 3079,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5455:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_dd1a97c751e09589009cc461c4f8f8ab589eaf13e59acbd98d84065b1c104f9b",
																"typeString": "literal_string \"Recipient already registered\""
															},
															"value": "Recipient already registered"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_dd1a97c751e09589009cc461c4f8f8ab589eaf13e59acbd98d84065b1c104f9b",
																"typeString": "literal_string \"Recipient already registered\""
															}
														],
														"id": 3069,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5361:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5361:134:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3081,
												"nodeType": "ExpressionStatement",
												"src": "5361:134:16"
											},
											{
												"expression": {
													"id": 3091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 3082,
															"name": "recipients",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2850,
															"src": "5506:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
															}
														},
														"id": 3084,
														"indexExpression": {
															"id": 3083,
															"name": "recipientAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3056,
															"src": "5517:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5506:28:16",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Recipient_$2845_storage",
															"typeString": "struct SNDRStrategy.Recipient storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3086,
																"name": "recipientAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3056,
																"src": "5579:16:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 3087,
																"name": "initialAllocation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3058,
																"src": "5626:17:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 3088,
																	"name": "Status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 533,
																	"src": "5665:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_Status_$533_$",
																		"typeString": "type(enum IStrategy.Status)"
																	}
																},
																"id": 3089,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "5672:7:16",
																"memberName": "Pending",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 527,
																"src": "5665:14:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$533",
																	"typeString": "enum IStrategy.Status"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_enum$_Status_$533",
																	"typeString": "enum IStrategy.Status"
																}
															],
															"id": 3085,
															"name": "Recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2845,
															"src": "5537:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Recipient_$2845_storage_ptr_$",
																"typeString": "type(struct SNDRStrategy.Recipient storage pointer)"
															}
														},
														"id": 3090,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [
															"5561:16:16",
															"5609:15:16",
															"5657:6:16"
														],
														"names": [
															"recipientAddress",
															"totalAllocation",
															"status"
														],
														"nodeType": "FunctionCall",
														"src": "5537:153:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Recipient_$2845_memory_ptr",
															"typeString": "struct SNDRStrategy.Recipient memory"
														}
													},
													"src": "5506:184:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Recipient_$2845_storage",
														"typeString": "struct SNDRStrategy.Recipient storage ref"
													}
												},
												"id": 3092,
												"nodeType": "ExpressionStatement",
												"src": "5506:184:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3096,
															"name": "recipientAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3056,
															"src": "5719:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 3093,
															"name": "recipientList",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2853,
															"src": "5700:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 3095,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5714:4:16",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "5700:18:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
															"typeString": "function (address[] storage pointer,address)"
														}
													},
													"id": 3097,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:36:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3098,
												"nodeType": "ExpressionStatement",
												"src": "5700:36:16"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3100,
															"name": "recipientAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3056,
															"src": "5772:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3101,
															"name": "initialAllocation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3058,
															"src": "5790:17:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3099,
														"name": "RecipientRegistered",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2870,
														"src": "5752:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5752:56:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3103,
												"nodeType": "EmitStatement",
												"src": "5747:61:16"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3105,
															"name": "recipientAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3056,
															"src": "5846:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 3106,
																"name": "Status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 533,
																"src": "5864:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Status_$533_$",
																	"typeString": "type(enum IStrategy.Status)"
																}
															},
															"id": 3107,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "5871:7:16",
															"memberName": "Pending",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 527,
															"src": "5864:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Status_$533",
																"typeString": "enum IStrategy.Status"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_enum$_Status_$533",
																"typeString": "enum IStrategy.Status"
															}
														],
														"id": 3104,
														"name": "RecipientStatusUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2904,
														"src": "5823:22:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_enum$_Status_$533_$returns$__$",
															"typeString": "function (address,enum IStrategy.Status)"
														}
													},
													"id": 3108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5823:56:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3109,
												"nodeType": "EmitStatement",
												"src": "5818:61:16"
											},
											{
												"expression": {
													"id": 3110,
													"name": "recipientAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3056,
													"src": "5897:16:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 3054,
												"id": 3111,
												"nodeType": "Return",
												"src": "5890:23:16"
											}
										]
									},
									"documentation": {
										"id": 3041,
										"nodeType": "StructuredDocumentation",
										"src": "4938:63:16",
										"text": "@return recipientId The address of the registered recipient"
									},
									"id": 3113,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3049,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3048,
												"name": "onlyActiveRegistration",
												"nameLocations": [
													"5127:22:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3568,
												"src": "5127:22:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "5127:22:16"
										},
										{
											"id": 3051,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3050,
												"name": "nonReentrant",
												"nameLocations": [
													"5158:12:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1757,
												"src": "5158:12:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "5158:12:16"
										}
									],
									"name": "_registerRecipient",
									"nameLocation": "5015:18:16",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3047,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5110:8:16"
									},
									"parameters": {
										"id": 3046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3043,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "5056:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3113,
												"src": "5043:18:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3042,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5043:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3045,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3113,
												"src": "5071:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5071:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5033:51:16"
									},
									"returnParameters": {
										"id": 3054,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3053,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "5196:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 3113,
												"src": "5188:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3052,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5188:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5187:21:16"
									},
									"scope": 3600,
									"src": "5006:914:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1508
									],
									"body": {
										"id": 3260,
										"nodeType": "Block",
										"src": "6261:1453:16",
										"statements": [
											{
												"assignments": [
													3131,
													3134
												],
												"declarations": [
													{
														"constant": false,
														"id": 3131,
														"mutability": "mutable",
														"name": "recipientAddresses",
														"nameLocation": "6289:18:16",
														"nodeType": "VariableDeclaration",
														"scope": 3260,
														"src": "6272:35:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 3129,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6272:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 3130,
															"nodeType": "ArrayTypeName",
															"src": "6272:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3134,
														"mutability": "mutable",
														"name": "amounts",
														"nameLocation": "6326:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 3260,
														"src": "6309:24:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 3132,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6309:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3133,
															"nodeType": "ArrayTypeName",
															"src": "6309:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3146,
												"initialValue": {
													"arguments": [
														{
															"id": 3137,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3116,
															"src": "6361:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"baseExpression": {
																		"id": 3139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "6369:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 3138,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "6369:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3140,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6369:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_array$_t_address_$dyn_memory_ptr_$",
																		"typeString": "type(address[] memory)"
																	}
																},
																{
																	"baseExpression": {
																		"id": 3142,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "6380:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 3141,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "6380:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6380:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_array$_t_uint256_$dyn_memory_ptr_$",
																		"typeString": "type(uint256[] memory)"
																	}
																}
															],
															"id": 3144,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "6368:22:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_type$_t_array$_t_address_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$",
																"typeString": "tuple(type(address[] memory),type(uint256[] memory))"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_tuple$_t_type$_t_array$_t_address_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$",
																"typeString": "tuple(type(address[] memory),type(uint256[] memory))"
															}
														],
														"expression": {
															"id": 3135,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "6337:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 3136,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "6354:6:16",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "6337:23:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 3145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6337:54:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(address[] memory,uint256[] memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6271:120:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3152,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3148,
																	"name": "recipientAddresses",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3131,
																	"src": "6422:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																		"typeString": "address[] memory"
																	}
																},
																"id": 3149,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6441:6:16",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "6422:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 3150,
																	"name": "amounts",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3134,
																	"src": "6451:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																		"typeString": "uint256[] memory"
																	}
																},
																"id": 3151,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6459:6:16",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "6451:14:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6422:43:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d69736d61746368656420696e70757420617272617973",
															"id": 3153,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6479:25:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a2da833f8d7ed126839b9ef198268abdf3536c4b21ab267733d4f65a97f4c62f",
																"typeString": "literal_string \"Mismatched input arrays\""
															},
															"value": "Mismatched input arrays"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a2da833f8d7ed126839b9ef198268abdf3536c4b21ab267733d4f65a97f4c62f",
																"typeString": "literal_string \"Mismatched input arrays\""
															}
														],
														"id": 3147,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6401:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6401:113:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3155,
												"nodeType": "ExpressionStatement",
												"src": "6401:113:16"
											},
											{
												"body": {
													"id": 3197,
													"nodeType": "Block",
													"src": "6623:378:16",
													"statements": [
														{
															"assignments": [
																3168
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3168,
																	"mutability": "mutable",
																	"name": "recipientAddress",
																	"nameLocation": "6645:16:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 3197,
																	"src": "6637:24:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 3167,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6637:7:16",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3172,
															"initialValue": {
																"baseExpression": {
																	"id": 3169,
																	"name": "recipientAddresses",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3131,
																	"src": "6664:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																		"typeString": "address[] memory"
																	}
																},
																"id": 3171,
																"indexExpression": {
																	"id": 3170,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3157,
																	"src": "6683:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6664:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6637:48:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 3182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 3174,
																					"name": "recipients",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2850,
																					"src": "6724:10:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																						"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
																					}
																				},
																				"id": 3176,
																				"indexExpression": {
																					"id": 3175,
																					"name": "recipientAddress",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3168,
																					"src": "6735:16:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "6724:28:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Recipient_$2845_storage",
																					"typeString": "struct SNDRStrategy.Recipient storage ref"
																				}
																			},
																			"id": 3177,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "6753:16:16",
																			"memberName": "recipientAddress",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2839,
																			"src": "6724:45:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 3180,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6781:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 3179,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6773:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 3178,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6773:7:16",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3181,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6773:10:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "6724:59:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "526563697069656e74206e6f742072656769737465726564",
																		"id": 3183,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6801:26:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_bd60f56ddd9d208032a0d7f7c0b4c7b5a88ee05fc6fccd16f57a2ed54650c081",
																			"typeString": "literal_string \"Recipient not registered\""
																		},
																		"value": "Recipient not registered"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_bd60f56ddd9d208032a0d7f7c0b4c7b5a88ee05fc6fccd16f57a2ed54650c081",
																			"typeString": "literal_string \"Recipient not registered\""
																		}
																	],
																	"id": 3173,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "6699:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 3184,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6699:142:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3185,
															"nodeType": "ExpressionStatement",
															"src": "6699:142:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_enum$_Status_$533",
																			"typeString": "enum IStrategy.Status"
																		},
																		"id": 3193,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 3187,
																					"name": "recipients",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2850,
																					"src": "6880:10:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																						"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
																					}
																				},
																				"id": 3189,
																				"indexExpression": {
																					"id": 3188,
																					"name": "recipientAddress",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3168,
																					"src": "6891:16:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "6880:28:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Recipient_$2845_storage",
																					"typeString": "struct SNDRStrategy.Recipient storage ref"
																				}
																			},
																			"id": 3190,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "6909:6:16",
																			"memberName": "status",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2844,
																			"src": "6880:35:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_enum$_Status_$533",
																				"typeString": "enum IStrategy.Status"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"expression": {
																				"id": 3191,
																				"name": "Status",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 533,
																				"src": "6919:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_enum$_Status_$533_$",
																					"typeString": "type(enum IStrategy.Status)"
																				}
																			},
																			"id": 3192,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "6926:8:16",
																			"memberName": "Accepted",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 528,
																			"src": "6919:15:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_enum$_Status_$533",
																				"typeString": "enum IStrategy.Status"
																			}
																		},
																		"src": "6880:54:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "526563697069656e74206e6f74206163636570746564",
																		"id": 3194,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6952:24:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_8c979e06625babb8b274b3b30cba0c6156af855fbaa192ce818ce3077b3ca77b",
																			"typeString": "literal_string \"Recipient not accepted\""
																		},
																		"value": "Recipient not accepted"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_8c979e06625babb8b274b3b30cba0c6156af855fbaa192ce818ce3077b3ca77b",
																			"typeString": "literal_string \"Recipient not accepted\""
																		}
																	],
																	"id": 3186,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "6855:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 3195,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6855:135:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3196,
															"nodeType": "ExpressionStatement",
															"src": "6855:135:16"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3160,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3157,
														"src": "6587:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 3161,
															"name": "recipientAddresses",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3131,
															"src": "6591:18:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														"id": 3162,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6610:6:16",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6591:25:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6587:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3198,
												"initializationExpression": {
													"assignments": [
														3157
													],
													"declarations": [
														{
															"constant": false,
															"id": 3157,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6580:1:16",
															"nodeType": "VariableDeclaration",
															"scope": 3198,
															"src": "6572:9:16",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 3156,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6572:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 3159,
													"initialValue": {
														"hexValue": "30",
														"id": 3158,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6584:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "6572:13:16"
												},
												"loopExpression": {
													"expression": {
														"id": 3165,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6618:3:16",
														"subExpression": {
															"id": 3164,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3157,
															"src": "6618:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3166,
													"nodeType": "ExpressionStatement",
													"src": "6618:3:16"
												},
												"nodeType": "ForStatement",
												"src": "6567:434:16"
											},
											{
												"assignments": [
													3200
												],
												"declarations": [
													{
														"constant": false,
														"id": 3200,
														"mutability": "mutable",
														"name": "totalAllocated",
														"nameLocation": "7079:14:16",
														"nodeType": "VariableDeclaration",
														"scope": 3260,
														"src": "7071:22:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3199,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7071:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3202,
												"initialValue": {
													"hexValue": "30",
													"id": 3201,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7096:1:16",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7071:26:16"
											},
											{
												"body": {
													"id": 3245,
													"nodeType": "Block",
													"src": "7163:368:16",
													"statements": [
														{
															"assignments": [
																3215
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3215,
																	"mutability": "mutable",
																	"name": "recipientAddress",
																	"nameLocation": "7185:16:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 3245,
																	"src": "7177:24:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 3214,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7177:7:16",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3219,
															"initialValue": {
																"baseExpression": {
																	"id": 3216,
																	"name": "recipientAddresses",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3131,
																	"src": "7204:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																		"typeString": "address[] memory"
																	}
																},
																"id": 3218,
																"indexExpression": {
																	"id": 3217,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3204,
																	"src": "7223:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7204:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7177:48:16"
														},
														{
															"assignments": [
																3221
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3221,
																	"mutability": "mutable",
																	"name": "amount",
																	"nameLocation": "7247:6:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 3245,
																	"src": "7239:14:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 3220,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7239:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3225,
															"initialValue": {
																"baseExpression": {
																	"id": 3222,
																	"name": "amounts",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3134,
																	"src": "7256:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																		"typeString": "uint256[] memory"
																	}
																},
																"id": 3224,
																"indexExpression": {
																	"id": 3223,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3204,
																	"src": "7264:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7256:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7239:27:16"
														},
														{
															"expression": {
																"id": 3231,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 3226,
																			"name": "recipients",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2850,
																			"src": "7281:10:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																				"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
																			}
																		},
																		"id": 3228,
																		"indexExpression": {
																			"id": 3227,
																			"name": "recipientAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3215,
																			"src": "7292:16:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7281:28:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Recipient_$2845_storage",
																			"typeString": "struct SNDRStrategy.Recipient storage ref"
																		}
																	},
																	"id": 3229,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "7310:15:16",
																	"memberName": "totalAllocation",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2841,
																	"src": "7281:44:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 3230,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3221,
																	"src": "7329:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7281:54:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3232,
															"nodeType": "ExpressionStatement",
															"src": "7281:54:16"
														},
														{
															"expression": {
																"id": 3235,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3233,
																	"name": "totalAllocated",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3200,
																	"src": "7349:14:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 3234,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3221,
																	"src": "7367:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7349:24:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3236,
															"nodeType": "ExpressionStatement",
															"src": "7349:24:16"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 3238,
																		"name": "recipientAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3215,
																		"src": "7428:16:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"baseExpression": {
																				"id": 3239,
																				"name": "recipients",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2850,
																				"src": "7462:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																					"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
																				}
																			},
																			"id": 3241,
																			"indexExpression": {
																				"id": 3240,
																				"name": "recipientAddress",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3215,
																				"src": "7473:16:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7462:28:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Recipient_$2845_storage",
																				"typeString": "struct SNDRStrategy.Recipient storage ref"
																			}
																		},
																		"id": 3242,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7491:15:16",
																		"memberName": "totalAllocation",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2841,
																		"src": "7462:44:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3237,
																	"name": "AllocationUpdated",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2876,
																	"src": "7393:17:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 3243,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7393:127:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3244,
															"nodeType": "EmitStatement",
															"src": "7388:132:16"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3207,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3204,
														"src": "7127:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 3208,
															"name": "recipientAddresses",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3131,
															"src": "7131:18:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														"id": 3209,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7150:6:16",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7131:25:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7127:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3246,
												"initializationExpression": {
													"assignments": [
														3204
													],
													"declarations": [
														{
															"constant": false,
															"id": 3204,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "7120:1:16",
															"nodeType": "VariableDeclaration",
															"scope": 3246,
															"src": "7112:9:16",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 3203,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7112:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 3206,
													"initialValue": {
														"hexValue": "30",
														"id": 3205,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7124:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "7112:13:16"
												},
												"loopExpression": {
													"expression": {
														"id": 3212,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "7158:3:16",
														"subExpression": {
															"id": 3211,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3204,
															"src": "7158:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3213,
													"nodeType": "ExpressionStatement",
													"src": "7158:3:16"
												},
												"nodeType": "ForStatement",
												"src": "7107:424:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3248,
																"name": "totalAllocated",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3200,
																"src": "7549:14:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3249,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7566:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7549:18:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2066756e647320616c6c6f6361746564",
															"id": 3251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7569:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50d4f790d8b7bd0537f8691ae00f9be966c72fa15536cebb07bef251941b65fa",
																"typeString": "literal_string \"No funds allocated\""
															},
															"value": "No funds allocated"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50d4f790d8b7bd0537f8691ae00f9be966c72fa15536cebb07bef251941b65fa",
																"typeString": "literal_string \"No funds allocated\""
															}
														],
														"id": 3247,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7541:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7541:49:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3253,
												"nodeType": "ExpressionStatement",
												"src": "7541:49:16"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 3255,
																"name": "recipientAddresses",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3131,
																"src": "7644:18:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																	"typeString": "address[] memory"
																}
															},
															"id": 3256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7663:6:16",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "7644:25:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3257,
															"name": "totalAllocated",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3200,
															"src": "7683:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3254,
														"name": "BatchAllocationCompleted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2892,
														"src": "7606:24:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256)"
														}
													},
													"id": 3258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7606:101:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3259,
												"nodeType": "EmitStatement",
												"src": "7601:106:16"
											}
										]
									},
									"documentation": {
										"id": 3114,
										"nodeType": "StructuredDocumentation",
										"src": "5926:188:16",
										"text": "@notice Allocates funds to recipients\n @dev Overrides BaseStrategy's _allocate function\n @param _data Encoded allocation data\n @param _sender Address of the sender"
									},
									"id": 3261,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3122,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3121,
												"name": "onlyActiveAllocation",
												"nameLocations": [
													"6215:20:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3586,
												"src": "6215:20:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "6215:20:16"
										},
										{
											"arguments": [
												{
													"id": 3124,
													"name": "_sender",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3118,
													"src": "6252:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 3125,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3123,
												"name": "onlyPoolManager",
												"nameLocations": [
													"6236:15:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1077,
												"src": "6236:15:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "6236:24:16"
										}
									],
									"name": "_allocate",
									"nameLocation": "6128:9:16",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3120,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6206:8:16"
									},
									"parameters": {
										"id": 3119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3116,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "6160:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3261,
												"src": "6147:18:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3115,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6147:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3118,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "6183:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 3261,
												"src": "6175:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6175:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6137:59:16"
									},
									"returnParameters": {
										"id": 3126,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6261:0:16"
									},
									"scope": 3600,
									"src": "6119:1595:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1519
									],
									"body": {
										"id": 3369,
										"nodeType": "Block",
										"src": "8262:980:16",
										"statements": [
											{
												"assignments": [
													3281
												],
												"declarations": [
													{
														"constant": false,
														"id": 3281,
														"mutability": "mutable",
														"name": "duration",
														"nameLocation": "8310:8:16",
														"nodeType": "VariableDeclaration",
														"scope": 3369,
														"src": "8302:16:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3280,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8302:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3289,
												"initialValue": {
													"arguments": [
														{
															"id": 3284,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3267,
															"src": "8332:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 3286,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8340:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 3285,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8340:7:16",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 3287,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "8339:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														],
														"expression": {
															"id": 3282,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "8321:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 3283,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8325:6:16",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "8321:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 3288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8321:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8302:47:16"
											},
											{
												"assignments": [
													3294
												],
												"declarations": [
													{
														"constant": false,
														"id": 3294,
														"mutability": "mutable",
														"name": "allocations",
														"nameLocation": "8412:11:16",
														"nodeType": "VariableDeclaration",
														"scope": 3369,
														"src": "8395:28:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 3292,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "8395:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3293,
															"nodeType": "ArrayTypeName",
															"src": "8395:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3301,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 3298,
																"name": "_recipientIds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3265,
																"src": "8440:13:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																	"typeString": "address[] memory"
																}
															},
															"id": 3299,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8454:6:16",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8440:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3297,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "8426:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (uint256[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 3295,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "8430:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3296,
															"nodeType": "ArrayTypeName",
															"src": "8430:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														}
													},
													"id": 3300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8426:35:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8395:66:16"
											},
											{
												"assignments": [
													3303
												],
												"declarations": [
													{
														"constant": false,
														"id": 3303,
														"mutability": "mutable",
														"name": "totalAllocation",
														"nameLocation": "8479:15:16",
														"nodeType": "VariableDeclaration",
														"scope": 3369,
														"src": "8471:23:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3302,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8471:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3305,
												"initialValue": {
													"hexValue": "30",
													"id": 3304,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8497:1:16",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8471:27:16"
											},
											{
												"body": {
													"id": 3334,
													"nodeType": "Block",
													"src": "8559:133:16",
													"statements": [
														{
															"expression": {
																"id": 3326,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 3317,
																		"name": "allocations",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3294,
																		"src": "8573:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		}
																	},
																	"id": 3319,
																	"indexExpression": {
																		"id": 3318,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3307,
																		"src": "8585:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "8573:14:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 3320,
																			"name": "recipients",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2850,
																			"src": "8590:10:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																				"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
																			}
																		},
																		"id": 3324,
																		"indexExpression": {
																			"baseExpression": {
																				"id": 3321,
																				"name": "_recipientIds",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3265,
																				"src": "8601:13:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																					"typeString": "address[] memory"
																				}
																			},
																			"id": 3323,
																			"indexExpression": {
																				"id": 3322,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3307,
																				"src": "8615:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "8601:16:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8590:28:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Recipient_$2845_storage",
																			"typeString": "struct SNDRStrategy.Recipient storage ref"
																		}
																	},
																	"id": 3325,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8619:15:16",
																	"memberName": "totalAllocation",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2841,
																	"src": "8590:44:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8573:61:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3327,
															"nodeType": "ExpressionStatement",
															"src": "8573:61:16"
														},
														{
															"expression": {
																"id": 3332,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3328,
																	"name": "totalAllocation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3303,
																	"src": "8648:15:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 3329,
																		"name": "allocations",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3294,
																		"src": "8667:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		}
																	},
																	"id": 3331,
																	"indexExpression": {
																		"id": 3330,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3307,
																		"src": "8679:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8667:14:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8648:33:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3333,
															"nodeType": "ExpressionStatement",
															"src": "8648:33:16"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3310,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3307,
														"src": "8528:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 3311,
															"name": "_recipientIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3265,
															"src": "8532:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														"id": 3312,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8546:6:16",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8532:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8528:24:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3335,
												"initializationExpression": {
													"assignments": [
														3307
													],
													"declarations": [
														{
															"constant": false,
															"id": 3307,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "8521:1:16",
															"nodeType": "VariableDeclaration",
															"scope": 3335,
															"src": "8513:9:16",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 3306,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "8513:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 3309,
													"initialValue": {
														"hexValue": "30",
														"id": 3308,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8525:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "8513:13:16"
												},
												"loopExpression": {
													"expression": {
														"id": 3315,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "8554:3:16",
														"subExpression": {
															"id": 3314,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3307,
															"src": "8554:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3316,
													"nodeType": "ExpressionStatement",
													"src": "8554:3:16"
												},
												"nodeType": "ForStatement",
												"src": "8508:184:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3339,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3337,
																"name": "poolAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "8709:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 3338,
																"name": "totalAllocation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3303,
																"src": "8723:15:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8709:29:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506f6f6c20616c6c6f636174696f6e2066756e647320746f6f206c6f77",
															"id": 3340,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8740:31:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6f24949e12d254ebf26ff26ee3772e5b0e7a2b2316c7143d29b7b38bcc623cea",
																"typeString": "literal_string \"Pool allocation funds too low\""
															},
															"value": "Pool allocation funds too low"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6f24949e12d254ebf26ff26ee3772e5b0e7a2b2316c7143d29b7b38bcc623cea",
																"typeString": "literal_string \"Pool allocation funds too low\""
															}
														],
														"id": 3336,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8701:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8701:71:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3342,
												"nodeType": "ExpressionStatement",
												"src": "8701:71:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3348,
																	"name": "sndrCore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2834,
																	"src": "8897:8:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ISNDRCore_$2820",
																		"typeString": "contract ISNDRCore"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ISNDRCore_$2820",
																		"typeString": "contract ISNDRCore"
																	}
																],
																"id": 3347,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8889:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3346,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8889:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 3349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8889:17:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3350,
															"name": "totalAllocation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3303,
															"src": "8908:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3343,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2837,
															"src": "8870:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															}
														},
														"id": 3345,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8876:12:16",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1939,
														"src": "8870:18:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1870_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 3351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8870:54:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3352,
												"nodeType": "ExpressionStatement",
												"src": "8870:54:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3356,
															"name": "poolId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1032,
															"src": "9023:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3357,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2837,
															"src": "9043:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 3358,
															"name": "_recipientIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3265,
															"src": "9062:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 3359,
															"name": "allocations",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3294,
															"src": "9089:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														},
														{
															"id": 3360,
															"name": "duration",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3281,
															"src": "9114:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3361,
															"name": "whitelistedCollectors",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2856,
															"src": "9136:21:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														],
														"expression": {
															"id": 3353,
															"name": "sndrCore",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2834,
															"src": "8982:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISNDRCore_$2820",
																"typeString": "contract ISNDRCore"
															}
														},
														"id": 3355,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8991:18:16",
														"memberName": "handleDistribution",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2819,
														"src": "8982:27:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_contract$_IERC20_$1870_$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$",
															"typeString": "function (uint256,contract IERC20,address[] memory,uint256[] memory,uint256,address[] memory) external"
														}
													},
													"id": 3362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8982:185:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3363,
												"nodeType": "ExpressionStatement",
												"src": "8982:185:16"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3365,
															"name": "_recipientIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3265,
															"src": "9204:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 3366,
															"name": "totalAllocation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3303,
															"src": "9219:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3364,
														"name": "DistributionExecuted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2911,
														"src": "9183:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (address[] memory,uint256)"
														}
													},
													"id": 3367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9183:52:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3368,
												"nodeType": "EmitStatement",
												"src": "9178:57:16"
											}
										]
									},
									"documentation": {
										"id": 3262,
										"nodeType": "StructuredDocumentation",
										"src": "7720:297:16",
										"text": "@notice Distributes funds to recipients\n @dev Overrides BaseStrategy's _distribute function\n @param _recipientIds Array of recipient addresses\n @param _data Additional distribution data\n @custom:data '(uint256 duration)'\n @param _sender Address of the sender"
									},
									"id": 3370,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3273,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3272,
												"name": "onlyAfterAllocation",
												"nameLocations": [
													"8184:19:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3599,
												"src": "8184:19:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "8184:19:16"
										},
										{
											"id": 3275,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3274,
												"name": "nonReentrant",
												"nameLocations": [
													"8212:12:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1757,
												"src": "8212:12:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "8212:12:16"
										},
										{
											"arguments": [
												{
													"id": 3277,
													"name": "_sender",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3269,
													"src": "8249:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 3278,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3276,
												"name": "onlyPoolManager",
												"nameLocations": [
													"8233:15:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1077,
												"src": "8233:15:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "8233:24:16"
										}
									],
									"name": "_distribute",
									"nameLocation": "8031:11:16",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3271,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8167:8:16"
									},
									"parameters": {
										"id": 3270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3265,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "8069:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 3370,
												"src": "8052:30:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 3263,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "8052:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 3264,
													"nodeType": "ArrayTypeName",
													"src": "8052:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3267,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "8105:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3370,
												"src": "8092:18:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3266,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8092:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3269,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "8128:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 3370,
												"src": "8120:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8120:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8042:99:16"
									},
									"returnParameters": {
										"id": 3279,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8262:0:16"
									},
									"scope": 3600,
									"src": "8022:1220:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1530
									],
									"body": {
										"id": 3390,
										"nodeType": "Block",
										"src": "9631:179:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3383,
															"name": "_recipientId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3373,
															"src": "9710:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 3384,
																	"name": "recipients",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2850,
																	"src": "9748:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																		"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
																	}
																},
																"id": 3386,
																"indexExpression": {
																	"id": 3385,
																	"name": "_recipientId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3373,
																	"src": "9759:12:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "9748:24:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Recipient_$2845_storage",
																	"typeString": "struct SNDRStrategy.Recipient storage ref"
																}
															},
															"id": 3387,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9773:15:16",
															"memberName": "totalAllocation",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2841,
															"src": "9748:40:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3382,
														"name": "PayoutSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 538,
														"src": "9660:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PayoutSummary_$538_storage_ptr_$",
															"typeString": "type(struct IStrategy.PayoutSummary storage pointer)"
														}
													},
													"id": 3388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"9692:16:16",
														"9740:6:16"
													],
													"names": [
														"recipientAddress",
														"amount"
													],
													"nodeType": "FunctionCall",
													"src": "9660:143:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PayoutSummary_$538_memory_ptr",
														"typeString": "struct IStrategy.PayoutSummary memory"
													}
												},
												"functionReturnParameters": 3381,
												"id": 3389,
												"nodeType": "Return",
												"src": "9641:162:16"
											}
										]
									},
									"documentation": {
										"id": 3371,
										"nodeType": "StructuredDocumentation",
										"src": "9248:246:16",
										"text": "@notice Returns the payout summary for a recipient\n @dev Overrides BaseStrategy's _getPayout function\n @param _recipientId Address of the recipient\n @return PayoutSummary struct with recipient address and allocated amount"
									},
									"id": 3391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getPayout",
									"nameLocation": "9508:10:16",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3377,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9591:8:16"
									},
									"parameters": {
										"id": 3376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3373,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "9536:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 3391,
												"src": "9528:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3372,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9528:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3391,
												"src": "9558:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3374,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9558:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9518:58:16"
									},
									"returnParameters": {
										"id": 3381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3391,
												"src": "9609:20:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PayoutSummary_$538_memory_ptr",
													"typeString": "struct IStrategy.PayoutSummary"
												},
												"typeName": {
													"id": 3379,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3378,
														"name": "PayoutSummary",
														"nameLocations": [
															"9609:13:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 538,
														"src": "9609:13:16"
													},
													"referencedDeclaration": 538,
													"src": "9609:13:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PayoutSummary_$538_storage_ptr",
														"typeString": "struct IStrategy.PayoutSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9608:22:16"
									},
									"scope": 3600,
									"src": "9499:311:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1539
									],
									"body": {
										"id": 3406,
										"nodeType": "Block",
										"src": "10131:55:16",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 3401,
															"name": "recipients",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2850,
															"src": "10148:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
															}
														},
														"id": 3403,
														"indexExpression": {
															"id": 3402,
															"name": "_recipientId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3394,
															"src": "10159:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "10148:24:16",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Recipient_$2845_storage",
															"typeString": "struct SNDRStrategy.Recipient storage ref"
														}
													},
													"id": 3404,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "10173:6:16",
													"memberName": "status",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2844,
													"src": "10148:31:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$533",
														"typeString": "enum IStrategy.Status"
													}
												},
												"functionReturnParameters": 3400,
												"id": 3405,
												"nodeType": "Return",
												"src": "10141:38:16"
											}
										]
									},
									"documentation": {
										"id": 3392,
										"nodeType": "StructuredDocumentation",
										"src": "9816:205:16",
										"text": "@notice Returns the status of a recipient\n @dev Overrides BaseStrategy's _getRecipientStatus function\n @param _recipientId Address of the recipient\n @return Status of the recipient"
									},
									"id": 3407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getRecipientStatus",
									"nameLocation": "10035:19:16",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3396,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10105:8:16"
									},
									"parameters": {
										"id": 3395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3394,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "10072:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 3407,
												"src": "10064:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10064:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10054:36:16"
									},
									"returnParameters": {
										"id": 3400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3399,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3407,
												"src": "10123:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$533",
													"typeString": "enum IStrategy.Status"
												},
												"typeName": {
													"id": 3398,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3397,
														"name": "Status",
														"nameLocations": [
															"10123:6:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 533,
														"src": "10123:6:16"
													},
													"referencedDeclaration": 533,
													"src": "10123:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$533",
														"typeString": "enum IStrategy.Status"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10122:8:16"
									},
									"scope": 3600,
									"src": "10026:160:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3443,
										"nodeType": "Block",
										"src": "10462:275:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 3427,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 3419,
																		"name": "recipients",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2850,
																		"src": "10493:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																			"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
																		}
																	},
																	"id": 3421,
																	"indexExpression": {
																		"id": 3420,
																		"name": "_recipientAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3410,
																		"src": "10504:17:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10493:29:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Recipient_$2845_storage",
																		"typeString": "struct SNDRStrategy.Recipient storage ref"
																	}
																},
																"id": 3422,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10523:16:16",
																"memberName": "recipientAddress",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2839,
																"src": "10493:46:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 3425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10551:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 3424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10543:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3423,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10543:7:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 3426,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10543:10:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10493:60:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "526563697069656e74206e6f742072656769737465726564",
															"id": 3428,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10567:26:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bd60f56ddd9d208032a0d7f7c0b4c7b5a88ee05fc6fccd16f57a2ed54650c081",
																"typeString": "literal_string \"Recipient not registered\""
															},
															"value": "Recipient not registered"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bd60f56ddd9d208032a0d7f7c0b4c7b5a88ee05fc6fccd16f57a2ed54650c081",
																"typeString": "literal_string \"Recipient not registered\""
															}
														],
														"id": 3418,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10472:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10472:131:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3430,
												"nodeType": "ExpressionStatement",
												"src": "10472:131:16"
											},
											{
												"expression": {
													"id": 3436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 3431,
																"name": "recipients",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2850,
																"src": "10613:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
																	"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
																}
															},
															"id": 3433,
															"indexExpression": {
																"id": 3432,
																"name": "_recipientAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3410,
																"src": "10624:17:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10613:29:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Recipient_$2845_storage",
																"typeString": "struct SNDRStrategy.Recipient storage ref"
															}
														},
														"id": 3434,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "10643:6:16",
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2844,
														"src": "10613:36:16",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$533",
															"typeString": "enum IStrategy.Status"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3435,
														"name": "_newStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3413,
														"src": "10652:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$533",
															"typeString": "enum IStrategy.Status"
														}
													},
													"src": "10613:49:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$533",
														"typeString": "enum IStrategy.Status"
													}
												},
												"id": 3437,
												"nodeType": "ExpressionStatement",
												"src": "10613:49:16"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3439,
															"name": "_recipientAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3410,
															"src": "10700:17:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3440,
															"name": "_newStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3413,
															"src": "10719:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Status_$533",
																"typeString": "enum IStrategy.Status"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_enum$_Status_$533",
																"typeString": "enum IStrategy.Status"
															}
														],
														"id": 3438,
														"name": "RecipientStatusUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2904,
														"src": "10677:22:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_enum$_Status_$533_$returns$__$",
															"typeString": "function (address,enum IStrategy.Status)"
														}
													},
													"id": 3441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10677:53:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3442,
												"nodeType": "EmitStatement",
												"src": "10672:58:16"
											}
										]
									},
									"documentation": {
										"id": 3408,
										"nodeType": "StructuredDocumentation",
										"src": "10192:147:16",
										"text": "@notice Updates the status of a recipient\n @param _recipientAddress Address of the recipient\n @param _newStatus New status to set"
									},
									"functionSelector": "2cb5b5ed",
									"id": 3444,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3416,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3415,
												"name": "onlyOwner",
												"nameLocations": [
													"10452:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1646,
												"src": "10452:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "10452:9:16"
										}
									],
									"name": "updateRecipientStatus",
									"nameLocation": "10353:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3410,
												"mutability": "mutable",
												"name": "_recipientAddress",
												"nameLocation": "10392:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 3444,
												"src": "10384:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3409,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10384:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3413,
												"mutability": "mutable",
												"name": "_newStatus",
												"nameLocation": "10426:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3444,
												"src": "10419:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$533",
													"typeString": "enum IStrategy.Status"
												},
												"typeName": {
													"id": 3412,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3411,
														"name": "Status",
														"nameLocations": [
															"10419:6:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 533,
														"src": "10419:6:16"
													},
													"referencedDeclaration": 533,
													"src": "10419:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$533",
														"typeString": "enum IStrategy.Status"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10374:68:16"
									},
									"returnParameters": {
										"id": 3417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10462:0:16"
									},
									"scope": 3600,
									"src": "10344:393:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3461,
										"nodeType": "Block",
										"src": "10970:136:16",
										"statements": [
											{
												"expression": {
													"id": 3455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3453,
														"name": "whitelistedCollectors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2856,
														"src": "10980:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3454,
														"name": "_newWhitelistedCollectors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3448,
														"src": "11004:25:16",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"src": "10980:49:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage",
														"typeString": "address[] storage ref"
													}
												},
												"id": 3456,
												"nodeType": "ExpressionStatement",
												"src": "10980:49:16"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3458,
															"name": "_newWhitelistedCollectors",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3448,
															"src": "11073:25:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														],
														"id": 3457,
														"name": "WhitelistedCollectorsUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2897,
														"src": "11044:28:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$",
															"typeString": "function (address[] memory)"
														}
													},
													"id": 3459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11044:55:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3460,
												"nodeType": "EmitStatement",
												"src": "11039:60:16"
											}
										]
									},
									"documentation": {
										"id": 3445,
										"nodeType": "StructuredDocumentation",
										"src": "10743:108:16",
										"text": "@notice Updates whitelisted collectors\n @param _newWhitelistedCollectors Address of the collector"
									},
									"functionSelector": "00912917",
									"id": 3462,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3451,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3450,
												"name": "onlyOwner",
												"nameLocations": [
													"10960:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1646,
												"src": "10960:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "10960:9:16"
										}
									],
									"name": "updateWhitelistedCollectors",
									"nameLocation": "10865:27:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3448,
												"mutability": "mutable",
												"name": "_newWhitelistedCollectors",
												"nameLocation": "10919:25:16",
												"nodeType": "VariableDeclaration",
												"scope": 3462,
												"src": "10902:42:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 3446,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10902:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 3447,
													"nodeType": "ArrayTypeName",
													"src": "10902:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10892:58:16"
									},
									"returnParameters": {
										"id": 3452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10970:0:16"
									},
									"scope": 3600,
									"src": "10856:250:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3483,
										"nodeType": "Block",
										"src": "11605:184:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3477,
															"name": "_registrationStartTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3465,
															"src": "11650:22:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 3478,
															"name": "_registrationEndTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3467,
															"src": "11686:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 3479,
															"name": "_allocationStartTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3469,
															"src": "11720:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 3480,
															"name": "_allocationEndTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3471,
															"src": "11754:18:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 3476,
														"name": "_updatePoolTimestamps",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3040,
														"src": "11615:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint64_$_t_uint64_$_t_uint64_$_t_uint64_$returns$__$",
															"typeString": "function (uint64,uint64,uint64,uint64)"
														}
													},
													"id": 3481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11615:167:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3482,
												"nodeType": "ExpressionStatement",
												"src": "11615:167:16"
											}
										]
									},
									"documentation": {
										"id": 3463,
										"nodeType": "StructuredDocumentation",
										"src": "11112:287:16",
										"text": "@notice Updates the pool timestamps\n @param _registrationStartTime New registration start time\n @param _registrationEndTime New registration end time\n @param _allocationStartTime New allocation start time\n @param _allocationEndTime New allocation end time"
									},
									"functionSelector": "2143e92f",
									"id": 3484,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3474,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3473,
												"name": "onlyOwner",
												"nameLocations": [
													"11595:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1646,
												"src": "11595:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "11595:9:16"
										}
									],
									"name": "updatePoolTimestamps",
									"nameLocation": "11413:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3465,
												"mutability": "mutable",
												"name": "_registrationStartTime",
												"nameLocation": "11450:22:16",
												"nodeType": "VariableDeclaration",
												"scope": 3484,
												"src": "11443:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 3464,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "11443:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3467,
												"mutability": "mutable",
												"name": "_registrationEndTime",
												"nameLocation": "11489:20:16",
												"nodeType": "VariableDeclaration",
												"scope": 3484,
												"src": "11482:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 3466,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "11482:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3469,
												"mutability": "mutable",
												"name": "_allocationStartTime",
												"nameLocation": "11526:20:16",
												"nodeType": "VariableDeclaration",
												"scope": 3484,
												"src": "11519:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 3468,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "11519:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3471,
												"mutability": "mutable",
												"name": "_allocationEndTime",
												"nameLocation": "11563:18:16",
												"nodeType": "VariableDeclaration",
												"scope": 3484,
												"src": "11556:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 3470,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "11556:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11433:154:16"
									},
									"returnParameters": {
										"id": 3475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11605:0:16"
									},
									"scope": 3600,
									"src": "11404:385:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3493,
										"nodeType": "Block",
										"src": "11974:44:16",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 3490,
														"name": "recipientList",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2853,
														"src": "11991:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 3491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "12005:6:16",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "11991:20:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3489,
												"id": 3492,
												"nodeType": "Return",
												"src": "11984:27:16"
											}
										]
									},
									"documentation": {
										"id": 3485,
										"nodeType": "StructuredDocumentation",
										"src": "11795:112:16",
										"text": "@notice Returns the total number of registered recipients\n @return uint256 Total number of recipients"
									},
									"functionSelector": "2d30e6bf",
									"id": 3494,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTotalRecipients",
									"nameLocation": "11921:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11939:2:16"
									},
									"returnParameters": {
										"id": 3489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3488,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3494,
												"src": "11965:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11965:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11964:9:16"
									},
									"scope": 3600,
									"src": "11912:106:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3507,
										"nodeType": "Block",
										"src": "12306:53:16",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 3503,
														"name": "recipients",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2850,
														"src": "12323:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$2845_storage_$",
															"typeString": "mapping(address => struct SNDRStrategy.Recipient storage ref)"
														}
													},
													"id": 3505,
													"indexExpression": {
														"id": 3504,
														"name": "_recipientAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3497,
														"src": "12334:17:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "12323:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Recipient_$2845_storage",
														"typeString": "struct SNDRStrategy.Recipient storage ref"
													}
												},
												"functionReturnParameters": 3502,
												"id": 3506,
												"nodeType": "Return",
												"src": "12316:36:16"
											}
										]
									},
									"documentation": {
										"id": 3495,
										"nodeType": "StructuredDocumentation",
										"src": "12024:166:16",
										"text": "@notice Returns the details of a recipient\n @param _recipientAddress Address of the recipient\n @return Recipient struct containing recipient details"
									},
									"functionSelector": "b9bd12e4",
									"id": 3508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRecipientDetails",
									"nameLocation": "12204:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3497,
												"mutability": "mutable",
												"name": "_recipientAddress",
												"nameLocation": "12241:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 3508,
												"src": "12233:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3496,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12233:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12223:41:16"
									},
									"returnParameters": {
										"id": 3502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3501,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3508,
												"src": "12288:16:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Recipient_$2845_memory_ptr",
													"typeString": "struct SNDRStrategy.Recipient"
												},
												"typeName": {
													"id": 3500,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3499,
														"name": "Recipient",
														"nameLocations": [
															"12288:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2845,
														"src": "12288:9:16"
													},
													"referencedDeclaration": 2845,
													"src": "12288:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Recipient_$2845_storage_ptr",
														"typeString": "struct SNDRStrategy.Recipient"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12287:18:16"
									},
									"scope": 3600,
									"src": "12195:164:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3537,
										"nodeType": "Block",
										"src": "12529:179:16",
										"statements": [
											{
												"assignments": [
													3515
												],
												"declarations": [
													{
														"constant": false,
														"id": 3515,
														"mutability": "mutable",
														"name": "remainingBalance",
														"nameLocation": "12547:16:16",
														"nodeType": "VariableDeclaration",
														"scope": 3537,
														"src": "12539:24:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3514,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12539:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3523,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3520,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "12590:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SNDRStrategy_$3600",
																		"typeString": "contract SNDRStrategy"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SNDRStrategy_$3600",
																		"typeString": "contract SNDRStrategy"
																	}
																],
																"id": 3519,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12582:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3518,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "12582:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 3521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12582:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 3516,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2837,
															"src": "12566:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1870",
																"typeString": "contract IERC20"
															}
														},
														"id": 3517,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12572:9:16",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1827,
														"src": "12566:15:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 3522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12566:30:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12539:57:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3524,
														"name": "remainingBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3515,
														"src": "12610:16:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 3525,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12629:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "12610:20:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3536,
												"nodeType": "IfStatement",
												"src": "12606:96:16",
												"trueBody": {
													"id": 3535,
													"nodeType": "Block",
													"src": "12632:70:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 3530,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1655,
																			"src": "12665:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 3531,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12665:7:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3532,
																		"name": "remainingBalance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3515,
																		"src": "12674:16:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 3527,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2837,
																		"src": "12646:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1870",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 3529,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "12652:12:16",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1939,
																	"src": "12646:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1870_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1870_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 3533,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12646:45:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3534,
															"nodeType": "ExpressionStatement",
															"src": "12646:45:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 3509,
										"nodeType": "StructuredDocumentation",
										"src": "12365:105:16",
										"text": "@notice Withdraws any remaining tokens from the contract\n @dev Can only be called by the owner"
									},
									"functionSelector": "8afbf669",
									"id": 3538,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3512,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3511,
												"name": "onlyOwner",
												"nameLocations": [
													"12519:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1646,
												"src": "12519:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "12519:9:16"
										}
									],
									"name": "withdrawRemainingTokens",
									"nameLocation": "12484:23:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3510,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12507:2:16"
									},
									"returnParameters": {
										"id": 3513,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12529:0:16"
									},
									"scope": 3600,
									"src": "12475:233:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1490
									],
									"body": {
										"id": 3549,
										"nodeType": "Block",
										"src": "12899:28:16",
										"statements": [
											{
												"expression": {
													"hexValue": "74727565",
													"id": 3547,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12916:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 3546,
												"id": 3548,
												"nodeType": "Return",
												"src": "12909:11:16"
											}
										]
									},
									"documentation": {
										"id": 3539,
										"nodeType": "StructuredDocumentation",
										"src": "12714:106:16",
										"text": "@notice Checks if address is eligible allocator.\n @return Always returns true for this strategy"
									},
									"id": 3550,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isValidAllocator",
									"nameLocation": "12834:17:16",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3543,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "12875:8:16"
									},
									"parameters": {
										"id": 3542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3541,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3550,
												"src": "12852:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3540,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12852:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12851:9:16"
									},
									"returnParameters": {
										"id": 3546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3550,
												"src": "12893:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3544,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12893:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12892:6:16"
									},
									"scope": 3600,
									"src": "12825:102:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3567,
										"nodeType": "Block",
										"src": "13063:199:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 3562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3557,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3554,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "13094:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 3555,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "13100:9:16",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "13094:15:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 3556,
																	"name": "registrationStartTime",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2858,
																	"src": "13113:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "13094:40:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3558,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "13154:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 3559,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "13160:9:16",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "13154:15:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 3560,
																	"name": "registrationEndTime",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2860,
																	"src": "13173:19:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "13154:38:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "13094:98:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "526567697374726174696f6e206973206e6f7420616374697665",
															"id": 3563,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13206:28:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_37ad055f624fd35d44667c62fce809640e24111a57fe92d10062372efb9abf00",
																"typeString": "literal_string \"Registration is not active\""
															},
															"value": "Registration is not active"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_37ad055f624fd35d44667c62fce809640e24111a57fe92d10062372efb9abf00",
																"typeString": "literal_string \"Registration is not active\""
															}
														],
														"id": 3553,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13073:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13073:171:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3565,
												"nodeType": "ExpressionStatement",
												"src": "13073:171:16"
											},
											{
												"id": 3566,
												"nodeType": "PlaceholderStatement",
												"src": "13254:1:16"
											}
										]
									},
									"documentation": {
										"id": 3551,
										"nodeType": "StructuredDocumentation",
										"src": "12933:91:16",
										"text": "@notice Modifier to ensure the function is called during the active registration period"
									},
									"id": 3568,
									"name": "onlyActiveRegistration",
									"nameLocation": "13038:22:16",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 3552,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13060:2:16"
									},
									"src": "13029:233:16",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3585,
										"nodeType": "Block",
										"src": "13394:193:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 3580,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3575,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3572,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "13425:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 3573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "13431:9:16",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "13425:15:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 3574,
																	"name": "allocationStartTime",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2862,
																	"src": "13444:19:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "13425:38:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3579,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3576,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "13483:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 3577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "13489:9:16",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "13483:15:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 3578,
																	"name": "allocationEndTime",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2864,
																	"src": "13502:17:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "13483:36:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "13425:94:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c6c6f636174696f6e206973206e6f7420616374697665",
															"id": 3581,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13533:26:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2d018334f43edb4436f4622b639a21d5ca006d66bb76bd269571ba80df227edd",
																"typeString": "literal_string \"Allocation is not active\""
															},
															"value": "Allocation is not active"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2d018334f43edb4436f4622b639a21d5ca006d66bb76bd269571ba80df227edd",
																"typeString": "literal_string \"Allocation is not active\""
															}
														],
														"id": 3571,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13404:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3582,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13404:165:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3583,
												"nodeType": "ExpressionStatement",
												"src": "13404:165:16"
											},
											{
												"id": 3584,
												"nodeType": "PlaceholderStatement",
												"src": "13579:1:16"
											}
										]
									},
									"documentation": {
										"id": 3569,
										"nodeType": "StructuredDocumentation",
										"src": "13268:89:16",
										"text": "@notice Modifier to ensure the function is called during the active allocation period"
									},
									"id": 3586,
									"name": "onlyActiveAllocation",
									"nameLocation": "13371:20:16",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 3570,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13391:2:16"
									},
									"src": "13362:225:16",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3598,
										"nodeType": "Block",
										"src": "13720:141:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3593,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3590,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "13751:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 3591,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13757:9:16",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "13751:15:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 3592,
																"name": "allocationEndTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2864,
																"src": "13769:17:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "13751:35:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c6c6f636174696f6e20706572696f6420686173206e6f7420656e646564",
															"id": 3594,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13800:33:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7663b1226429da6ae2d0efecd7465317f768ee0714be9c1e5694682080abd4dd",
																"typeString": "literal_string \"Allocation period has not ended\""
															},
															"value": "Allocation period has not ended"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7663b1226429da6ae2d0efecd7465317f768ee0714be9c1e5694682080abd4dd",
																"typeString": "literal_string \"Allocation period has not ended\""
															}
														],
														"id": 3589,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13730:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13730:113:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3596,
												"nodeType": "ExpressionStatement",
												"src": "13730:113:16"
											},
											{
												"id": 3597,
												"nodeType": "PlaceholderStatement",
												"src": "13853:1:16"
											}
										]
									},
									"documentation": {
										"id": 3587,
										"nodeType": "StructuredDocumentation",
										"src": "13593:91:16",
										"text": "@notice Modifier to ensure the function is called after the allocation period has ended"
									},
									"id": 3599,
									"name": "onlyAfterAllocation",
									"nameLocation": "13698:19:16",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 3588,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13717:2:16"
									},
									"src": "13689:172:16",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3601,
							"src": "825:13038:16",
							"usedErrors": [
								693,
								696,
								699,
								702,
								705,
								708,
								711,
								714,
								717,
								720,
								723,
								726,
								729,
								732,
								735,
								738,
								741,
								744,
								747,
								750,
								753,
								756,
								759,
								762,
								765,
								770,
								773,
								776,
								779,
								808
							]
						}
					],
					"src": "32:13832:16"
				},
				"id": 16
			}
		}
	}
}